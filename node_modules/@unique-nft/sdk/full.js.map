{"version":3,"sources":["../../../packages/sdk/src/types/enums.ts","../../../packages/common/types/subscriptions.ts","../../../packages/sdk/src/common/section.ts","../../../packages/sdk/src/common/utils.ts","../../../packages/sdk/src/common/mutation.ts","../../../packages/sdk/src/sections/balance.ts","../../../packages/sdk/src/sections/chain.ts","../../../packages/sdk/src/sections/collection.ts","../../../packages/sdk/src/sections/erc721.ts","../../../packages/sdk/src/errors/api-error.ts","../../../packages/sdk/src/errors/max-status-requests-error.ts","../../../packages/sdk/src/errors/timeout-error.ts","../../../packages/sdk/src/sections/extrinsic.ts","../../../packages/sdk/src/sections/fungible.ts","../../../packages/sdk/src/sections/refungible.ts","../../../packages/sdk/src/sections/ipfs.ts","../../../packages/sdk/src/sections/token.ts","../../../packages/sdk/src/sections/evm/utils.ts","../../../packages/sdk/src/sections/evm/mutation/evm.ts","../../../packages/sdk/src/sections/evm/mutation/contract.ts","../../../packages/sdk/src/sections/evm/contract.ts","../../../packages/sdk/src/sections/evm/evm.ts","../../../packages/sdk/src/sections/subscriptions/subscription.ts","../../../packages/sdk/src/sections/subscriptions/socket-client.ts","../../../packages/sdk/src/common/base-client.ts","../../../packages/sdk/package.json","../../../packages/sdk/src/sections/common.ts","../../../packages/sdk/src/sections/state-queries.ts","../../../packages/sdk/src/common/constants.ts","../../../packages/sdk/src/thin-client.ts","../../../packages/sdk/src/sections/nfts/utils.ts","../../../packages/sdk/src/sections/nfts/collection.ts","../../../packages/sdk/src/sections/nfts/item.ts","../../../packages/sdk/src/sections/nfts/accounts.ts","../../../packages/sdk/src/sections/nfts/common.ts","../../../packages/sdk/src/sections/nfts/pre-sign.ts","../../../packages/sdk/src/sections/nfts/nfts.ts","../../../packages/sdk/src/full.ts"],"sourcesContent":["export enum Method {\n  GET = 'GET',\n  POST = 'POST',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  PUT = 'PUT',\n}\n","export enum Rooms {\n  SYSTEM = 'system',\n  BLOCKS = 'blocks',\n  EXTRINSICS = 'extrinsics',\n  COLLECTION = 'collection',\n  CONTRACT = 'contract',\n  EVENTS = 'events',\n  BALANCE = 'balance',\n  ACCOUNT_CURRENT_BALANCE = 'account-current-balance',\n}\n\nexport enum SubscriptionEvents {\n  SYSTEM = 'system',\n  BLOCKS = 'blocks',\n  EXTRINSICS = 'extrinsics',\n  EVENTS = 'events',\n  CONTRACT_LOGS = 'contract-logs',\n  COLLECTIONS = 'collections',\n  HAS_NEXT = 'has-next',\n  BALANCES = 'balances',\n  ACCOUNT_CURRENT_BALANCE = 'account-current-balance',\n  SUBSCRIBE_STATE = 'subscribe-state',\n}\n\nexport interface Room {\n  name: Rooms;\n  data: {\n    [key: string]: string;\n  };\n}\n\nexport interface BlockFilter {\n  fromBlock?: number;\n}\n\nexport interface ExtrinsicFilter extends BlockFilter {\n  signer?: string | '*';\n}\n\nexport interface CollectionFilter extends ExtrinsicFilter {\n  collectionId?: number | '*';\n}\n\nexport interface BalancesFilter extends ExtrinsicFilter {\n  address?: string | '*';\n}\n\nexport interface AccountCurrentBalanceFilter {\n  address?: string | '*';\n}\n\nexport interface ContractFilter extends ExtrinsicFilter {\n  address?: string | '*';\n}\n\nexport interface EventsFilter extends ExtrinsicFilter {\n  section?: string | '*';\n  method?: string | '*';\n}\n\nexport interface ContractLog {\n  address: string;\n  topics: Array<any>;\n  data: string;\n}\n\nexport enum BalanceMethods {\n  WITHDRAW = 'Withdraw',\n  TRANSFER = 'Transfer',\n  DEPOSIT = 'Deposit',\n\n  DUST_LOST = 'DustLost',\n  ENDOWED = 'Endowed',\n  LOCKED = 'Locked',\n  UNLOCKED = 'Unlocked',\n  RESERVED = 'Reserved',\n}\n\nexport interface BalancesParsedData {\n  method: BalanceMethods;\n  from?: string;\n  to?: string;\n  amount: string;\n}\n","import { IBaseClient, ISection, Method } from '../types';\n\nexport abstract class Section implements ISection {\n  public readonly baseUrl: string;\n\n  constructor(\n    public readonly client: IBaseClient,\n    public readonly path: string,\n  ) {\n    this.baseUrl = `${this.client.options.baseUrl}/${path}`;\n  }\n\n  async query<P, R>(url: string, params?: P): Promise<R> {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url,\n      params,\n    });\n    return response.data;\n  }\n\n  async postRequest<P, R, Q>(url: string, data?: P, params?: Q): Promise<R> {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url,\n      data,\n      params,\n    });\n    return response.data;\n  }\n}\n","import {\n  SubmitTxBody,\n  UnsignedTxPayloadResponse,\n  Account,\n  Options,\n  Signer,\n  WithAddress,\n  WithOptionalAddress,\n} from '../types';\n\nexport const isUnsignedTxPayloadResponse = (\n  args: unknown,\n): args is UnsignedTxPayloadResponse =>\n  typeof args === 'object' && !!args && 'signerPayloadJSON' in args;\n\nexport const isSubmitTxBody = (args: unknown): args is SubmitTxBody =>\n  isUnsignedTxPayloadResponse(args) && !!args && 'signature' in args;\n\nexport function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n\nconst hasOwnProperty = (obj: unknown, prop: string): boolean =>\n  Object.prototype.hasOwnProperty.call(obj, prop);\n\nexport const getSigner = (\n  options: Options,\n  accountOrSigner?: Account | Signer,\n): Signer | undefined => {\n  if (accountOrSigner) {\n    return hasOwnProperty(accountOrSigner, 'sign')\n      ? (accountOrSigner as Signer)\n      : (accountOrSigner as Account).signer;\n  }\n\n  if (options.signer) return options.signer;\n  if (options.account?.signer) return options.account.signer;\n\n  return undefined;\n};\n\nconst getAddress = (\n  options: Options,\n  args: { address?: string },\n): string | undefined => {\n  if (args.address) return args.address;\n  if (options.signer?.address) return options.signer.address;\n  if (options.account?.address) return options.account.address;\n  if (options.account?.signer?.address) return options.account.signer.address;\n\n  return undefined;\n};\n\nexport const addAddress = <A extends WithOptionalAddress>(\n  options: Options,\n  args: A,\n): A & WithAddress => {\n  const address = getAddress(options, args);\n  if (!address) throw new Error('No address provided');\n\n  return { ...args, address };\n};\n","/* eslint-disable max-classes-per-file */\nimport {\n  ExtrinsicResultResponse,\n  SubmitResultResponse,\n  SubmitTxBody,\n  UnsignedTxPayloadResponse,\n  BuildSequencePayloadsResponse,\n  IMutation,\n  Method,\n  FeeBodyResponse,\n  IBaseClient,\n  MutationOptions,\n  IMutationEx,\n  WithOptionalAddress,\n  BatchCallArgumentsBody,\n  MethodNameBody,\n} from '../types';\nimport {\n  isUnsignedTxPayloadResponse,\n  isSubmitTxBody,\n  addAddress,\n} from './utils';\n\nexport abstract class MutationAbstract<A extends WithOptionalAddress, R>\n  implements IMutation<A, R>\n{\n  public readonly url: string;\n\n  constructor(\n    private readonly client: IBaseClient,\n    private readonly method: Method,\n    private readonly path: string,\n    private readonly methodName: MethodNameBody,\n  ) {\n    this.url = `${this.client.options.baseUrl}/${this.path}`;\n  }\n\n  async buildBatch(\n    args: A[],\n    options?: MutationOptions,\n  ): Promise<BuildSequencePayloadsResponse> {\n    const data = args.map((a) => addAddress(this.client.options, a));\n\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { ...options, use: 'BuildBatch' },\n      data,\n    });\n\n    return response.data;\n  }\n\n  async build(\n    args: A,\n    options?: MutationOptions,\n  ): Promise<UnsignedTxPayloadResponse> {\n    const data = addAddress(this.client.options, args);\n\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { ...options, use: 'Build' },\n      data,\n    });\n\n    return response.data;\n  }\n\n  async getFee(\n    args:\n      | A\n      | UnsignedTxPayloadResponse\n      | SubmitTxBody\n      | Array<A | UnsignedTxPayloadResponse | SubmitTxBody>,\n  ): Promise<FeeBodyResponse> {\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { use: 'GetFee' },\n      data: args,\n    });\n\n    return response?.data as FeeBodyResponse;\n  }\n\n  async sign(\n    args: A | UnsignedTxPayloadResponse,\n    options?: MutationOptions,\n  ): Promise<SubmitTxBody> {\n    const unsigned = isUnsignedTxPayloadResponse(args)\n      ? args\n      : await this.build(args, options);\n\n    const { signerPayloadJSON } = unsigned;\n    const { signature } = await this.client.extrinsic.sign(\n      unsigned,\n      options?.signer,\n    );\n    return { signature, signerPayloadJSON };\n  }\n\n  async submit(\n    args: A | UnsignedTxPayloadResponse | SubmitTxBody,\n    options?: MutationOptions,\n  ): Promise<SubmitResultResponse> {\n    const submitTxArguments = isSubmitTxBody(args)\n      ? args\n      : await this.sign(args, options);\n\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { ...options, use: 'Submit' },\n      data: submitTxArguments,\n    });\n\n    return response.data;\n  }\n\n  async submitWatch(\n    args: A | UnsignedTxPayloadResponse | SubmitTxBody,\n    options?: MutationOptions,\n  ): Promise<SubmitResultResponse> {\n    const submitTxArguments = isSubmitTxBody(args)\n      ? args\n      : await this.sign(args, options);\n\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { ...options, use: 'SubmitWatch' },\n      data: submitTxArguments,\n    });\n\n    return response.data;\n  }\n\n  async submitWaitResult(\n    args: A | UnsignedTxPayloadResponse | SubmitTxBody,\n    options?: MutationOptions,\n  ): Promise<ExtrinsicResultResponse<R>> {\n    const { hash } = await this.submitWatch(args, options);\n\n    return this.client.extrinsic.waitResult({ hash });\n  }\n\n  public batchCall(args: A): BatchCallArgumentsBody {\n    if (!this.methodName) {\n      throw new Error(`Batching not defined in method: ${this.path}`);\n    }\n\n    return {\n      method: this.methodName,\n      rawPayload: args,\n    };\n  }\n}\n\nclass Mutation<A, R> extends MutationAbstract<A, R> {}\n\nexport function createMutationByInstance<A, R>(\n  mutation: Mutation<A, R>,\n): IMutationEx<A, R> {\n  const submitWaitResult = (\n    args: A | UnsignedTxPayloadResponse | SubmitTxBody,\n    options?: MutationOptions,\n  ) => mutation.submitWaitResult(args, options);\n\n  submitWaitResult.build = mutation.build.bind(mutation);\n  submitWaitResult.buildBatch = mutation.buildBatch.bind(mutation);\n  submitWaitResult.getFee = mutation.getFee.bind(mutation);\n  submitWaitResult.sign = mutation.sign.bind(mutation);\n  submitWaitResult.submit = mutation.submit.bind(mutation);\n  submitWaitResult.submitWatch = mutation.submitWatch.bind(mutation);\n  submitWaitResult.submitWaitResult = mutation.submitWaitResult.bind(mutation);\n  submitWaitResult.batchCall = mutation.batchCall.bind(mutation);\n\n  return submitWaitResult as IMutationEx<A, R>;\n}\n\nexport const MethodNameNull = null;\n\nexport function createMutationEx<A, R>(\n  client: IBaseClient,\n  method: Method,\n  path: string,\n  methodName: MethodNameBody | null,\n): IMutationEx<A, R> {\n  const mutation = new Mutation<A, R>(client, method, path, methodName);\n\n  return createMutationByInstance(mutation);\n}\n","import { Section } from '../common';\nimport {\n  BalanceTransferBody,\n  BalanceTransferParsed,\n  AllBalancesResponse,\n  GetBalanceQuery,\n  Method,\n  IBalance,\n} from '../types';\nimport { createMutationEx } from '../common/mutation';\n\nexport class Balance extends Section implements IBalance {\n  readonly transfer = createMutationEx<\n    BalanceTransferBody,\n    BalanceTransferParsed\n  >(this.client, Method.POST, `${this.path}/transfer`, {\n    section: 'balances',\n    method: 'transferKeepAlive',\n  });\n\n  readonly get = (args: GetBalanceQuery): Promise<AllBalancesResponse> =>\n    this.query('', args);\n}\n","import { Section } from '../common';\nimport { ChainPropertiesResponse, IChain } from '../types';\n\nexport class Chain extends Section implements IChain {\n  readonly properties = (): Promise<ChainPropertiesResponse> =>\n    this.query('properties');\n}\n","import { Section } from '../common';\nimport {\n  PropertyPermissionsResponse,\n  SetPropertyPermissionsParsed,\n  SetCollectionPropertiesParsed,\n  DeleteCollectionPropertiesParsed,\n  CollectionPropertiesResponse,\n  SetCollectionPropertiesBody,\n  DeleteCollectionPropertiesBody,\n  SetPropertyPermissionsBody,\n  CollectionInfoWithSchemaResponse,\n  CreateCollectionBody,\n  CreateCollectionParsed,\n  SetCollectionLimitsBody,\n  SetCollectionLimitsParsed,\n  ICollection,\n  SetCollectionPermissionsBody,\n  SetCollectionPermissionsParsed,\n  TransferCollectionBody,\n  TransferCollectionParsed,\n  EffectiveCollectionLimitsResponse,\n  DestroyCollectionBody,\n  DestroyCollectionParsed,\n  SetTransfersEnabledBody,\n  SetTransfersEnabledParsed,\n  NextSponsoredResponse,\n  LastTokenIdResultDto,\n  GetStatsResponse,\n  GetCollectionTokensResponse,\n  AddToAllowListBody,\n  AddToAllowListResponse,\n  RemoveFromAllowListBody,\n  RemoveFromAllowListResponse,\n  AdminlistResponse,\n  AddCollectionAdminBody,\n  AddCollectionAdminParsed,\n  RemoveCollectionAdminBody,\n  RemoveCollectionAdminParsed,\n  SetSponsorshipBody,\n  SetSponsorshipParsed,\n  ConfirmSponsorshipBody,\n  ConfirmSponsorshipParsed,\n  AllowedResponse,\n  RemoveSponsorshipBody,\n  RemoveSponsorshipParsed,\n  AllowListQuery,\n  CollectionIdQuery,\n  NextSponsoredQuery,\n  LastTokenIdQuery,\n  AllowedQuery,\n  TotalSupplyResponse,\n  PropertyPermissionsQuery,\n  AllowListBodyResult,\n  Method,\n  CollectionWithInfoV2Dto,\n  CreateCollectionV2ArgsDto,\n} from '../types';\nimport { createMutationEx } from '../common/mutation';\n\nexport class Collection extends Section implements ICollection {\n  readonly setProperties = createMutationEx<\n    SetCollectionPropertiesBody,\n    SetCollectionPropertiesParsed\n  >(this.client, Method.POST, `${this.path}/properties`, {\n    section: 'unique',\n    method: 'setCollectionProperties',\n  });\n\n  readonly deleteProperties = createMutationEx<\n    DeleteCollectionPropertiesBody,\n    DeleteCollectionPropertiesParsed\n  >(this.client, Method.DELETE, `${this.path}/properties`, {\n    section: 'unique',\n    method: 'deleteCollectionProperties',\n  });\n\n  readonly setPropertyPermissions = createMutationEx<\n    SetPropertyPermissionsBody,\n    SetPropertyPermissionsParsed\n  >(this.client, Method.POST, `${this.path}/property-permissions`, {\n    section: 'unique',\n    method: 'setTokenPropertyPermissions',\n  });\n\n  readonly properties = (\n    args: CollectionIdQuery,\n  ): Promise<CollectionPropertiesResponse> => this.query('properties', args);\n\n  readonly tokens = (\n    args: CollectionIdQuery,\n  ): Promise<GetCollectionTokensResponse> => this.query('tokens', args);\n\n  readonly propertyPermissions = (\n    args: PropertyPermissionsQuery,\n  ): Promise<PropertyPermissionsResponse> =>\n    this.query('property-permissions', args);\n\n  /**\n   * @deprecated Use create method\n   */\n  readonly creation = createMutationEx<\n    CreateCollectionBody,\n    CreateCollectionParsed\n  >(this.client, Method.POST, this.path, {\n    section: 'unique',\n    method: 'createCollectionEx',\n  });\n\n  readonly create = createMutationEx<\n    CreateCollectionBody,\n    CreateCollectionParsed\n  >(this.client, Method.POST, this.path, {\n    section: 'unique',\n    method: 'createCollectionEx',\n  });\n\n  readonly createV2 = createMutationEx<\n    CreateCollectionV2ArgsDto,\n    CreateCollectionParsed\n  >(this.client, Method.POST, `${this.path}/v2`, {\n    section: 'unique',\n    method: 'createCollectionEx',\n  });\n\n  readonly getLimits = (\n    args: CollectionIdQuery,\n  ): Promise<EffectiveCollectionLimitsResponse> => this.query('limits', args);\n\n  readonly setLimits = createMutationEx<\n    SetCollectionLimitsBody,\n    SetCollectionLimitsParsed\n  >(this.client, Method.POST, `${this.path}/set-limits`, {\n    section: 'unique',\n    method: 'setCollectionLimits',\n  });\n\n  readonly get = (\n    args: CollectionIdQuery,\n  ): Promise<CollectionInfoWithSchemaResponse> => this.query('', args);\n\n  readonly getV2 = (\n    args: CollectionIdQuery,\n  ): Promise<CollectionWithInfoV2Dto> => this.query('v2', args);\n\n  readonly transfer = createMutationEx<\n    TransferCollectionBody,\n    TransferCollectionParsed\n  >(this.client, Method.PATCH, `${this.path}/transfer`, {\n    section: 'unique',\n    method: 'changeCollectionOwner',\n  });\n\n  readonly destroy = createMutationEx<\n    DestroyCollectionBody,\n    DestroyCollectionParsed\n  >(this.client, Method.DELETE, this.path, {\n    section: 'unique',\n    method: 'destroyCollection',\n  });\n\n  readonly stats = (): Promise<GetStatsResponse> => this.query('stats');\n\n  readonly setTransfersEnabled = createMutationEx<\n    SetTransfersEnabledBody,\n    SetTransfersEnabledParsed\n  >(this.client, Method.POST, `${this.path}/transfers-enabled`, {\n    section: 'unique',\n    method: 'setTransfersEnabledFlag',\n  });\n\n  readonly setPermissions = createMutationEx<\n    SetCollectionPermissionsBody,\n    SetCollectionPermissionsParsed\n  >(this.client, Method.POST, `${this.path}/permissions`, {\n    section: 'unique',\n    method: 'setCollectionPermissions',\n  });\n\n  readonly nextSponsored = (\n    args: NextSponsoredQuery,\n  ): Promise<NextSponsoredResponse> => this.query('next-sponsored', args);\n\n  readonly lastTokenId = (\n    args: LastTokenIdQuery,\n  ): Promise<LastTokenIdResultDto> => this.query('last-token-id', args);\n\n  readonly allowList = (args: AllowListQuery): Promise<AllowListBodyResult> =>\n    this.query('allow-list', args);\n\n  readonly allowed = (args: AllowedQuery): Promise<AllowedResponse> =>\n    this.query('allowed', args);\n\n  readonly addToAllowList = createMutationEx<\n    AddToAllowListBody,\n    AddToAllowListResponse\n  >(this.client, Method.POST, `${this.path}/add-to-allow-list`, {\n    section: 'unique',\n    method: 'addToAllowList',\n  });\n\n  readonly removeFromAllowList = createMutationEx<\n    RemoveFromAllowListBody,\n    RemoveFromAllowListResponse\n  >(this.client, Method.POST, `${this.path}/remove-from-allow-list`, {\n    section: 'unique',\n    method: 'removeFromAllowList',\n  });\n\n  readonly admins = (args: CollectionIdQuery): Promise<AdminlistResponse> =>\n    this.query('admins', args);\n\n  readonly addAdmin = createMutationEx<\n    AddCollectionAdminBody,\n    AddCollectionAdminParsed\n  >(this.client, Method.POST, `${this.path}/admins`, {\n    section: 'unique',\n    method: 'addCollectionAdmin',\n  });\n\n  readonly removeAdmin = createMutationEx<\n    RemoveCollectionAdminBody,\n    RemoveCollectionAdminParsed\n  >(this.client, Method.DELETE, `${this.path}/admins`, {\n    section: 'unique',\n    method: 'removeCollectionAdmin',\n  });\n\n  readonly setSponsorship = createMutationEx<\n    SetSponsorshipBody,\n    SetSponsorshipParsed\n  >(this.client, Method.POST, `${this.path}/sponsorship`, {\n    section: 'unique',\n    method: 'setCollectionSponsor',\n  });\n\n  readonly confirmSponsorship = createMutationEx<\n    ConfirmSponsorshipBody,\n    ConfirmSponsorshipParsed\n  >(this.client, Method.POST, `${this.path}/sponsorship/confirm`, {\n    section: 'unique',\n    method: 'confirmSponsorship',\n  });\n\n  readonly removeSponsorship = createMutationEx<\n    RemoveSponsorshipBody,\n    RemoveSponsorshipParsed\n  >(this.client, Method.DELETE, `${this.path}/sponsorship`, {\n    section: 'unique',\n    method: 'removeCollectionSponsor',\n  });\n\n  readonly totalSupply = (\n    args: CollectionIdQuery,\n  ): Promise<TotalSupplyResponse> => this.query('total-supply', args);\n}\n","import { Section } from '../common';\nimport {\n  CreateCollectionParsed,\n  CreateERC721CollectionBody,\n  CreateERC721TokenBody,\n  IERC721,\n  Method,\n  TokenId,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class ERC721 extends Section implements IERC721 {\n  readonly createCollection = createMutationEx<\n    CreateERC721CollectionBody,\n    CreateCollectionParsed\n  >(this.client, Method.POST, `${this.path}/collection`, MethodNameNull);\n\n  readonly createToken = createMutationEx<CreateERC721TokenBody, TokenId>(\n    this.client,\n    Method.POST,\n    `${this.path}/token`,\n    MethodNameNull,\n  );\n}\n","interface RestError {\n  code: string;\n  name: string;\n  message: string;\n  details?: unknown;\n}\n\nexport class ApiError extends Error implements RestError {\n  public readonly code: string;\n\n  public readonly details: unknown;\n\n  constructor(responseError: RestError) {\n    super(responseError.message);\n    this.code = responseError.code;\n    this.name = responseError.name;\n    this.details = responseError.details;\n  }\n}\n","/**\n * Error thrown when the maximum number of status requests has been reached.\n */\nexport class MaxStatusRequestsError extends Error {\n  details: string;\n\n  txHash: string;\n\n  limit: number;\n\n  constructor(txHash: string, limit: number) {\n    const message = `Extrinsic status was not changed within the specified count of status requests (${limit}).`;\n\n    super(message);\n\n    this.details =\n      `${message} This does not mean that the Extrinsic has failed nor that it will be included in the future.` +\n      ' You can check the status of the Extrinsic by calling the getStatus() method.';\n\n    this.txHash = txHash;\n    this.limit = limit;\n  }\n}\n","export class TimeoutError extends Error {\n  details: string;\n\n  txHash: string;\n\n  timeoutMs: number;\n\n  constructor(txHash: string, timeoutMs: number) {\n    const message = `Extrinsic status was not changed within the specified time (${timeoutMs} ms).`;\n\n    super(message);\n    this.details =\n      `${message} This does not mean that the Extrinsic has failed nor that it will be included in the future.` +\n      ' You can check the status of the Extrinsic by calling the getStatus() method.';\n\n    this.txHash = txHash;\n    this.timeoutMs = timeoutMs;\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport { Section } from '../common';\nimport {\n  SignTxResultResponse,\n  UnsignedTxPayloadBody,\n  SubmitTxBody,\n  SubmitResultResponse,\n  ExtrinsicResultResponse,\n  FeeResponse,\n  ExtrinsicResultRequest,\n  GetExtrinsicQuery,\n  GetExtrinsicResponse,\n  Method,\n  SdkTxBuildBody,\n  Account,\n  Signer,\n  IExtrinsics,\n  Options,\n} from '../types';\nimport { sleep } from '../common/utils';\nimport { TimeoutError, MaxStatusRequestsError } from '../errors';\n\nconst getSigner = (\n  options: Options,\n  accountOrSigner?: Account | Signer,\n): Signer | undefined => {\n  if (accountOrSigner) {\n    return 'sign' in accountOrSigner\n      ? (accountOrSigner as Signer)\n      : (accountOrSigner as Account).signer;\n  }\n\n  if (options.signer) return options.signer;\n  if (options.account?.signer) return options.account.signer;\n\n  return undefined;\n};\n\nconst getAddress = (\n  options: Options,\n  args: { address?: string },\n): string | undefined => {\n  if (args.address) return args.address;\n  if (options.signer?.address) return options.signer.address;\n  if (options.account?.address) return options.account.address;\n  if (options.account?.signer?.address) return options.account.signer.address;\n\n  return undefined;\n};\n\nexport class Extrinsic extends Section implements IExtrinsics {\n  async build(args: SdkTxBuildBody): Promise<UnsignedTxPayloadBody> {\n    const address = getAddress(this.client.options, args);\n\n    if (!address) throw new Error('Invalid address');\n\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: 'build',\n      data: {\n        ...args,\n        address,\n      },\n    });\n\n    return response.data;\n  }\n\n  async getFee(\n    args: SdkTxBuildBody | UnsignedTxPayloadBody | SubmitTxBody,\n  ): Promise<FeeResponse> {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: 'calculate-fee',\n      data: args,\n    });\n    return response.data;\n  }\n\n  async sign(\n    args: UnsignedTxPayloadBody,\n    signer?: Account | Signer,\n  ): Promise<SignTxResultResponse> {\n    const signerToUse = getSigner(this.client.options, signer);\n\n    if (!signerToUse) throw new Error(`No signer provided`);\n\n    return signerToUse.sign(args);\n  }\n\n  async submit(args: SubmitTxBody): Promise<SubmitResultResponse> {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: 'submit',\n      data: args,\n    });\n    return response.data;\n  }\n\n  async submitWatch(\n    args: SdkTxBuildBody,\n    signer = this.client.options.signer,\n  ): Promise<SubmitResultResponse> {\n    const txBuild = await this.client.extrinsic.build(args);\n\n    const signedTxPayload = await this.client.extrinsic.sign(txBuild, signer);\n\n    const submitTxResult = await this.client.extrinsic.submit({\n      signerPayloadJSON: txBuild.signerPayloadJSON,\n      signature: signedTxPayload.signature,\n    });\n\n    return submitTxResult;\n  }\n\n  async submitWaitResult(\n    args: SdkTxBuildBody,\n    signer = this.client.options.signer,\n  ): Promise<ExtrinsicResultResponse<any>> {\n    const { hash } = await this.client.extrinsic.submitWatch(args, signer);\n\n    return this.client.extrinsic.waitResult({ hash });\n  }\n\n  async waitResult({\n    hash,\n  }: {\n    hash: string;\n  }): Promise<ExtrinsicResultResponse<any>> {\n    const timeout = this.client.options.statusTotalTimeoutInMs;\n    const maxRequests = this.client.options.maximumNumberOfStatusRequests;\n    const waitTime = this.client.options.waitBetweenStatusRequestsInMs;\n\n    let isTimeExceeded = false;\n    setTimeout(() => {\n      isTimeExceeded = true;\n    }, timeout);\n\n    let requestCount = 0;\n\n    do {\n      const checkStatusResult = await this.client.extrinsic.status({ hash });\n\n      if (checkStatusResult.isCompleted || checkStatusResult.error) {\n        return checkStatusResult;\n      }\n\n      await sleep(waitTime);\n      requestCount += 1;\n    } while (!isTimeExceeded && requestCount < maxRequests);\n\n    if (isTimeExceeded) throw new TimeoutError(hash, timeout);\n\n    throw new MaxStatusRequestsError(hash, maxRequests);\n  }\n\n  async status(\n    args: ExtrinsicResultRequest,\n  ): Promise<ExtrinsicResultResponse<any>> {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url: 'status',\n      params: args,\n    });\n    return response.data;\n  }\n\n  async get(args: GetExtrinsicQuery): Promise<GetExtrinsicResponse> {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url: '',\n      params: args,\n    });\n    return response.data;\n  }\n}\n","import { Section } from '../common';\nimport {\n  BalanceTransferBody,\n  BalanceTransferParsed,\n  IFungible,\n  FungibleCollectionInfoDto,\n  CreateFungibleCollectionRequest,\n  CreateCollectionParsed,\n  BalanceResponse,\n  AddTokensResultDto,\n  TransferTokensArgsDto,\n  TransferTokensResultDto,\n  AddTokensArgsDto,\n  CollectionIdQuery,\n  GetFungibleBalanceArgsRequest,\n  Method,\n  ApproveFungibleTokensArgs,\n  AllowanceFungibleTokensArgumentsDto,\n  ApproveFungibleTokensParsed,\n  BurnFungibleBody,\n  BurnFungibleParsed,\n  GetTotalPiecesArgumentsDto,\n  GetTotalPiecesResultDto,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class Fungible extends Section implements IFungible {\n  readonly transfer = createMutationEx<\n    BalanceTransferBody,\n    BalanceTransferParsed\n  >(this.client, Method.POST, `${this.path}/transfer`, MethodNameNull);\n\n  readonly getCollection = (\n    args: CollectionIdQuery,\n  ): Promise<FungibleCollectionInfoDto> => this.query('collection', args);\n\n  readonly burn = createMutationEx<BurnFungibleBody, BurnFungibleParsed>(\n    this.client,\n    Method.DELETE,\n    this.path,\n    MethodNameNull,\n  );\n\n  readonly createCollection = createMutationEx<\n    CreateFungibleCollectionRequest,\n    CreateCollectionParsed\n  >(this.client, Method.POST, `${this.path}/collection`, MethodNameNull);\n\n  readonly getBalance = (\n    args: GetFungibleBalanceArgsRequest,\n  ): Promise<BalanceResponse> => this.query('balance', args);\n\n  readonly addTokens = createMutationEx<AddTokensArgsDto, AddTokensResultDto>(\n    this.client,\n    Method.POST,\n    `${this.path}/tokens`,\n    MethodNameNull,\n  );\n\n  readonly transferTokens = createMutationEx<\n    TransferTokensArgsDto,\n    TransferTokensResultDto\n  >(this.client, Method.POST, `${this.path}/tokens/transfer`, MethodNameNull);\n\n  readonly approveTokens = createMutationEx<\n    ApproveFungibleTokensArgs,\n    ApproveFungibleTokensParsed\n  >(this.client, Method.POST, `${this.path}/tokens/approve`, MethodNameNull);\n\n  readonly allowanceTokens = (\n    args: AllowanceFungibleTokensArgumentsDto,\n  ): Promise<BalanceResponse> => this.query('tokens/allowance', args);\n\n  readonly totalPieces = (\n    args: GetTotalPiecesArgumentsDto,\n  ): Promise<GetTotalPiecesResultDto> => this.query('total-pieces', args);\n}\n","import { Section } from '../common';\nimport {\n  CollectionIdQuery,\n  CollectionInfoWithSchemaResponse,\n  IRefungible,\n  Method,\n  TokenBalanceQuery,\n  TokenBalanceResponse,\n  CreateRefungibleCollectionRequest,\n  CreateRefungibleTokenRequest,\n  TransferRefungibleTokenRequest,\n  ApproveRefungibleTokenRequest,\n  AllowanceArgumentsQuery,\n  AllowanceRefungibleTokenResponse,\n  RepartitionTokenRequest,\n  TotalPiecesResponse,\n  TokenId,\n  CreateCollectionParsed,\n  CreatRefungibleTokenParsed,\n  TransferRefungibleTokenParsed,\n  ApproveRefungibleTokenParsed,\n  RepartitionTokenParsed,\n  AccountRefungibleTokenQuery,\n  AccountRefungibleTokensResponse,\n  BurnRefungibleBody,\n  BurnRefungibleParsed,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class Refungible extends Section implements IRefungible {\n  readonly getCollection = (\n    args: CollectionIdQuery,\n  ): Promise<CollectionInfoWithSchemaResponse> =>\n    this.query('collection', args);\n\n  readonly burn = createMutationEx<BurnRefungibleBody, BurnRefungibleParsed>(\n    this.client,\n    Method.DELETE,\n    this.path,\n    MethodNameNull,\n  );\n\n  readonly getBalance = (\n    args: TokenBalanceQuery,\n  ): Promise<TokenBalanceResponse> => this.query('tokens/balance', args);\n\n  readonly createCollection = createMutationEx<\n    CreateRefungibleCollectionRequest,\n    CreateCollectionParsed\n  >(this.client, Method.POST, `${this.path}/collection`, MethodNameNull);\n\n  readonly createToken = createMutationEx<\n    CreateRefungibleTokenRequest,\n    CreatRefungibleTokenParsed\n  >(this.client, Method.POST, `${this.path}/tokens`, MethodNameNull);\n\n  readonly transferToken = createMutationEx<\n    TransferRefungibleTokenRequest,\n    TransferRefungibleTokenParsed\n  >(this.client, Method.POST, `${this.path}/tokens/transfer`, MethodNameNull);\n\n  readonly approveToken = createMutationEx<\n    ApproveRefungibleTokenRequest,\n    ApproveRefungibleTokenParsed\n  >(this.client, Method.POST, `${this.path}/tokens/approve`, MethodNameNull);\n\n  readonly allowanceToken = (\n    args: AllowanceArgumentsQuery,\n  ): Promise<AllowanceRefungibleTokenResponse> =>\n    this.query('tokens/allowance', args);\n\n  readonly repartitionToken = createMutationEx<\n    RepartitionTokenRequest,\n    RepartitionTokenParsed\n  >(\n    this.client,\n    Method.POST,\n    `${this.path}/tokens/repartition`,\n    MethodNameNull,\n  );\n\n  readonly totalPieces = (args: TokenId): Promise<TotalPiecesResponse> =>\n    this.query('tokens/total-pieces', args);\n\n  readonly accountTokens = (\n    args: AccountRefungibleTokenQuery,\n  ): Promise<AccountRefungibleTokensResponse> =>\n    this.query('tokens/account-tokens', args);\n}\n","import FormData from 'form-data';\nimport { Section } from '../common';\nimport {\n  IIpfs,\n  IpfsAddMultipleRequest,\n  IpfsUploadMultipleRequest,\n  IpfsUploadRequest,\n  IpfsUploadResponse,\n  Method,\n  FileLike,\n} from '../types';\n\nconst isFileLike = (input: FileLike | File): input is FileLike =>\n  Object.hasOwnProperty.call(input, 'content');\n\nexport class Ipfs extends Section implements IIpfs {\n  private headers = { 'Content-Type': `multipart/form-data` };\n\n  async uploadFile({ file }: IpfsUploadRequest): Promise<IpfsUploadResponse> {\n    const data = new FormData();\n    data.append('file', file, 'file');\n\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-file`,\n      data,\n      headers: this.headers,\n    });\n\n    return response.data;\n  }\n\n  async uploadFiles({\n    files,\n  }: IpfsUploadMultipleRequest): Promise<IpfsUploadResponse> {\n    const data = Ipfs.filesToFormData(files);\n\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-files`,\n      data,\n      headers: this.headers,\n    });\n\n    return response.data;\n  }\n\n  async addFiles({\n    cid,\n    files,\n  }: IpfsAddMultipleRequest): Promise<IpfsUploadResponse> {\n    const data = Ipfs.filesToFormData(files);\n    data.append('cid', cid);\n\n    const response = await this.client.instance({\n      method: Method.PATCH,\n      url: `${this.baseUrl}/add-files`,\n      data,\n      headers: this.headers,\n    });\n\n    return response.data;\n  }\n\n  async uploadZip({ file }: IpfsUploadRequest): Promise<IpfsUploadResponse> {\n    const form = new FormData();\n    form.append('file', file, 'file');\n\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-zip`,\n      data: form,\n      headers: {\n        'Content-Type': `multipart/form-data`,\n      },\n    });\n\n    return response.data;\n  }\n\n  private static filesToFormData(files: Array<FileLike | File>): FormData {\n    const formData = new FormData();\n\n    files.forEach((file) => {\n      formData.append(\n        'files',\n        isFileLike(file) ? file.content : file,\n        file.name,\n      );\n    });\n\n    return formData;\n  }\n}\n","import { Section } from '../common';\nimport {\n  TokenChildrenResponse,\n  AccountTokensResponse,\n  TokenPropertiesResponse,\n  SetTokenPropertiesParsed,\n  DeleteTokenPropertiesParsed,\n  TransferTokenBody,\n  TransferTokenParsed,\n  TokenOwnerResponse,\n  IToken,\n  CreateTokenBody,\n  CreateMultipleTokensBody,\n  TokenId,\n  TokenIdQuery,\n  TokenByIdResponse,\n  TokenParentResponse,\n  TopmostTokenOwnerResponse,\n  NestTokenBody,\n  UnnestTokenBody,\n  SetTokenPropertiesBody,\n  DeleteTokenPropertiesBody,\n  BurnTokenBody,\n  BurnTokenParsed,\n  TokenExistsResponse,\n  ApproveTokenBody,\n  ApproveTokenParsed,\n  AllowanceResultResponse,\n  AccountTokensQuery,\n  AllowanceArgumentsQuery,\n  IsBundleResponse,\n  GetBundleResponse,\n  Method,\n  TokenBalanceQuery,\n  TokenBalanceResponse,\n  TokenWithInfoV2Dto,\n  CreateTokenV2ArgsDto,\n  CreateMultipleTokensV2ArgumentsDto,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class Token extends Section implements IToken {\n  readonly setProperties = createMutationEx<\n    SetTokenPropertiesBody,\n    SetTokenPropertiesParsed\n  >(this.client, Method.POST, `${this.path}/properties`, {\n    section: 'unique',\n    method: 'setTokenProperties',\n  });\n\n  readonly deleteProperties = createMutationEx<\n    DeleteTokenPropertiesBody,\n    DeleteTokenPropertiesParsed\n  >(this.client, Method.DELETE, `${this.path}/properties`, {\n    section: 'unique',\n    method: 'deleteTokenProperties',\n  });\n\n  readonly properties = (\n    args: TokenIdQuery,\n  ): Promise<TokenPropertiesResponse> => this.query('properties', args);\n\n  readonly create = createMutationEx<CreateTokenBody, TokenId>(\n    this.client,\n    Method.POST,\n    this.path,\n    {\n      section: 'unique',\n      method: 'createItem',\n    },\n  );\n\n  readonly createV2 = createMutationEx<CreateTokenV2ArgsDto, TokenId>(\n    this.client,\n    Method.POST,\n    `${this.path}/v2`,\n    {\n      section: 'unique',\n      method: 'createItem',\n    },\n  );\n\n  readonly createMultiple = createMutationEx<\n    CreateMultipleTokensBody,\n    TokenId[]\n  >(this.client, Method.POST, `${this.path}/create-multiple`, {\n    section: 'unique',\n    method: 'createMultipleItemsEx',\n  });\n\n  readonly createMultipleV2 = createMutationEx<\n    CreateMultipleTokensV2ArgumentsDto,\n    TokenId[]\n  >(this.client, Method.POST, `${this.path}/create-multiple-v2`, {\n    section: 'unique',\n    method: 'createMultipleItemsEx',\n  });\n\n  readonly accountTokens = (\n    args: AccountTokensQuery,\n  ): Promise<AccountTokensResponse> => this.query('account-tokens', args);\n\n  readonly get = (args: TokenIdQuery): Promise<TokenByIdResponse> =>\n    this.query('', args);\n\n  readonly getV2 = (args: TokenIdQuery): Promise<TokenWithInfoV2Dto> =>\n    this.query('v2', args);\n\n  readonly exists = (args: TokenIdQuery): Promise<TokenExistsResponse> =>\n    this.query('exists', args);\n\n  readonly children = (args: TokenIdQuery): Promise<TokenChildrenResponse> =>\n    this.query('children', args);\n\n  readonly parent = (args: TokenIdQuery): Promise<TokenParentResponse> =>\n    this.query('parent', args);\n\n  readonly owner = (args: TokenIdQuery): Promise<TokenOwnerResponse> =>\n    this.query('owner', args);\n\n  readonly topmostOwner = (\n    args: TokenIdQuery,\n  ): Promise<TopmostTokenOwnerResponse> => this.query('topmost-owner', args);\n\n  readonly nest = createMutationEx<NestTokenBody, TokenId>(\n    this.client,\n    Method.POST,\n    `${this.path}/nest`,\n    MethodNameNull,\n  );\n\n  readonly unnest = createMutationEx<UnnestTokenBody, TokenId>(\n    this.client,\n    Method.POST,\n    `${this.path}/unnest`,\n    MethodNameNull,\n  );\n\n  readonly burn = createMutationEx<BurnTokenBody, BurnTokenParsed>(\n    this.client,\n    Method.DELETE,\n    this.path,\n    {\n      section: 'unique',\n      method: 'burnFrom',\n    },\n  );\n\n  readonly transfer = createMutationEx<TransferTokenBody, TransferTokenParsed>(\n    this.client,\n    Method.PATCH,\n    `${this.path}/transfer`,\n    {\n      section: 'unique',\n      method: 'transferFrom',\n    },\n  );\n\n  readonly approve = createMutationEx<ApproveTokenBody, ApproveTokenParsed>(\n    this.client,\n    Method.POST,\n    `${this.path}/approve`,\n    {\n      section: 'unique',\n      method: 'approve',\n    },\n  );\n\n  readonly allowance = (\n    args: AllowanceArgumentsQuery,\n  ): Promise<AllowanceResultResponse> => this.query('allowance', args);\n\n  readonly isBundle = (args: TokenIdQuery): Promise<IsBundleResponse> =>\n    this.query('is-bundle', args);\n\n  readonly getBundle = (args: TokenIdQuery): Promise<GetBundleResponse> =>\n    this.query('get-bundle', args);\n\n  readonly balance = (args: TokenBalanceQuery): Promise<TokenBalanceResponse> =>\n    this.query('balance', args);\n}\n","import { Coder, Event } from 'abi-coder';\n\nimport {\n  AbiItemDto,\n  EvmEvent,\n  EvmEvents,\n  EvmUnknownEvent,\n  ExtrinsicResultEvent,\n} from '../../types';\n\nexport const parseEvmEvents = (\n  events: ExtrinsicResultEvent[],\n  abi: AbiItemDto[],\n): EvmEvents => {\n  const erc20Coder = new Coder(abi);\n  const parsedEvents: EvmEvent[] = [];\n  const unknownEvents: EvmUnknownEvent[] = [];\n\n  events\n    .filter((event) => event.section === 'evm' && event.method === 'Log')\n    .forEach((event) => {\n      const logData = event.data[0];\n\n      const { topics, data } = logData;\n\n      try {\n        const decoded: Event = erc20Coder.decodeEvent(topics, data);\n\n        parsedEvents.push({\n          name: decoded.name,\n          values: decoded.values,\n        });\n      } catch (err) {\n        unknownEvents.push({\n          topics,\n          data,\n        });\n      }\n    });\n\n  return {\n    parsedEvents,\n    unknownEvents,\n  };\n};\n","import { EvmSendArguments } from '@unique-nft/common/types/evm';\nimport {\n  createMutationByInstance,\n  MutationAbstract,\n} from '../../../common/mutation';\nimport {\n  EvmSendResultParsed,\n  IEvm,\n  Method,\n  MutationOptions,\n} from '../../../types';\nimport { parseEvmEvents } from '../utils';\n\nclass EvmSendMutation extends MutationAbstract<\n  EvmSendArguments,\n  EvmSendResultParsed\n> {\n  constructor(private readonly evm: IEvm) {\n    super(evm.client, Method.POST, 'evm/send', {\n      section: 'evm',\n      method: 'call',\n    });\n  }\n\n  public override async submitWaitResult(args, options: MutationOptions) {\n    const result = await super.submitWaitResult(args, options);\n\n    if ('abi' in args) {\n      if (result.parsed.isExecutedFailed) {\n        await this.evm.call(args);\n      }\n\n      const { parsedEvents, unknownEvents } = parseEvmEvents(\n        result.events,\n        args.abi,\n      );\n\n      result.parsed.parsedEvents = parsedEvents;\n      result.parsed.unknownEvents = unknownEvents;\n    }\n\n    return result;\n  }\n}\nexport function createEvmSendMutation(evm: IEvm) {\n  const mutation = new EvmSendMutation(evm);\n  return createMutationByInstance(mutation);\n}\n","import {\n  createMutationByInstance,\n  MethodNameNull,\n  MutationAbstract,\n} from '../../../common/mutation';\nimport {\n  ContractSendArguments,\n  EvmSendArgumentsDto,\n  EvmSendResultParsed,\n  IContract,\n  Method,\n  MutationOptions,\n} from '../../../types';\nimport { parseEvmEvents } from '../utils';\n\nclass ContractSendMutation extends MutationAbstract<\n  EvmSendArgumentsDto,\n  EvmSendResultParsed\n> {\n  constructor(private readonly contract: IContract) {\n    super(contract.client, Method.POST, 'evm/send', MethodNameNull);\n  }\n\n  public override async build(args: ContractSendArguments) {\n    return super.build({\n      contractAddress: this.contract.contractAddress,\n      abi: this.contract.abi,\n      ...args,\n    });\n  }\n\n  public override async submitWaitResult(args, options: MutationOptions) {\n    const result = await super.submitWaitResult(args, options);\n\n    if (result.parsed.isExecutedFailed) {\n      await this.contract.call(args);\n    }\n\n    const { parsedEvents, unknownEvents } = parseEvmEvents(\n      result.events,\n      this.contract.abi,\n    );\n\n    result.parsed.parsedEvents = parsedEvents;\n    result.parsed.unknownEvents = unknownEvents;\n\n    return result;\n  }\n}\n\nexport function createContractSendMutation(contract: IContract) {\n  const mutation = new ContractSendMutation(contract);\n  return createMutationByInstance(mutation);\n}\n","import { Section } from '../../common';\nimport {\n  AbiItemDto,\n  ContractCallArguments,\n  ContractSendArguments,\n  EvmCallResponseDto,\n  EvmSendResultParsed,\n  IBaseClient,\n  IContract,\n  IMutationEx,\n  Method,\n} from '../../types';\nimport { createContractSendMutation } from './mutation';\n\nexport class Contract extends Section implements IContract {\n  readonly send: IMutationEx<ContractSendArguments, EvmSendResultParsed>;\n\n  constructor(\n    client: IBaseClient,\n    readonly contractAddress: string,\n    readonly abi: AbiItemDto[],\n  ) {\n    super(client, 'evm');\n\n    this.send = createContractSendMutation(this);\n  }\n\n  public async call(args: ContractCallArguments): Promise<EvmCallResponseDto> {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: 'call',\n      data: {\n        contractAddress: this.contractAddress,\n        abi: this.abi,\n        ...args,\n      },\n    });\n    return response.data;\n  }\n}\n","import {\n  EvmCallArguments,\n  EvmContractExistsArguments,\n  EvmContractExistsResponse,\n} from '@unique-nft/common/types/evm';\nimport { Section } from '../../common';\nimport { IEvm, AbiItemDto } from '../../types';\nimport { Contract } from './contract';\nimport { createEvmSendMutation } from './mutation';\n\nexport class Evm extends Section implements IEvm {\n  readonly send = createEvmSendMutation(this);\n\n  readonly contractExists = (\n    args: EvmContractExistsArguments,\n  ): Promise<EvmContractExistsResponse> => this.query('contract-exists', args);\n\n  call<R = any>(args: EvmCallArguments): Promise<R> {\n    return this.postRequest('call', args);\n  }\n\n  public async contractConnect(\n    contractAddress: string,\n    abi: AbiItemDto[],\n  ): Promise<Contract> {\n    const { exists } = await this.contractExists({ contractAddress });\n    if (!exists) {\n      throw new Error('Contract is not exists');\n    }\n    return new Contract(this.client, contractAddress, abi);\n  }\n}\n","import { io } from 'socket.io-client';\nimport { Options, SubscriptionConnectOptions } from '../../types';\nimport { SocketClient } from './socket-client';\n\nexport class Subscription {\n  readonly options: Options;\n\n  readonly namespace = '/v1';\n\n  constructor({ options }: { options: Options }) {\n    this.options = options;\n  }\n\n  getDefaultSocketOptions(): SubscriptionConnectOptions {\n    const url = new URL(this.options.baseUrl);\n\n    const uri = `${url.origin}${this.namespace}`;\n    const path = url.pathname.replace('/v1', '/socket.io');\n\n    return {\n      uri,\n      path,\n      reconnection: true,\n      autoConnect: true,\n      transports: ['websocket'],\n    };\n  }\n\n  public connect(options?: SubscriptionConnectOptions): SocketClient {\n    const { uri, ...restOptions } = {\n      ...options,\n      ...this.getDefaultSocketOptions(),\n    };\n\n    const socket = io(uri, restOptions);\n\n    return new SocketClient(socket);\n  }\n}\n","import type { Socket } from 'socket.io-client';\nimport {\n  BalancesFilter,\n  BlockFilter,\n  CollectionFilter,\n  ContractFilter,\n  SubscriptionEvents,\n  EventsFilter,\n  ExtrinsicFilter,\n  Room,\n  AccountCurrentBalanceFilter,\n} from '@unique-nft/common/types/subscriptions';\nimport {\n  AccountCurrentBalanceData,\n  BalancesData,\n  BlockData,\n  CollectionData,\n  ContractLogData,\n  EventData,\n  ExtrinsicData,\n  HasNextData,\n  SubscribeStateData,\n} from '../../types';\n\nexport { SubscriptionEvents } from '@unique-nft/common/types/subscriptions';\n\nexport class SocketClient {\n  constructor(public readonly socket: Socket) {}\n\n  on(\n    event: SubscriptionEvents.SYSTEM,\n    listener: (room: Room, data: any) => void,\n  );\n  on(\n    event: SubscriptionEvents.BLOCKS,\n    listener: (room: Room, data: BlockData) => void,\n  );\n  on(\n    event: SubscriptionEvents.EXTRINSICS,\n    listener: (room: Room, data: ExtrinsicData) => void,\n  );\n  on(\n    event: SubscriptionEvents.EVENTS,\n    listener: (room: Room, data: EventData) => void,\n  );\n  on(\n    event: SubscriptionEvents.COLLECTIONS,\n    listener: (room: Room, data: CollectionData) => void,\n  );\n  on(\n    event: SubscriptionEvents.CONTRACT_LOGS,\n    listener: (room: Room, data: ContractLogData) => void,\n  );\n  on(\n    event: SubscriptionEvents.BALANCES,\n    listener: (room: Room, data: BalancesData) => void,\n  );\n  on(\n    event: SubscriptionEvents.ACCOUNT_CURRENT_BALANCE,\n    listener: (room: Room, data: AccountCurrentBalanceData) => void,\n  );\n  on(\n    event: SubscriptionEvents.SUBSCRIBE_STATE,\n    listener: (room: Room, data: SubscribeStateData) => void,\n  );\n  on(\n    event: SubscriptionEvents.HAS_NEXT,\n    listener: (room: Room, data: HasNextData) => void,\n  );\n  on(event: string, listener) {\n    this.socket.on(event, listener);\n  }\n\n  subscribeBlocks(filter?: BlockFilter) {\n    this.socket.emit('subscribe:blocks', filter);\n    return this;\n  }\n\n  unsubscribeBlocks(filter?: BlockFilter) {\n    this.socket.emit('unsubscribe:blocks', filter);\n    return this;\n  }\n\n  subscribeExtrinsics(filter?: ExtrinsicFilter) {\n    this.socket.emit('subscribe:extrinsics', filter);\n    return this;\n  }\n\n  unsubscribeExtrinsics(filter?: ExtrinsicFilter) {\n    this.socket.emit('unsubscribe:extrinsics', filter);\n    return this;\n  }\n\n  subscribeEvents(filter?: EventsFilter) {\n    this.socket.emit('subscribe:events', filter);\n    return this;\n  }\n\n  unsubscribeEvents(filter?: EventsFilter) {\n    this.socket.emit('unsubscribe:events', filter);\n    return this;\n  }\n\n  subscribeCollection(filter?: CollectionFilter) {\n    this.socket.emit('subscribe:collections', filter);\n    return this;\n  }\n\n  unsubscribeCollection(filter?: CollectionFilter) {\n    this.socket.emit('unsubscribe:collections', filter);\n    return this;\n  }\n\n  subscribeContract(filter?: ContractFilter) {\n    this.socket.emit('subscribe:contracts', filter);\n    return this;\n  }\n\n  unsubscribeContract(filter?: ContractFilter) {\n    this.socket.emit('unsubscribe:contracts', filter);\n    return this;\n  }\n\n  subscribeBalances(filter?: BalancesFilter) {\n    this.socket.emit('subscribe:balances', filter);\n    return this;\n  }\n\n  unsubscribeBalances(filter?: BalancesFilter) {\n    this.socket.emit('unsubscribe:balances', filter);\n    return this;\n  }\n\n  subscribeAccountCurrentBalance(filter?: AccountCurrentBalanceFilter) {\n    this.socket.emit('subscribe:account:current:balance', filter);\n    return this;\n  }\n\n  unsubscribeAccountCurrentBalance(filter?: AccountCurrentBalanceFilter) {\n    this.socket.emit('unsubscribe:account:current:balance', filter);\n    return this;\n  }\n}\n","import Axios, { AxiosInstance } from 'axios';\n\nimport { IBaseClient, IExtrinsics, Options } from '../types';\nimport { ApiError } from '../errors';\n\nimport { Extrinsic } from '../sections/extrinsic';\n\nimport { version } from '../../package.json';\n\nexport class BaseClient implements IBaseClient {\n  public instance: AxiosInstance;\n\n  public readonly options: Options;\n\n  public readonly extrinsic: IExtrinsics;\n\n  constructor(options: Options) {\n    this.options = options;\n    this.checkOptions();\n\n    this.instance = Axios.create({\n      baseURL: `${this.options.baseUrl}`,\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity,\n      ...options.axiosConfig,\n    });\n\n    this.instance.interceptors.response.use(\n      (response) => response,\n      (exception) => {\n        const err = exception.response?.data?.error;\n        throw err && typeof err === 'object' ? new ApiError(err) : exception;\n      },\n    );\n\n    if (version) {\n      this.instance.defaults.headers.common['X-SDK-Version'] = version;\n    }\n\n    this.extrinsic = new Extrinsic(this, 'extrinsic');\n  }\n\n  private checkOptions() {\n    const { baseUrl } = this.options;\n\n    if (!this.options.baseUrl) {\n      throw new Error(`'baseUrl' option is required`);\n    }\n\n    this.options.baseUrl = baseUrl.replace(/\\/$/, '');\n\n    if (!this.options.statusTotalTimeoutInMs) {\n      this.options.statusTotalTimeoutInMs = 3 * 60 * 1000;\n    }\n\n    if (!this.options.maximumNumberOfStatusRequests) {\n      this.options.maximumNumberOfStatusRequests = Number.MAX_SAFE_INTEGER;\n    }\n\n    if (!this.options.waitBetweenStatusRequestsInMs) {\n      this.options.waitBetweenStatusRequestsInMs = 5_000;\n    }\n  }\n}\n","{\n  \"name\": \"@unique-nft/sdk\",\n  \"version\": \"0.7.7\",\n  \"type\": \"module\",\n  \"homepage\": \"https://unique.network/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/UniqueNetwork/unique-sdk.git\"\n  },\n  \"dependencies\": {\n    \"abi-coder\": \"^4.1.1\",\n    \"axios\": \"^1.7.2\",\n    \"form-data\": \"^4.0.0\",\n    \"socket.io-client\": \"^4.5.4\",\n    \"@unique-nft/utils\": \"^0.3.19\",\n    \"@unique-nft/sr25519\": \"^0.0.2\"\n  },\n  \"description\": \"The @unique-nft/sdk package implements the SDK methods via the REST API. The package implements all the basic methods for working with the Unique Network SDK.\",\n  \"keywords\": [\n    \"blockchain\",\n    \"parachain\",\n    \"polkadot\",\n    \"unique network\",\n    \"nft\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/UniqueNetwork/unique-sdk/issues\"\n  },\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"Unique Network SDK team\"\n  },\n  \"types\": \"index.d.ts\",\n  \"main\": \"index.js\",\n  \"module\": \"index.mjs\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"require\": \"./index.cjs\",\n      \"default\": \"./index.js\"\n    },\n    \"./evm\": {\n      \"types\": \"./evm.d.ts\",\n      \"require\": \"./evm.cjs\",\n      \"default\": \"./evm.js\"\n    },\n    \"./subscriptions\": {\n      \"types\": \"./subscriptions.d.ts\",\n      \"require\": \"./subscriptions.cjs\",\n      \"default\": \"./subscriptions.js\"\n    },\n    \"./full\": {\n      \"types\": \"./full.d.ts\",\n      \"require\": \"./full.cjs\",\n      \"default\": \"./full.js\"\n    },\n    \"./sr25519\": {\n      \"types\": \"./sr25519.d.ts\",\n      \"require\": \"./sr25519.cjs\",\n      \"default\": \"./sr25519.js\"\n    },\n    \"./extension\": {\n      \"types\": \"./extension.d.ts\",\n      \"require\": \"./extension.cjs\",\n      \"default\": \"./extension.js\"\n    },\n    \"./utils\": {\n      \"types\": \"./utils.d.ts\",\n      \"require\": \"./utils.cjs\",\n      \"default\": \"./utils.js\"\n    }\n  }\n}\n","import { Section } from '../common';\nimport {\n  BatchingArgumentsBody,\n  BatchingResultParsed,\n  ChainPropertiesResponse,\n  GetNonceQuery,\n  GetNonceResponse,\n  ICommon,\n  Method,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class Common extends Section implements ICommon {\n  readonly chainProperties = (): Promise<ChainPropertiesResponse> =>\n    this.query('chain-properties');\n\n  readonly getNonce = (args: GetNonceQuery): Promise<GetNonceResponse> =>\n    this.query('nonce', args);\n\n  readonly batch = createMutationEx<\n    BatchingArgumentsBody,\n    BatchingResultParsed\n  >(this.client, Method.POST, `${this.path}/batching`, MethodNameNull);\n}\n","import { Section } from '../common';\nimport {\n  ApiGetterParams,\n  ApiRequestParams,\n  ApiRequestBody,\n  Method,\n  IStateQueries,\n} from '../types';\n\nexport class StateQueries extends Section implements IStateQueries {\n  async get<T = any>(args: ApiGetterParams): Promise<T> {\n    const { endpoint, module, method } = args;\n    const url = `${endpoint}/${module}/${method}`;\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url,\n    });\n    return response.data;\n  }\n\n  async execute<T = any>(\n    params: ApiRequestParams,\n    body?: ApiRequestBody,\n  ): Promise<T> {\n    const { endpoint, module, method } = params;\n    const url = `${endpoint}/${module}/${method}`;\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url,\n      data: body || {},\n    });\n    return response.data;\n  }\n}\n","type ChainConfig = {\n  websocketUrl: string;\n  rpcUrl: string;\n  restUrl: string;\n  ss58Prefix: number;\n  currency: {\n    symbol: string;\n    decimals: number;\n  };\n  logo: {\n    color: `#${string}`;\n    ipfsCid: string;\n  };\n};\n\nexport enum Chains {\n  opal = 'opal',\n  sapphire = 'sapphire',\n  quartz = 'quartz',\n  unique = 'unique',\n}\n\nexport const CHAIN_CONFIG: Record<`${Chains}`, ChainConfig> = {\n  opal: {\n    websocketUrl: 'wss://ws-opal.unique.network',\n    rpcUrl: 'https://rpc-opal.unique.network',\n    restUrl: 'https://rest.unique.network/opal/v1',\n    ss58Prefix: 42,\n    currency: {\n      symbol: 'OPL',\n      decimals: 18,\n    },\n    logo: {\n      color: '#0CB6B8',\n      ipfsCid: 'QmYJDpmWyjDa3H6BxweFmQXk4fU8b1GU7M9EqYcaUNvXzc',\n    },\n  },\n  sapphire: {\n    websocketUrl: 'wss://ws-sapphire.unique.network',\n    ss58Prefix: 8883,\n    rpcUrl: 'https://rpc-sapphire.unique.network',\n    restUrl: 'https://rest.unique.network/sapphire/v1',\n    currency: {\n      symbol: 'QTZ',\n      decimals: 18,\n    },\n    logo: {\n      color: '#5D59FF',\n      ipfsCid: 'Qmd1PGt4cDRjFbh4ihP5QKEd4XQVwN1MkebYKdF56V74pf',\n    },\n  },\n  quartz: {\n    websocketUrl: 'wss://ws-quartz.unique.network',\n    ss58Prefix: 255,\n    rpcUrl: 'https://rpc-quartz.unique.network',\n    restUrl: 'https://rest.unique.network/quartz/v1',\n    currency: {\n      symbol: 'QTZ',\n      decimals: 18,\n    },\n    logo: {\n      color: '#FF4D6A',\n      ipfsCid: 'QmaGPdccULQEFcCGxzstnmE8THfac2kSiGwvWRAiaRq4dp',\n    },\n  },\n  unique: {\n    websocketUrl: 'wss://ws.unique.network',\n    ss58Prefix: 7391,\n    rpcUrl: 'https://rpc.unique.network',\n    restUrl: 'https://rest.unique.network/unique/v1',\n    currency: {\n      symbol: 'UNQ',\n      decimals: 18,\n    },\n    logo: {\n      color: '#00BFFF',\n      ipfsCid: 'QmbJ7CGZ2GxWMp7s6jy71UGzRsMe4w3KANKXDAExYWdaFR',\n    },\n  },\n};\n","import { BaseClient } from './common/base-client';\nimport {\n  IBalance,\n  ICollection,\n  ICommon,\n  IERC721,\n  IFungible,\n  IIpfs,\n  IRefungible,\n  IStateQueries,\n  IToken,\n  Options,\n} from './types';\nimport {\n  Balance,\n  Collection,\n  ERC721,\n  Fungible,\n  Ipfs,\n  Refungible,\n  Token,\n} from './sections';\nimport { Common } from './sections/common';\nimport { StateQueries } from './sections/state-queries';\nimport { CHAIN_CONFIG } from './common/constants';\n\nexport class ThinClient extends BaseClient {\n  public readonly common: ICommon;\n\n  public readonly balance: IBalance;\n\n  public readonly fungible: IFungible;\n\n  public readonly refungible: IRefungible;\n\n  public readonly collection: ICollection;\n\n  public readonly token: IToken;\n\n  public readonly erc721: IERC721;\n\n  public readonly ipfs: IIpfs;\n\n  public readonly stateQuery: IStateQueries;\n\n  public readonly defaults: Options = {\n    baseUrl: '',\n  };\n\n  constructor(public readonly options: Options) {\n    super(options);\n\n    this.common = new Common(this, 'common');\n    this.balance = new Balance(this, 'balance');\n    this.fungible = new Fungible(this, 'fungible');\n    this.refungible = new Refungible(this, 'refungible');\n    this.collection = new Collection(this, 'collections');\n    this.token = new Token(this, 'tokens');\n    this.erc721 = new ERC721(this, 'erc721');\n    this.ipfs = new Ipfs(this, 'ipfs');\n    this.stateQuery = new StateQueries(this, 'query');\n  }\n}\n\nexport const Opal = (options?: Options): ThinClient =>\n  new ThinClient({ baseUrl: CHAIN_CONFIG.opal.restUrl, ...options });\n\nexport const Quartz = (options?: Options): ThinClient =>\n  new ThinClient({ baseUrl: CHAIN_CONFIG.quartz.restUrl, ...options });\n\nexport const Sapphire = (options?: Options): ThinClient =>\n  new ThinClient({ baseUrl: CHAIN_CONFIG.sapphire.restUrl, ...options });\n\nexport const Unique = (options?: Options): ThinClient =>\n  new ThinClient({ baseUrl: CHAIN_CONFIG.unique.restUrl, ...options });\n\nexport * from './common/constants';\n","import {\n  CollectedNamespace,\n  DecomposedNamespace,\n} from '@unique-nft/common/types/nfts';\n\nexport function decomposeNamespace<T extends CollectedNamespace>(\n  collectedNamespace: T,\n): DecomposedNamespace & Omit<T, 'namespace'> {\n  const { namespace, ...otherArgs } = collectedNamespace;\n  const { type, account } = namespace;\n  return {\n    ...otherArgs,\n    namespaceType: type,\n    namespaceAccount: account,\n  };\n}\n","import {\n  NftsCollectionConfigResult,\n  NftsCollectionDestroyArguments,\n  NftsCollectionGetResult,\n  NftsCollectionSetTeamArguments,\n  NftsCollectionSetTeamResult,\n  NftsCollectionCreateArguments,\n  NftsCollectionGetRoleArguments,\n  NftsCollectionGetRoleResponse,\n  NftsCollectionDestroyResult,\n  NftsCollectionSetMaxSupplyArguments,\n  NftsCollectionSetMaxSupplyResult,\n  NftsCollectionSetAcceptOwnershipArguments,\n  NftsCollectionSetAcceptOwnershipResult,\n  NftsCollectionTransferOwnershipArguments,\n  NftsCollectionTransferOwnershipResult,\n  NftsCollectionSetMetadataArguments,\n  NftsCollectionSetMetadataResult,\n  NftsCollectionClearMetadataArguments,\n  NftsCollectionClearMetadataResult,\n  NftsCollectionGetMetadataResult,\n  NftsCollectionLockArguments,\n  NftsCollectionLockResult,\n  NftsCollectionIsOwnerArguments,\n  NftsCollectionIsOwnerResult,\n  NftsCollectionGetItemsResult,\n  NftsCollectionGetArguments,\n  NftsCollectionGetAttributeArguments,\n  NftsCollectionGetAttributeResult,\n  NftsCollectionGetAttributesArguments,\n  NftsCollectionGetAttributesResult,\n  NftsCollectionSetAttributeArguments,\n  NftsCollectionSetAttributeResult,\n  NftsCollectionClearAttributeResult,\n  NftsCollectionClearAttributeArguments,\n  NftsCollectionAttributesApprovalsResult,\n} from '@unique-nft/common/types/nfts';\nimport { createMutationEx } from '../../common/mutation';\nimport { INftsCollection, Method } from '../../types';\nimport { Section } from '../../common';\nimport { decomposeNamespace } from './utils';\n\nexport class NftsCollection extends Section implements INftsCollection {\n  readonly create = createMutationEx<\n    NftsCollectionCreateArguments,\n    NftsCollectionGetResult\n  >(this.client, Method.POST, `${this.path}`, {\n    section: 'nfts',\n    method: 'create',\n  });\n\n  readonly destroy = createMutationEx<\n    NftsCollectionDestroyArguments,\n    NftsCollectionDestroyResult\n  >(this.client, Method.DELETE, `${this.path}`, {\n    section: 'nfts',\n    method: 'destroy',\n  });\n\n  readonly get = (\n    args: NftsCollectionGetArguments,\n  ): Promise<NftsCollectionGetResult> => this.query('', args);\n\n  readonly getItems = (\n    args: NftsCollectionGetArguments,\n  ): Promise<NftsCollectionGetItemsResult> => this.query('get-items', args);\n\n  readonly isOwner = (\n    args: NftsCollectionIsOwnerArguments,\n  ): Promise<NftsCollectionIsOwnerResult> => this.query('is-owner', args);\n\n  readonly getConfig = (\n    args: NftsCollectionGetArguments,\n  ): Promise<NftsCollectionConfigResult> => this.query('config', args);\n\n  readonly getRole = (\n    args: NftsCollectionGetRoleArguments,\n  ): Promise<NftsCollectionGetRoleResponse> => this.query('role', args);\n\n  readonly setTeam = createMutationEx<\n    NftsCollectionSetTeamArguments,\n    NftsCollectionSetTeamResult\n  >(this.client, Method.POST, `${this.path}/set-team`, {\n    section: 'nfts',\n    method: 'setTeam',\n  });\n\n  readonly setMaxSupply = createMutationEx<\n    NftsCollectionSetMaxSupplyArguments,\n    NftsCollectionSetMaxSupplyResult\n  >(this.client, Method.POST, `${this.path}/set-max-supply`, {\n    section: 'nfts',\n    method: 'setCollectionMaxSupply',\n  });\n\n  readonly setAcceptOwnership = createMutationEx<\n    NftsCollectionSetAcceptOwnershipArguments,\n    NftsCollectionSetAcceptOwnershipResult\n  >(this.client, Method.POST, `${this.path}/set-accept-ownership`, {\n    section: 'nfts',\n    method: 'setAcceptOwnership',\n  });\n\n  readonly transferOwnership = createMutationEx<\n    NftsCollectionTransferOwnershipArguments,\n    NftsCollectionTransferOwnershipResult\n  >(this.client, Method.POST, `${this.path}/transfer-ownership`, {\n    section: 'nfts',\n    method: 'transferOwnership',\n  });\n\n  readonly setMetadata = createMutationEx<\n    NftsCollectionSetMetadataArguments,\n    NftsCollectionSetMetadataResult\n  >(this.client, Method.POST, `${this.path}/set-metadata`, {\n    section: 'nfts',\n    method: 'setCollectionMetadata',\n  });\n\n  readonly clearMetadata = createMutationEx<\n    NftsCollectionClearMetadataArguments,\n    NftsCollectionClearMetadataResult\n  >(this.client, Method.POST, `${this.path}/clear-metadata`, {\n    section: 'nfts',\n    method: 'clearCollectionMetadata',\n  });\n\n  readonly getMetadata = (\n    args: NftsCollectionGetArguments,\n  ): Promise<NftsCollectionGetMetadataResult> =>\n    this.query('get-metadata', args);\n\n  readonly lock = createMutationEx<\n    NftsCollectionLockArguments,\n    NftsCollectionLockResult\n  >(this.client, Method.POST, `${this.path}/lock`, {\n    section: 'nfts',\n    method: 'lockCollection',\n  });\n\n  readonly getAttribute = (\n    args: NftsCollectionGetAttributeArguments,\n  ): Promise<NftsCollectionGetAttributeResult> =>\n    this.query('get-attribute', decomposeNamespace(args));\n\n  readonly getAttributes = (\n    args: NftsCollectionGetAttributesArguments,\n  ): Promise<NftsCollectionGetAttributesResult> =>\n    this.query('get-attributes', decomposeNamespace(args));\n\n  readonly setAttribute = createMutationEx<\n    NftsCollectionSetAttributeArguments,\n    NftsCollectionSetAttributeResult\n  >(this.client, Method.POST, `${this.path}/set-attribute`, {\n    section: 'nfts',\n    method: 'setAttribute',\n  });\n\n  readonly clearAttribute = createMutationEx<\n    NftsCollectionClearAttributeArguments,\n    NftsCollectionClearAttributeResult\n  >(this.client, Method.POST, `${this.path}/clear-attribute`, {\n    section: 'nfts',\n    method: 'clearAttribute',\n  });\n\n  readonly getAttributesApprovals = (\n    args: NftsCollectionGetArguments,\n  ): Promise<NftsCollectionAttributesApprovalsResult> =>\n    this.query('get-attributes-approvals', args);\n}\n","import {\n  NftsItemApproveAttributesArguments,\n  NftsItemApproveAttributesResult,\n  NftsItemApproveTransferArguments,\n  NftsItemApproveTransferResult,\n  NftsItemAttributesApprovalsResult,\n  NftsItemBurnResult,\n  NftsItemBuyArguments,\n  NftsItemBuyResult,\n  NftsItemCancelApprovalArguments,\n  NftsItemCancelApprovalResult,\n  NftsItemCancelAttributesApprovalArguments,\n  NftsItemCancelAttributesApprovalResult,\n  NftsItemCancelSwapResult,\n  NftsItemClaimSwapArguments,\n  NftsItemClaimSwapResult,\n  NftsItemClearAllTransferApprovalResult,\n  NftsItemClearAttributeArguments,\n  NftsItemClearAttributeResult,\n  NftsItemClearMetadataResult,\n  NftsItemCreateSwapArguments,\n  NftsItemCreateSwapResult,\n  NftsItemExtrinsicArguments,\n  NftsItemGetArguments,\n  NftsItemGetAttributeArguments,\n  NftsItemGetAttributeResult,\n  NftsItemGetAttributesArguments,\n  NftsItemGetAttributesResult,\n  NftsItemGetConfigResult,\n  NftsItemGetMetadataResult,\n  NftsItemGetPendingSwapResult,\n  NftsItemGetPriceResult,\n  NftsItemGetResult,\n  NftsItemIsOwnerArguments,\n  NftsItemIsOwnerResult,\n  NftsItemLockPropertiesArguments,\n  NftsItemLockPropertiesResult,\n  NftsItemLockTransferResult,\n  NftsItemMintArguments,\n  NftsItemMintResult,\n  NftsItemPayTipsArguments,\n  NftsItemPayTipsResult,\n  NftsItemRedepositArguments,\n  NftsItemRedepositResult,\n  NftsItemRemovePriceResult,\n  NftsItemSetAttributeArguments,\n  NftsItemSetAttributeResult,\n  NftsItemSetMetadataArguments,\n  NftsItemSetMetadataResult,\n  NftsItemSetPriceArguments,\n  NftsItemSetPriceResult,\n  NftsItemTransferArguments,\n  NftsItemTransferResult,\n} from '@unique-nft/common/types/nfts';\nimport { Section } from '../../common';\nimport { INftsItem, Method } from '../../types';\nimport { createMutationEx, MethodNameNull } from '../../common/mutation';\nimport { decomposeNamespace } from './utils';\n\nexport class NftsItem extends Section implements INftsItem {\n  readonly mint = createMutationEx<NftsItemMintArguments, NftsItemMintResult>(\n    this.client,\n    Method.POST,\n    `${this.path}/mint`,\n    {\n      section: 'nfts',\n      method: 'mint',\n    },\n  );\n\n  readonly get = (args: NftsItemGetArguments): Promise<NftsItemGetResult> =>\n    this.query('', args);\n\n  readonly isOwner = (\n    args: NftsItemIsOwnerArguments,\n  ): Promise<NftsItemIsOwnerResult> => this.query('is-owner', args);\n\n  readonly setPrice = createMutationEx<\n    NftsItemSetPriceArguments,\n    NftsItemSetPriceResult\n  >(this.client, Method.POST, `${this.path}/set-price`, {\n    section: 'nfts',\n    method: 'setPrice',\n  });\n\n  readonly buy = createMutationEx<NftsItemBuyArguments, NftsItemBuyResult>(\n    this.client,\n    Method.POST,\n    `${this.path}/buy`,\n    {\n      section: 'nfts',\n      method: 'buyItem',\n    },\n  );\n\n  readonly removePrice = createMutationEx<\n    NftsItemExtrinsicArguments,\n    NftsItemRemovePriceResult\n  >(this.client, Method.POST, `${this.path}/remove-price`, MethodNameNull);\n\n  readonly getPrice = (\n    args: NftsItemGetArguments,\n  ): Promise<NftsItemGetPriceResult> => this.query('get-price', args);\n\n  readonly setMetadata = createMutationEx<\n    NftsItemSetMetadataArguments,\n    NftsItemSetMetadataResult\n  >(this.client, Method.POST, `${this.path}/set-metadata`, {\n    section: 'nfts',\n    method: 'setMetadata',\n  });\n\n  readonly getMetadata = (\n    args: NftsItemGetArguments,\n  ): Promise<NftsItemGetMetadataResult> => this.query('get-metadata', args);\n\n  readonly clearMetadata = createMutationEx<\n    NftsItemExtrinsicArguments,\n    NftsItemClearMetadataResult\n  >(this.client, Method.POST, `${this.path}/clear-metadata`, {\n    section: 'nfts',\n    method: 'clearMetadata',\n  });\n\n  readonly getConfig = (\n    args: NftsItemGetArguments,\n  ): Promise<NftsItemGetConfigResult> => this.query('get-config', args);\n\n  readonly lockTransfer = createMutationEx<\n    NftsItemExtrinsicArguments,\n    NftsItemLockTransferResult\n  >(this.client, Method.POST, `${this.path}/lock-transfer`, {\n    section: 'nfts',\n    method: 'lockItemTransfer',\n  });\n\n  readonly unlockTransfer = createMutationEx<\n    NftsItemExtrinsicArguments,\n    NftsItemLockTransferResult\n  >(this.client, Method.POST, `${this.path}/unlock-transfer`, {\n    section: 'nfts',\n    method: 'unlockItemTransfer',\n  });\n\n  readonly transfer = createMutationEx<\n    NftsItemTransferArguments,\n    NftsItemTransferResult\n  >(this.client, Method.POST, `${this.path}/transfer`, {\n    section: 'nfts',\n    method: 'transfer',\n  });\n\n  readonly approveTransfer = createMutationEx<\n    NftsItemApproveTransferArguments,\n    NftsItemApproveTransferResult\n  >(this.client, Method.POST, `${this.path}/approve-transfer`, {\n    section: 'nfts',\n    method: 'approveTransfer',\n  });\n\n  readonly cancelApproval = createMutationEx<\n    NftsItemCancelApprovalArguments,\n    NftsItemCancelApprovalResult\n  >(this.client, Method.POST, `${this.path}/cancel-approval`, {\n    section: 'nfts',\n    method: 'cancelApproval',\n  });\n\n  readonly clearAllTransferApproval = createMutationEx<\n    NftsItemExtrinsicArguments,\n    NftsItemClearAllTransferApprovalResult\n  >(this.client, Method.POST, `${this.path}/clear-all-transfer-approval`, {\n    section: 'nfts',\n    method: 'clearAllTransferApprovals',\n  });\n\n  readonly burn = createMutationEx<\n    NftsItemExtrinsicArguments,\n    NftsItemBurnResult\n  >(this.client, Method.DELETE, `${this.path}/burn`, {\n    section: 'nfts',\n    method: 'burn',\n  });\n\n  readonly lockProperties = createMutationEx<\n    NftsItemLockPropertiesArguments,\n    NftsItemLockPropertiesResult\n  >(this.client, Method.POST, `${this.path}/lock-properties`, {\n    section: 'nfts',\n    method: 'lockItemProperties',\n  });\n\n  readonly setAttribute = createMutationEx<\n    NftsItemSetAttributeArguments,\n    NftsItemSetAttributeResult\n  >(this.client, Method.POST, `${this.path}/set-attribute`, {\n    section: 'nfts',\n    method: 'setAttribute',\n  });\n\n  readonly getAttribute = (\n    args: NftsItemGetAttributeArguments,\n  ): Promise<NftsItemGetAttributeResult> =>\n    this.query('get-attribute', decomposeNamespace(args));\n\n  readonly getAttributes = (\n    args: NftsItemGetAttributesArguments,\n  ): Promise<NftsItemGetAttributesResult> =>\n    this.query('get-attributes', decomposeNamespace(args));\n\n  readonly clearAttribute = createMutationEx<\n    NftsItemClearAttributeArguments,\n    NftsItemClearAttributeResult\n  >(this.client, Method.POST, `${this.path}/clear-attribute`, {\n    section: 'nfts',\n    method: 'clearAttribute',\n  });\n\n  readonly approveAttributes = createMutationEx<\n    NftsItemApproveAttributesArguments,\n    NftsItemApproveAttributesResult\n  >(this.client, Method.POST, `${this.path}/approve-attributes`, {\n    section: 'nfts',\n    method: 'approveItemAttributes',\n  });\n\n  readonly cancelAttributesApproval = createMutationEx<\n    NftsItemCancelAttributesApprovalArguments,\n    NftsItemCancelAttributesApprovalResult\n  >(this.client, Method.POST, `${this.path}/cancel-attributes-approval`, {\n    section: 'nfts',\n    method: 'cancelItemAttributesApproval',\n  });\n\n  readonly getAttributesApprovals = (\n    args: NftsItemGetArguments,\n  ): Promise<NftsItemAttributesApprovalsResult> =>\n    this.query('get-attributes-approvals', args);\n\n  readonly createSwap = createMutationEx<\n    NftsItemCreateSwapArguments,\n    NftsItemCreateSwapResult\n  >(this.client, Method.POST, `${this.path}/create-swap`, {\n    section: 'nfts',\n    method: 'createSwap',\n  });\n\n  readonly cancelSwap = createMutationEx<\n    NftsItemExtrinsicArguments,\n    NftsItemCancelSwapResult\n  >(this.client, Method.POST, `${this.path}/cancel-swap`, {\n    section: 'nfts',\n    method: 'cancelSwap',\n  });\n\n  readonly claimSwap = createMutationEx<\n    NftsItemClaimSwapArguments,\n    NftsItemClaimSwapResult\n  >(this.client, Method.POST, `${this.path}/claim-swap`, {\n    section: 'nfts',\n    method: 'claimSwap',\n  });\n\n  readonly getPendingSwap = (\n    args: NftsItemGetArguments,\n  ): Promise<NftsItemGetPendingSwapResult> =>\n    this.query('get-pending-swap', args);\n\n  readonly redeposit = createMutationEx<\n    NftsItemRedepositArguments,\n    NftsItemRedepositResult\n  >(this.client, Method.POST, `${this.path}/redeposit`, {\n    section: 'nfts',\n    method: 'redeposit',\n  });\n\n  readonly payTips = createMutationEx<\n    NftsItemPayTipsArguments,\n    NftsItemPayTipsResult\n  >(this.client, Method.POST, `${this.path}/pay-tips`, {\n    section: 'nfts',\n    method: 'payTips',\n  });\n}\n","import {\n  NftsAccountArguments,\n  NftsAccountCollectionsResult,\n  NftsAccountOwnershipAcceptanceResult,\n} from '@unique-nft/common/types/nfts';\nimport { Section } from '../../common';\nimport { INftsAccount } from '../../types';\n\nexport class NftsAccount extends Section implements INftsAccount {\n  readonly getOwnershipAcceptance = (\n    args: NftsAccountArguments,\n  ): Promise<NftsAccountOwnershipAcceptanceResult> =>\n    this.query('get-ownership-acceptance', args);\n\n  readonly getCollections = (\n    args: NftsAccountArguments,\n  ): Promise<NftsAccountCollectionsResult> =>\n    this.query('get-collections', args);\n}\n","import {\n  NftsNextCollectionResult,\n  NftsPalletVersionResult,\n} from '@unique-nft/common/types/nfts';\nimport { Section } from '../../common';\nimport { INftsCommon } from '../../types';\n\nexport class NftsCommon extends Section implements INftsCommon {\n  readonly getPalletVersion = (): Promise<NftsPalletVersionResult> =>\n    this.query('pallet-version', {});\n\n  readonly getNextCollectionId = (): Promise<NftsNextCollectionResult> =>\n    this.query('next-collection-id', {});\n}\n","import {\n  NftsPreSignMintArguments,\n  NftsPreSignMintResult,\n  NftsPreSignSetAttributeArguments,\n  NftsPreSignSetAttributeResult,\n} from '@unique-nft/common/types/nfts';\nimport { Section } from '../../common';\nimport { INftsPreSign, Method } from '../../types';\nimport { createMutationEx } from '../../common/mutation';\n\nexport class NftsPreSign extends Section implements INftsPreSign {\n  readonly mint = createMutationEx<\n    NftsPreSignMintArguments,\n    NftsPreSignMintResult\n  >(this.client, Method.POST, `${this.path}/mint`, {\n    section: 'nfts',\n    method: 'mintPreSigned',\n  });\n\n  readonly setAttribute = createMutationEx<\n    NftsPreSignSetAttributeArguments,\n    NftsPreSignSetAttributeResult\n  >(this.client, Method.POST, `${this.path}/set-attribute`, {\n    section: 'nfts',\n    method: 'setAttributesPreSigned',\n  });\n}\n","import { IBaseClient, INfts } from '../../types';\nimport { NftsCollection } from './collection';\nimport { Section } from '../../common';\nimport { NftsItem } from './item';\nimport { NftsAccount } from './accounts';\nimport { NftsCommon } from './common';\nimport { NftsPreSign } from './pre-sign';\n\nexport class Nfts extends Section implements INfts {\n  public readonly common: NftsCommon;\n\n  public readonly account: NftsAccount;\n\n  public readonly collection: NftsCollection;\n\n  public readonly item: NftsItem;\n\n  public readonly preSign: NftsPreSign;\n\n  constructor(client: IBaseClient, path: string) {\n    super(client, path);\n\n    this.common = new NftsCommon(client, `${path}/common`);\n    this.account = new NftsAccount(client, `${path}/accounts`);\n    this.collection = new NftsCollection(client, `${path}/collections`);\n    this.item = new NftsItem(client, `${path}/items`);\n    this.preSign = new NftsPreSign(client, `${path}/pre-sign`);\n  }\n}\n","import { Chain } from './sections';\nimport { Evm } from './sections/evm';\n\nimport type {\n  IClient,\n  ICollection,\n  IToken,\n  Options,\n  IExtrinsics,\n  IChain,\n  IEvm,\n  INfts,\n} from './types';\n\nimport { Subscription } from './sections/subscriptions';\nimport { CHAIN_CONFIG, ThinClient } from './thin-client';\nimport { Nfts } from './sections/nfts';\n\nexport type { SocketClient, Subscription } from './sections/subscriptions';\n\nexport class Sdk extends ThinClient implements IClient {\n  /**\n   * @deprecated use common\n   */\n  public readonly chain: IChain;\n\n  /**\n   * @deprecated use extrinsic\n   */\n  public readonly extrinsics: IExtrinsics;\n\n  /**\n   * @deprecated use collection\n   */\n  public readonly collections: ICollection;\n\n  /**\n   * @deprecated use token\n   */\n  public readonly tokens: IToken;\n\n  public readonly evm: IEvm;\n\n  public readonly subscription: Subscription;\n\n  /**\n   * @deprecated use subscription\n   */\n  public readonly subscriptions: Subscription;\n\n  public readonly nfts: INfts;\n\n  public readonly defaults: Options = {\n    baseUrl: '',\n  };\n\n  constructor(public readonly options: Options) {\n    super(options);\n\n    this.evm = new Evm(this, 'evm');\n    this.subscription = new Subscription(this);\n\n    this.chain = new Chain(this, 'chain');\n    this.extrinsics = this.extrinsic;\n    this.collections = this.collection;\n    this.tokens = this.token;\n    this.subscriptions = this.subscription;\n\n    this.nfts = new Nfts(this, 'nfts');\n  }\n}\n\nexport const Opal = (options?: Options): Sdk =>\n  new Sdk({ baseUrl: CHAIN_CONFIG.opal.restUrl, ...options });\n\nexport const Quartz = (options?: Options): Sdk =>\n  new Sdk({ baseUrl: CHAIN_CONFIG.quartz.restUrl, ...options });\n\nexport const Sapphire = (options?: Options): Sdk =>\n  new Sdk({ baseUrl: CHAIN_CONFIG.sapphire.restUrl, ...options });\n\nexport const Unique = (options?: Options): Sdk =>\n  new Sdk({ baseUrl: CHAIN_CONFIG.unique.restUrl, ...options });\n\n/**\n * @deprecated use Sdk\n */\nexport const Client = Sdk;\n\nexport * from './types';\n\nexport * from './common/constants';\n"],"mappings":"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","names":["Method","Rooms","SubscriptionEvents","BalanceMethods","Section","constructor","client","path","baseUrl","options","query","url","params","response","instance","method","Method","GET","baseURL","data","postRequest","POST","isUnsignedTxPayloadResponse","args","isSubmitTxBody","sleep","ms","Promise","resolve","setTimeout","getAddress","options","args","address","signer","account","undefined","addAddress","Error","MutationAbstract","constructor","client","method","path","methodName","url","options","baseUrl","buildBatch","args","data","map","a","addAddress","response","instance","params","use","build","getFee","sign","unsigned","isUnsignedTxPayloadResponse","signerPayloadJSON","signature","extrinsic","signer","submit","submitTxArguments","isSubmitTxBody","submitWatch","submitWaitResult","hash","waitResult","batchCall","Error","rawPayload","Mutation","createMutationByInstance","mutation","bind","MethodNameNull","createMutationEx","Balance","Section","transfer","createMutationEx","client","Method","POST","path","section","method","get","args","query","Chain","Section","properties","query","Collection","Section","setProperties","createMutationEx","client","Method","POST","path","section","method","deleteProperties","DELETE","setPropertyPermissions","properties","args","query","tokens","propertyPermissions","creation","create","createV2","getLimits","setLimits","get","getV2","transfer","PATCH","destroy","stats","setTransfersEnabled","setPermissions","nextSponsored","lastTokenId","allowList","allowed","addToAllowList","removeFromAllowList","admins","addAdmin","removeAdmin","setSponsorship","confirmSponsorship","removeSponsorship","totalSupply","ERC721","Section","createCollection","createMutationEx","client","Method","POST","path","MethodNameNull","createToken","ApiError","Error","constructor","responseError","message","code","details","name","MaxStatusRequestsError","Error","constructor","txHash","limit","message","details","TimeoutError","Error","constructor","txHash","timeoutMs","message","details","getSigner","options","accountOrSigner","signer","account","undefined","getAddress","args","address","Extrinsic","Section","build","client","Error","response","instance","method","Method","POST","baseURL","baseUrl","url","data","getFee","sign","signerToUse","submit","submitWatch","txBuild","extrinsic","signedTxPayload","submitTxResult","signerPayloadJSON","signature","submitWaitResult","hash","waitResult","timeout","statusTotalTimeoutInMs","maxRequests","maximumNumberOfStatusRequests","waitTime","waitBetweenStatusRequestsInMs","isTimeExceeded","setTimeout","requestCount","checkStatusResult","status","isCompleted","error","sleep","TimeoutError","MaxStatusRequestsError","GET","params","get","Fungible","Section","transfer","createMutationEx","client","Method","POST","path","MethodNameNull","getCollection","args","query","burn","DELETE","createCollection","getBalance","addTokens","transferTokens","approveTokens","allowanceTokens","totalPieces","Refungible","Section","getCollection","args","query","burn","createMutationEx","client","Method","DELETE","path","MethodNameNull","getBalance","createCollection","POST","createToken","transferToken","approveToken","allowanceToken","repartitionToken","totalPieces","accountTokens","FormData","isFileLike","input","Object","hasOwnProperty","call","Ipfs","Section","headers","uploadFile","file","data","FormData","append","response","client","instance","method","Method","POST","url","baseUrl","uploadFiles","files","filesToFormData","addFiles","cid","PATCH","uploadZip","form","formData","forEach","content","name","Token","Section","setProperties","createMutationEx","client","Method","POST","path","section","method","deleteProperties","DELETE","properties","args","query","create","createV2","createMultiple","createMultipleV2","accountTokens","get","getV2","exists","children","parent","owner","topmostOwner","nest","MethodNameNull","unnest","burn","transfer","PATCH","approve","allowance","isBundle","getBundle","balance","Coder","parseEvmEvents","events","abi","erc20Coder","Coder","parsedEvents","unknownEvents","filter","event","section","method","forEach","logData","data","topics","decoded","decodeEvent","push","name","values","err","EvmSendMutation","MutationAbstract","constructor","evm","client","Method","POST","section","method","submitWaitResult","args","options","result","parsed","isExecutedFailed","call","parsedEvents","unknownEvents","parseEvmEvents","events","abi","createEvmSendMutation","mutation","createMutationByInstance","ContractSendMutation","MutationAbstract","constructor","contract","client","Method","POST","MethodNameNull","build","args","contractAddress","abi","submitWaitResult","options","result","parsed","isExecutedFailed","call","parsedEvents","unknownEvents","parseEvmEvents","events","createContractSendMutation","mutation","createMutationByInstance","Contract","Section","constructor","client","contractAddress","abi","send","createContractSendMutation","call","args","response","instance","method","Method","POST","baseURL","baseUrl","url","data","Evm","Section","send","createEvmSendMutation","contractExists","args","query","call","postRequest","contractConnect","contractAddress","abi","exists","Error","Contract","client","io","SocketClient","constructor","socket","on","event","listener","subscribeBlocks","filter","emit","unsubscribeBlocks","subscribeExtrinsics","unsubscribeExtrinsics","subscribeEvents","unsubscribeEvents","subscribeCollection","unsubscribeCollection","subscribeContract","unsubscribeContract","subscribeBalances","unsubscribeBalances","subscribeAccountCurrentBalance","unsubscribeAccountCurrentBalance","Subscription","constructor","options","namespace","getDefaultSocketOptions","url","URL","baseUrl","uri","origin","path","pathname","replace","reconnection","autoConnect","transports","connect","restOptions","socket","io","SocketClient","Axios","BaseClient","constructor","options","instance","extrinsic","checkOptions","Axios","create","baseURL","baseUrl","maxContentLength","Infinity","maxBodyLength","axiosConfig","interceptors","response","use","exception","err","data","error","ApiError","version","defaults","headers","common","Extrinsic","Error","replace","statusTotalTimeoutInMs","maximumNumberOfStatusRequests","Number","MAX_SAFE_INTEGER","waitBetweenStatusRequestsInMs","Common","Section","chainProperties","query","getNonce","args","batch","createMutationEx","client","Method","POST","path","MethodNameNull","StateQueries","Section","get","args","endpoint","module","method","url","response","client","instance","Method","GET","baseURL","baseUrl","data","execute","params","body","POST","Chains","CHAIN_CONFIG","opal","websocketUrl","rpcUrl","restUrl","ss58Prefix","currency","symbol","decimals","logo","color","ipfsCid","sapphire","quartz","unique","ThinClient","BaseClient","constructor","options","common","balance","fungible","refungible","collection","token","erc721","ipfs","stateQuery","defaults","baseUrl","Common","Balance","Fungible","Refungible","Collection","Token","ERC721","Ipfs","StateQueries","decomposeNamespace","collectedNamespace","namespace","otherArgs","type","account","namespaceType","namespaceAccount","NftsCollection","Section","create","createMutationEx","client","Method","POST","path","section","method","destroy","DELETE","get","args","query","getItems","isOwner","getConfig","getRole","setTeam","setMaxSupply","setAcceptOwnership","transferOwnership","setMetadata","clearMetadata","getMetadata","lock","getAttribute","decomposeNamespace","getAttributes","setAttribute","clearAttribute","getAttributesApprovals","NftsItem","Section","mint","createMutationEx","client","Method","POST","path","section","method","get","args","query","isOwner","setPrice","buy","removePrice","MethodNameNull","getPrice","setMetadata","getMetadata","clearMetadata","getConfig","lockTransfer","unlockTransfer","transfer","approveTransfer","cancelApproval","clearAllTransferApproval","burn","DELETE","lockProperties","setAttribute","getAttribute","decomposeNamespace","getAttributes","clearAttribute","approveAttributes","cancelAttributesApproval","getAttributesApprovals","createSwap","cancelSwap","claimSwap","getPendingSwap","redeposit","payTips","NftsAccount","Section","getOwnershipAcceptance","args","query","getCollections","NftsCommon","Section","getPalletVersion","query","getNextCollectionId","NftsPreSign","Section","mint","createMutationEx","client","Method","POST","path","section","method","setAttribute","Nfts","Section","constructor","client","path","common","account","collection","item","preSign","NftsCommon","NftsAccount","NftsCollection","NftsItem","NftsPreSign","Sdk","ThinClient","constructor","options","chain","extrinsics","collections","tokens","evm","subscription","subscriptions","nfts","defaults","baseUrl","Evm","Subscription","Chain","extrinsic","collection","token","Nfts","Opal","CHAIN_CONFIG","opal","restUrl","Quartz","quartz","Sapphire","sapphire","Unique","unique","Client"]}