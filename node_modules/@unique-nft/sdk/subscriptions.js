var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// packages/sdk/src/sections/subscriptions/subscription.ts
import { io } from "socket.io-client";

// packages/common/types/subscriptions.ts
var Rooms;
(function(Rooms2) {
  Rooms2["SYSTEM"] = "system";
  Rooms2["BLOCKS"] = "blocks";
  Rooms2["EXTRINSICS"] = "extrinsics";
  Rooms2["COLLECTION"] = "collection";
  Rooms2["CONTRACT"] = "contract";
  Rooms2["EVENTS"] = "events";
  Rooms2["BALANCE"] = "balance";
  Rooms2["ACCOUNT_CURRENT_BALANCE"] = "account-current-balance";
})(Rooms || (Rooms = {}));
var SubscriptionEvents;
(function(SubscriptionEvents2) {
  SubscriptionEvents2["SYSTEM"] = "system";
  SubscriptionEvents2["BLOCKS"] = "blocks";
  SubscriptionEvents2["EXTRINSICS"] = "extrinsics";
  SubscriptionEvents2["EVENTS"] = "events";
  SubscriptionEvents2["CONTRACT_LOGS"] = "contract-logs";
  SubscriptionEvents2["COLLECTIONS"] = "collections";
  SubscriptionEvents2["HAS_NEXT"] = "has-next";
  SubscriptionEvents2["BALANCES"] = "balances";
  SubscriptionEvents2["ACCOUNT_CURRENT_BALANCE"] = "account-current-balance";
  SubscriptionEvents2["SUBSCRIBE_STATE"] = "subscribe-state";
})(SubscriptionEvents || (SubscriptionEvents = {}));
var BalanceMethods;
(function(BalanceMethods2) {
  BalanceMethods2["WITHDRAW"] = "Withdraw";
  BalanceMethods2["TRANSFER"] = "Transfer";
  BalanceMethods2["DEPOSIT"] = "Deposit";
  BalanceMethods2["DUST_LOST"] = "DustLost";
  BalanceMethods2["ENDOWED"] = "Endowed";
  BalanceMethods2["LOCKED"] = "Locked";
  BalanceMethods2["UNLOCKED"] = "Unlocked";
  BalanceMethods2["RESERVED"] = "Reserved";
})(BalanceMethods || (BalanceMethods = {}));

// packages/sdk/src/sections/subscriptions/socket-client.ts
var SocketClient = class {
  constructor(socket) {
    __publicField(this, "socket");
    this.socket = socket;
  }
  on(event, listener) {
    this.socket.on(event, listener);
  }
  subscribeBlocks(filter) {
    this.socket.emit("subscribe:blocks", filter);
    return this;
  }
  unsubscribeBlocks(filter) {
    this.socket.emit("unsubscribe:blocks", filter);
    return this;
  }
  subscribeExtrinsics(filter) {
    this.socket.emit("subscribe:extrinsics", filter);
    return this;
  }
  unsubscribeExtrinsics(filter) {
    this.socket.emit("unsubscribe:extrinsics", filter);
    return this;
  }
  subscribeEvents(filter) {
    this.socket.emit("subscribe:events", filter);
    return this;
  }
  unsubscribeEvents(filter) {
    this.socket.emit("unsubscribe:events", filter);
    return this;
  }
  subscribeCollection(filter) {
    this.socket.emit("subscribe:collections", filter);
    return this;
  }
  unsubscribeCollection(filter) {
    this.socket.emit("unsubscribe:collections", filter);
    return this;
  }
  subscribeContract(filter) {
    this.socket.emit("subscribe:contracts", filter);
    return this;
  }
  unsubscribeContract(filter) {
    this.socket.emit("unsubscribe:contracts", filter);
    return this;
  }
  subscribeBalances(filter) {
    this.socket.emit("subscribe:balances", filter);
    return this;
  }
  unsubscribeBalances(filter) {
    this.socket.emit("unsubscribe:balances", filter);
    return this;
  }
  subscribeAccountCurrentBalance(filter) {
    this.socket.emit("subscribe:account:current:balance", filter);
    return this;
  }
  unsubscribeAccountCurrentBalance(filter) {
    this.socket.emit("unsubscribe:account:current:balance", filter);
    return this;
  }
};
__name(SocketClient, "SocketClient");

// packages/sdk/src/sections/subscriptions/subscription.ts
var Subscription = class {
  constructor({ options }) {
    __publicField(this, "options");
    __publicField(this, "namespace", "/v1");
    this.options = options;
  }
  getDefaultSocketOptions() {
    const url = new URL(this.options.baseUrl);
    const uri = `${url.origin}${this.namespace}`;
    const path = url.pathname.replace("/v1", "/socket.io");
    return {
      uri,
      path,
      reconnection: true,
      autoConnect: true,
      transports: [
        "websocket"
      ]
    };
  }
  connect(options) {
    const { uri, ...restOptions } = {
      ...options,
      ...this.getDefaultSocketOptions()
    };
    const socket = io(uri, restOptions);
    return new SocketClient(socket);
  }
};
__name(Subscription, "Subscription");

// packages/sdk/src/types/enums.ts
var Method;
(function(Method2) {
  Method2["GET"] = "GET";
  Method2["POST"] = "POST";
  Method2["DELETE"] = "DELETE";
  Method2["PATCH"] = "PATCH";
  Method2["PUT"] = "PUT";
})(Method || (Method = {}));

// packages/sdk/src/subscriptions.ts
var subscriptions_default = Subscription;
export {
  BalanceMethods,
  Method,
  Rooms,
  Subscription as SubscriptionClient,
  SubscriptionEvents,
  subscriptions_default as default
};
//# sourceMappingURL=subscriptions.js.map