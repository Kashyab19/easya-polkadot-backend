import { AxiosRequestConfig, AxiosInstance } from 'axios';
import { Blob, Buffer } from 'buffer';
import { ManagerOptions, SocketOptions, Socket } from 'socket.io-client';

declare type HexString = `0x${string}`;
interface AbiInput {
    name: string;
}
interface AbiOutput {
    internalType: string;
    name: string;
    type: string;
    components?: AbiOutput[];
}
interface AbiItem {
    name: string;
    inputs?: AbiInput[];
    outputs?: AbiOutput[];
}
declare type Abi = AbiItem[];
interface EvmArguments<A = any> {
    address: string;
    abi: Abi;
    contractAddress: string;
    funcName: string;
    args?: any[] | A;
    nonce?: number | HexString;
    value?: number | string;
}
interface EvmCallArguments<A = any> extends EvmArguments<A> {
    at?: string;
}
declare type EvmCallResponse = any;
interface EvmSendArguments<A = any> extends EvmArguments<A> {
    gasLimit?: number | string;
    maxFeePerGas?: number | string;
    maxPriorityFeePerGas?: number | string;
}
interface EvmContractExistsArguments {
    contractAddress: string;
    blockNumber?: number | string;
}
interface EvmContractExistsResponse {
    exists: boolean;
}

declare type Address = string;
interface AddressArguments {
    address: Address;
}

interface NftsMetadata {
    data: string;
}
interface NftsItemSettings {
    Transferable: boolean;
    LockedMetadata: boolean;
    LockedAttributes: boolean;
}
declare type NftsCreateItemSettings = Partial<NftsItemSettings>;
interface NftsAttribute {
    key: string;
    value: string;
}
interface NftsAttributeSpaced extends NftsAttribute {
    namespace: NftsAttributeNamespace;
}
interface NftsAttributeNamespace {
    type: 'Pallet' | 'CollectionOwner' | 'ItemOwner' | 'Account';
    account?: Address | null;
}

interface NftsAccountArguments {
    account: Address;
}
interface NftsAccountOwnershipAcceptanceResult {
    collectionId: number | null;
}
interface NftsAccountCollectionsResult {
    account: string;
    collections: number[];
}

interface NftsItemId {
    collectionId: number;
    itemId: number;
}
interface NftsItemGetArguments extends NftsItemId {
}
interface NftsItemExtrinsicArguments extends NftsItemId, AddressArguments {
}
interface NftsItemMintWitness {
    ownedItem?: Address;
    mintPrice?: string | number;
}
interface NftsItemMintArguments extends NftsItemExtrinsicArguments {
    mintTo?: Address;
    witnessData?: NftsItemMintWitness;
}
interface NftsItemMintResult extends NftsItemId {
    owner: Address;
}
interface NftsItemDeposit {
    account: Address;
    amount: string;
}
declare type NftsItemApprovals = Record<Address, number>;
interface NftsItemGetResult extends NftsItemId {
    owner: Address;
    deposit: NftsItemDeposit;
    approvals: NftsItemApprovals;
}
interface NftsItemSetPriceArguments extends NftsItemExtrinsicArguments {
    price?: number | string;
    whitelistedBuyer?: Address | null;
}
interface NftsItemPrice {
    price: string | number;
    whitelistedBuyer: Address | null;
}
interface NftsItemSetPriceResult extends NftsItemId {
    price: NftsItemPrice;
}
interface NftsItemGetPriceResult extends NftsItemGetArguments {
    price: NftsItemPrice | null;
}
interface NftsItemSetMetadataArguments extends NftsItemExtrinsicArguments {
    metadata: NftsMetadata;
}
interface NftsItemSetMetadataResult extends NftsItemId {
    metadata: NftsMetadata | null;
}
interface NftsItemGetMetadataResult extends NftsItemId {
    metadata: NftsMetadata | null;
}
interface NftsItemClearMetadataResult extends NftsItemId {
    ok: boolean;
}
interface NftsItemRemovePriceResult extends NftsItemId {
    ok: boolean;
}
interface NftsItemGetConfigResult extends NftsItemId {
    settings: number;
}
interface NftsItemLockTransferResult extends NftsItemId {
    locked: boolean;
}
interface NftsItemTransferArguments extends NftsItemExtrinsicArguments {
    to: Address;
}
interface NftsItemTransferResult extends NftsItemId {
    from: Address;
    to: Address;
}
interface NftsItemApproveTransferArguments extends NftsItemExtrinsicArguments {
    delegate: Address;
    deadline?: number | null;
}
interface NftsItemApproveTransferResult extends NftsItemId {
    owner: Address;
    delegate: Address;
    deadline: number | null;
}
interface NftsItemCancelApprovalArguments extends NftsItemExtrinsicArguments {
    delegate: Address;
}
interface NftsItemCancelApprovalResult extends NftsItemId {
    owner: Address;
    delegate: Address;
}
interface NftsItemClearAllTransferApprovalResult extends NftsItemId {
    owner: Address;
}
interface NftsItemBurnResult extends NftsItemId {
    owner: Address;
}
interface NftsItemLockPropertiesArguments extends NftsItemExtrinsicArguments {
    lockMetadata?: boolean;
    lockAttributes?: boolean;
}
interface NftsItemLockPropertiesResult extends NftsItemId {
    lockMetadata: boolean;
    lockAttributes: boolean;
}
interface NftsItemSetAttributeArguments extends NftsItemExtrinsicArguments {
    attribute: NftsAttributeSpaced;
}
interface NftsItemSetAttributeResult extends NftsItemId {
    attribute: NftsAttributeSpaced;
}
interface NftsItemClearAttributeArguments extends NftsItemExtrinsicArguments {
    namespace: NftsAttributeNamespace;
    key: string;
}
interface NftsItemClearAttributeResult extends NftsItemId {
    namespace: NftsAttributeNamespace;
    key: string;
}
interface NftsItemBuyArguments extends NftsItemExtrinsicArguments {
    bidPrice: string | number;
}
interface NftsItemBuyResult extends NftsItemId {
    price: string | number;
    seller: Address;
    buyer: Address;
}
interface NftsItemApproveAttributesArguments extends NftsItemExtrinsicArguments {
    delegate: Address;
}
interface NftsItemApproveAttributesResult extends NftsItemId {
    delegate: Address;
}
interface NftsItemCancelAttributesApprovalWitness {
    accountAttributes: number;
}
interface NftsItemCancelAttributesApprovalArguments extends NftsItemExtrinsicArguments {
    delegate: Address;
    witness: NftsItemCancelAttributesApprovalWitness;
}
interface NftsItemCancelAttributesApprovalResult extends NftsItemId {
    delegate: Address;
}
interface NftsItemAttributesApprovalsResult extends NftsItemId {
    accounts: string[];
}
interface NftsItemGetAttributeArguments extends NftsItemId {
    namespace: NftsAttributeNamespace;
    key: string;
}
interface NftsItemGetAttributeResult extends NftsItemId {
    attribute: NftsAttributeSpaced | null;
}
interface NftsItemGetAttributesArguments extends NftsItemId {
    namespace: NftsAttributeNamespace;
}
interface NftsItemGetAttributesResult extends NftsItemId {
    attributes: NftsAttributeSpaced[];
}
interface PriceWithDirection {
    amount: number | string;
    direction: 'Send' | 'Receive';
}
interface NftsItemCreateSwapArguments extends NftsItemExtrinsicArguments {
    desiredCollectionId: number;
    desiredItemId?: number | null;
    price?: PriceWithDirection | null;
    duration?: number | null;
}
interface NftsItemSwapData {
    desiredCollectionId: number;
    desiredItemId: number | null;
    price: PriceWithDirection | null;
    deadline: number;
}
interface NftsItemCreateSwapResult {
    collectionId: number;
    itemId: number;
    swapData: NftsItemSwapData | null;
}
interface NftsItemGetPendingSwapResult extends NftsItemId {
    swapData: NftsItemSwapData | null;
}
interface NftsItemCancelSwapResult extends NftsItemId {
}
interface NftsItemClaimSwapArguments extends NftsItemExtrinsicArguments {
    receiveCollectionId: number;
    receiveItemId: number;
    witnessPrice?: PriceWithDirection | null;
}
interface NftsItemClaimSwapResult extends NftsItemId {
    sentAddress: Address;
    receivedCollectionId: number;
    receivedItemId: number;
    receivedAddress: Address;
    price: PriceWithDirection | null;
    deadline: number;
}
interface NftsItemIsOwnerArguments extends NftsItemId {
    account: Address;
}
interface NftsItemIsOwnerResult extends NftsItemId {
    account: Address;
    isOwner: boolean;
}
interface NftsItemRedepositArguments extends AddressArguments {
    collectionId: number;
    items: number[];
}
interface NftsItemRedepositResult {
    collectionId: number;
    successfulItems: number[];
}
interface NftsItemTip extends NftsItemId {
    receiver: Address;
    amount: number | string;
}
interface NftsItemPayTipsArguments extends AddressArguments {
    tips: NftsItemTip[];
}
interface NftsItemTipSent extends NftsItemTip {
    sender: Address;
}
interface NftsItemPayTipsResult {
    tips: NftsItemTipSent[];
}

interface NftsCollectionId {
    collectionId: number;
}
interface NftsCollectionExtrinsicArguments extends NftsCollectionId, AddressArguments {
}
interface NftsCollectionGetArguments extends NftsCollectionId {
}
interface NftsPalletVersionResult {
    version: number;
}
interface NftsNextCollectionResult {
    nextCollectionId: string | number;
}
interface NftsCollectionSettings {
    LockedTransferItems: boolean;
    LockedMetadata: boolean;
    LockedAttributes: boolean;
    LockedMaxSupply: boolean;
}
declare type NftsCreateCollectionSettings = Partial<NftsCollectionSettings>;
interface NftsMintSettings {
    mintType: 'Issuer' | 'Public' | 'HolderOf';
    price: string | number | null;
    startBlock: number | null;
    endBlock: number | null;
    defaultItemSettings: NftsItemSettings | null;
}
interface NftsCollectionConfigResult extends NftsCollectionId {
    settings: NftsCollectionSettings;
    maxSupply: number | null;
    mintSettings: NftsMintSettings;
}
declare type NftsCreateMintSettings = Partial<Omit<NftsMintSettings, 'defaultItemSettings'>> & {
    defaultItemSettings?: NftsCreateItemSettings;
};
declare type NftsCreateCollectionConfig = Partial<Omit<NftsCollectionConfigResult, 'mintSettings' | 'settings'>> & {
    mintSettings?: NftsCreateMintSettings;
    settings?: NftsCreateCollectionSettings;
};
interface NftsCollectionCreateArguments extends AddressArguments {
    admin?: Address;
    collectionConfig: NftsCreateCollectionConfig;
}
interface NftsCollectionGetResult extends NftsCollectionId {
    owner: Address;
    ownerDeposit: number;
    items: number;
    itemMetadatas: number;
    itemConfigs: number;
    attributes: number;
}
interface NftsCollectionIsOwnerArguments extends NftsCollectionId {
    account: Address;
}
interface NftsCollectionIsOwnerResult {
    account: Address;
    isOwner: boolean;
}
interface NftsCollectionSetTeamResult extends NftsCollectionId {
    issuer: Address | null;
    admin: Address | null;
    freezer: Address | null;
}
interface NftsCollectionSetTeamArguments extends NftsCollectionExtrinsicArguments {
    issuer?: Address;
    admin?: Address;
    freezer?: Address;
}
interface NftsCollectionGetRoleArguments extends NftsCollectionId {
    account: Address;
}
interface NftsCollectionRole {
    issuer: boolean;
    admin: boolean;
    freezer: boolean;
}
interface NftsCollectionGetRoleResponse {
    role: NftsCollectionRole | null;
}
interface NftsDestroyWitness {
    itemMetadatas: number;
    itemConfigs: number;
    attributes: number;
}
interface NftsCollectionDestroyArguments extends NftsCollectionId {
    address: string;
    witness?: NftsDestroyWitness;
}
interface NftsCollectionDestroyResult extends NftsCollectionId {
}
interface NftsCollectionTransferOwnershipArguments extends NftsCollectionExtrinsicArguments {
    to: string;
}
interface NftsCollectionTransferOwnershipResult extends NftsCollectionId {
    newOwner: string;
}
interface NftsCollectionSetMaxSupplyArguments extends NftsCollectionExtrinsicArguments {
    maxSupply: number;
}
interface NftsCollectionSetMaxSupplyResult extends NftsCollectionId {
    maxSupply: number;
}
interface NftsCollectionSetAcceptOwnershipArguments extends AddressArguments {
    collectionId?: number | null;
}
interface NftsCollectionSetAcceptOwnershipResult {
    account: string;
    collectionId: number | null;
}
interface NftsCollectionSetMetadataArguments extends NftsCollectionExtrinsicArguments {
    metadata: NftsMetadata;
}
interface NftsCollectionSetMetadataResult extends NftsCollectionId {
    metadata: NftsMetadata;
}
interface NftsCollectionMetadata {
    deposit: string;
    data: string;
}
interface NftsCollectionGetMetadataResult {
    metadata: NftsCollectionMetadata | null;
}
interface NftsCollectionClearMetadataArguments extends NftsCollectionExtrinsicArguments {
}
interface NftsCollectionClearMetadataResult extends NftsCollectionId {
}
interface NftsCollectionLockArguments extends NftsCollectionExtrinsicArguments {
    settings: NftsCollectionSettings;
}
interface NftsCollectionLockResult extends NftsCollectionId {
}
interface NftsCollectionGetItemsResult extends NftsCollectionId {
    items: NftsItemGetResult[];
}
interface NftsCollectionGetAttributeArguments extends NftsCollectionId {
    namespace: NftsAttributeNamespace;
    key: string;
}
interface NftsCollectionGetAttributeResult extends NftsCollectionId {
    attribute: NftsAttributeSpaced | null;
}
interface NftsCollectionGetAttributesArguments extends NftsCollectionId {
    namespace: NftsAttributeNamespace;
}
interface NftsCollectionGetAttributesResult extends NftsCollectionId {
    attributes: NftsAttributeSpaced[];
}
interface NftsCollectionSetAttributeArguments extends NftsCollectionExtrinsicArguments {
    attribute: NftsAttributeSpaced;
}
interface NftsCollectionSetAttributeResult extends NftsCollectionId {
    attribute: NftsAttributeSpaced;
}
interface NftsCollectionClearAttributeArguments extends NftsCollectionExtrinsicArguments {
    namespace: NftsAttributeNamespace;
    key: string;
}
interface NftsCollectionClearAttributeResult extends NftsCollectionId {
    namespace: NftsAttributeNamespace;
    key: string;
}
interface NftsCollectionAttributesApproval {
    itemId: string;
    account: string;
}
interface NftsCollectionAttributesApprovalsResult extends NftsCollectionId {
    approvals: NftsCollectionAttributesApproval[];
}

interface NftsSignature {
    type: 'ed25519' | 'sr25519' | 'ecdsa';
    data: string;
}
interface NftsPreSignArguments {
    address: Address;
    signature: NftsSignature;
    signer: Address;
}
interface NftsPreSignMintData extends NftsItemId {
    attributes: NftsAttribute[];
    metadata: NftsMetadata;
    onlyAccount?: Address | null;
    deadline: number;
    mintPrice?: string | number | null;
}
interface NftsPreSignMintArguments extends NftsPreSignArguments {
    mintData: NftsPreSignMintData;
}
interface NftsPreSignMintResult {
    itemMinResult: NftsItemMintResult;
}
interface NftsPreSignSetAttributeData extends NftsItemId {
    attributes: NftsAttribute[];
    namespace: NftsAttributeNamespace;
    deadline: string | number;
}
interface NftsPreSignSetAttributeArguments extends NftsPreSignArguments {
    attributeData: NftsPreSignSetAttributeData;
}
interface NftsPreSignSetAttributeResult {
    setAttributeResult: NftsItemSetAttributeResult;
}

declare type arrayNumberRecordStringAny = string | number;
declare type IpfsUploadRequest = {
    file: Blob | Buffer;
};
declare type FileLike = {
    content: Buffer | ReadableStream;
    name: string;
};
declare type IpfsUploadMultipleRequest = {
    files: Array<FileLike | File>;
};
declare type IpfsAddMultipleRequest = IpfsUploadMultipleRequest & {
    cid: string;
};

interface IpfsUploadResponse {
    /** Entry CID_V0 */
    cid: string;
    /** IPFS gateway file URL (renamed to fullUrl) */
    fileUrl?: string;
    /** Full url for entry on IPFS gateway */
    fullUrl?: string;
}
interface TokenIdQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: string | number;
    /** @example 1 */
    tokenId: number;
}
interface DecodedAttributeDto {
    /** @example {"_":"Hello!","en":"Hello!","fr":"Bonjour!"} */
    name?: {
        _?: string;
    };
    type: 'number' | 'integer' | 'float' | 'boolean' | 'timestamp' | 'string' | 'url' | 'isoDate' | 'time' | 'colorRgba';
    isArray: boolean;
    isEnum: boolean;
    /** @example 0 */
    rawValue: {
        _: string;
    } | {
        _: string;
    }[] | {
        _: number;
    } | {
        _: number;
    }[] | number | number[];
    value: {
        _: string;
    } | {
        _: string;
    }[] | {
        _: number;
    } | {
        _: number;
    }[];
}
interface SubstrateAddress {
    Substrate: string;
}
interface EthereumAddress {
    Ethereum: string;
}
interface TokenProperty {
    /** @example example */
    key: string;
    /** @example example */
    value: string;
}
interface NestingParentId {
    collectionId: number;
    tokenId: number;
}
interface CollectionSponsorship {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example false */
    isConfirmed: boolean;
}
interface CollectionLimitsDto {
    /**
     * Maximum number of tokens that one address can own
     * @example 1000
     */
    accountTokenOwnershipLimit?: number;
    /**
     * Maximum byte size of custom token data that can be sponsored when tokens are minted in sponsored mode
     * @example 1024
     */
    sponsoredDataSize?: number;
    /**
     * Defines how many blocks need to pass between setVariableMetadata transactions in order for them to be sponsored
     * @example 30
     */
    sponsoredDataRateLimit?: number;
    /**
     * Total amount of tokens that can be minted in this collection
     * @example 1000000
     */
    tokenLimit?: number;
    /**
     * Time interval in blocks that defines once per how long a non-privileged user transfer or mint transaction can be sponsored
     * @example 6
     */
    sponsorTransferTimeout?: number;
    /**
     * Time interval in blocks that defines once per how long a non-privileged user approve transaction can be sponsored
     * @example 6
     */
    sponsorApproveTimeout?: number;
    /**
     * Boolean value that tells if collection owner or admins can transfer or burn tokens owned by other non-privileged users
     * @example false
     */
    ownerCanTransfer?: boolean;
    /**
     * Boolean value that tells if collection owner can destroy it
     * @example false
     */
    ownerCanDestroy?: boolean;
    /**
     * Flag that defines whether token transfers between users are currently enabled
     * @example false
     */
    transfersEnabled?: boolean;
}
interface CollectionNestingPermissionsDto {
    tokenOwner?: boolean;
    collectionAdmin?: boolean;
    restricted?: number[];
}
interface CollectionPermissionsDto {
    access?: 'Normal' | 'AllowList';
    mintMode?: boolean;
    nesting?: CollectionNestingPermissionsDto;
}
interface AttributeSchemaDto {
    /** @example {"_":"Hello!","en":"Hello!","fr":"Bonjour!"} */
    name: {
        _?: string;
    };
    optional?: boolean;
    isArray?: boolean;
    type: 'number' | 'integer' | 'float' | 'boolean' | 'timestamp' | 'string' | 'url' | 'isoDate' | 'time' | 'colorRgba';
    enumValues?: Record<string, {
        _: string;
    } | {
        _: number;
    }>;
}
interface ImageDto {
    /** @example https://ipfs.unique.network/ipfs/{infix}.ext */
    urlTemplate: string;
}
interface OldPropertiesDto {
    _old_schemaVersion: string;
    _old_offchainSchema: string;
    _old_constOnChainSchema: string;
    _old_variableOnChainSchema: string;
}
interface ImagePreviewDto {
    /** @example https://ipfs.unique.network/ipfs/{infix}.ext */
    urlTemplate?: string;
}
interface AudioDto {
    /** @example https://ipfs.unique.network/ipfs/{infix}.ext */
    urlTemplate?: string;
    format: string;
    isLossless?: boolean;
}
interface SpatialObjectDto {
    /** @example https://ipfs.unique.network/ipfs/{infix}.ext */
    urlTemplate?: string;
    format: string;
}
interface VideoDto {
    /** @example https://ipfs.unique.network/ipfs/{infix}.ext */
    urlTemplate?: string;
}
interface UniqueRoyaltyPartDto {
    version: number;
    royaltyType: 'DEFAULT' | 'PRIMARY_ONLY';
    decimals: number;
    /** @format int64 */
    value: number;
    address: string;
}
interface UniqueCollectionSchemaDecodedDto {
    /** @example {"0":{"name":{"_":"gender"},"type":"string","enumValues":{"0":{"_":"Male"},"1":{"_":"Female"}}},"1":{"name":{"_":"traits"},"type":"string","isArray":true,"enumValues":{"0":{"_":"Black Lipstick"},"1":{"_":"Red Lipstick"}}}} */
    attributesSchema?: Record<string, AttributeSchemaDto>;
    /** @example 1.0.0 */
    attributesSchemaVersion?: string;
    collectionId: number;
    coverPicture: ({
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    }) & {
        fullUrl?: string | null;
    };
    image: ImageDto;
    /** @example unique */
    schemaName: 'unique' | '_old_' | 'ERC721Metadata';
    /** @example 1.0.0 */
    schemaVersion: string;
    oldProperties: OldPropertiesDto;
    coverPicturePreview?: ({
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    }) & {
        fullUrl?: string | null;
    };
    imagePreview?: ImagePreviewDto;
    audio: AudioDto;
    spatialObject: SpatialObjectDto;
    video: VideoDto;
    file: ImageDto;
    royalties?: UniqueRoyaltyPartDto[];
}
interface PropertyWithHexValue {
    /** @example example */
    key: string;
    /** @example example */
    value: string;
    /** @example 0x01 */
    valueHex: string;
}
interface CollectionFlags {
    foreign: boolean;
    erc721metadata: boolean;
}
interface CollectionPropertyPermission {
    mutable: boolean;
    collectionAdmin: boolean;
    tokenOwner: boolean;
}
interface CollectionPropertyKeyPermission {
    /** @example example */
    key: string;
    /** @example example */
    permission: CollectionPropertyPermission;
}
interface CollectionInfoWithSchemaResponse {
    mode?: 'NFT' | 'Fungible' | 'ReFungible';
    /** @example Sample collection name */
    name: string;
    /** @example sample collection description */
    description: string;
    /** @example TEST */
    tokenPrefix: string;
    sponsorship?: CollectionSponsorship;
    limits?: CollectionLimitsDto;
    metaUpdatePermission?: 'ItemOwner' | 'Admin' | 'None';
    permissions?: CollectionPermissionsDto;
    readOnly?: boolean;
    /** @example 1 */
    id: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
    schema?: UniqueCollectionSchemaDecodedDto;
    decodingError: string;
    /** @example unique */
    knownSchema?: 'unique' | '_old_' | 'ERC721Metadata';
    properties: PropertyWithHexValue[];
    flags: CollectionFlags;
    tokenPropertyPermissions: CollectionPropertyKeyPermission[];
}
interface TokenByIdResponse {
    attributes: Record<string, DecodedAttributeDto>;
    collectionId: number;
    image: ({
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    }) & {
        fullUrl?: string | null;
    };
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
    tokenId: number;
    audio?: ({
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    }) & {
        fullUrl?: string | null;
    };
    /** @example {"_":"Hello!","en":"Hello!","fr":"Bonjour!"} */
    description?: {
        _?: string;
    };
    /** @example {"_":"Hello!","en":"Hello!","fr":"Bonjour!"} */
    name?: {
        _?: string;
    };
    imagePreview?: ({
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    }) & {
        fullUrl?: string | null;
    };
    nestingParentToken: NestingParentId;
    spatialObject?: ({
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    }) & {
        fullUrl?: string | null;
    };
    video?: ({
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    }) & {
        fullUrl?: string | null;
    };
    file?: ({
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    }) & {
        fullUrl?: string | null;
    };
    properties: TokenProperty[];
    collection: CollectionInfoWithSchemaResponse;
    royalties?: UniqueRoyaltyPartDto[];
    decodingError: string;
}
interface MediaDetails {
    name?: string;
    type?: 'image' | 'animation' | 'video' | 'audio' | 'spatial' | 'pdf' | 'document' | 'other';
    bytes?: number;
    format?: string;
    sha256?: string;
    width?: number;
    height?: number;
    order?: number;
    /** @example 1000 */
    duration?: number;
    codecs?: string[];
    loop?: boolean;
}
interface ImageDetails {
    name?: string;
    type?: 'image' | 'animation' | 'video' | 'audio' | 'spatial' | 'pdf' | 'document' | 'other';
    bytes?: number;
    format?: string;
    sha256?: string;
    width?: number;
    height?: number;
    order?: number;
}
interface ImageWithDetails {
    url: string;
    details?: ImageDetails;
}
interface ImageWithDetailsAndThumbnail {
    url: string;
    details?: ImageDetails;
    thumbnail?: ImageWithDetails;
}
interface Media {
    type: 'image' | 'animation' | 'video' | 'audio' | 'spatial' | 'pdf' | 'document' | 'other';
    url: string;
    name?: string;
    details?: MediaDetails;
    thumbnail?: ImageWithDetailsAndThumbnail;
    poster?: ImageWithDetailsAndThumbnail;
}
interface Coordinates {
    x: number;
    y: number;
}
interface Scale {
    x: number;
    y: number;
    unit?: 'px' | '%';
}
interface CustomizingImageOverlaySpecs {
    /** @example 1 */
    layer?: number;
    /** @example 1 */
    order_in_layer?: number;
    offset?: Coordinates;
    opacity?: number;
    rotation?: number;
    scale?: Scale;
    mount_point?: Coordinates;
    parent_mount_point?: Coordinates;
}
interface CustomizingFileInfo {
    type: 'image' | 'animation' | 'video' | 'audio' | 'spatial' | 'pdf' | 'document' | 'other';
    url: string;
    name?: string;
    details?: MediaDetails;
    image_overlay_specs?: CustomizingImageOverlaySpecs;
    placeholder?: ImageWithDetails;
    tag?: string;
}
interface MutatorReaction {
    /** @example 1 */
    layer?: number;
    /** @example 1 */
    order_in_layer?: number;
    offset?: Coordinates;
    opacity?: number;
    rotation?: number;
    scale?: Scale;
    mount_point?: Coordinates;
    parent_mount_point?: Coordinates;
    url: string;
    details?: ImageDetails;
}
interface Customizing {
    self: CustomizingFileInfo;
    slots?: Record<string, CustomizingSlot>;
    /** @example ["mutator1","mutator2"] */
    mutators?: any[][];
    mutator_reactions?: Record<string, MutatorReaction>;
}
interface CustomizingSlot {
    type: 'image' | 'animation' | 'video' | 'audio' | 'spatial' | 'pdf' | 'document' | 'other';
    collections?: (string | number)[];
    name?: string;
    image_overlay_specs?: CustomizingImageOverlaySpecs;
}
interface CustomizingOverrides {
    self?: CustomizingFileInfo;
    slots?: Record<string, CustomizingSlot>;
    mutators?: string[];
    mutator_reactions?: Record<string, MutatorReaction>;
}
interface Attribute {
    /** @example Color */
    trait_type: string;
    /** @example red */
    value: string | number;
    /** @example color */
    display_type?: string;
}
interface Royalty {
    /**
     * The ss-58 encoded or Ethereum address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 5 */
    percent?: number;
    isPrimaryOnly?: boolean;
}
interface TokenWithInfoV2Dto {
    /** @example unique */
    schemaName?: string;
    /** @example 2.0.0 */
    schemaVersion?: string;
    /** @example 1.0.0 */
    originalSchemaVersion?: string;
    name?: string;
    description?: string;
    image?: string;
    image_details?: ImageDetails;
    media?: Record<string, Media>;
    animation_url?: string;
    animation_details?: MediaDetails;
    youtube_url?: string;
    created_by?: string;
    external_url?: string;
    customizing?: Customizing;
    customizing_overrides?: CustomizingOverrides;
    background_color?: string;
    attributes?: Attribute[];
    royalties?: Royalty[];
    /** @example en */
    locale?: string;
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
    parsingError: string | null;
    properties: PropertyWithHexValue[];
    nestingParentToken: NestingParentId;
}
interface SignerPayloadJSONDto {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** The checkpoint hash of the block, in hex */
    blockHash: string;
    /** The checkpoint block number, in hex */
    blockNumber: string;
    /** The era for this transaction, in hex */
    era: string;
    /** The genesis hash of the chain, in hex */
    genesisHash: string;
    /** The encoded method (with arguments) in hex */
    method: string;
    /** The nonce for this transaction, in hex */
    nonce: string;
    /** The current spec version for the runtime */
    specVersion: string;
    /** The tip for this transaction, in hex */
    tip: string;
    /** The current transaction version for the runtime */
    transactionVersion: string;
    /** The applicable signed extensions for this runtime */
    signedExtensions: string[];
    /** The version of the extrinsic we are dealing with */
    version: number;
}
interface SignerPayloadRawDto {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** The hex-encoded data for this request */
    data: string;
    /** The type of the contained data */
    type: 'bytes' | 'payload';
}
interface FeeResponse {
    /** @example 92485000000000000 */
    raw: string;
    /** @example 0.092485000000000000 */
    amount: string;
    /** @example 92.4850 m */
    formatted: string;
    /** @example UNQ */
    unit: string;
    /** @example 18 */
    decimals: number;
}
interface UnsignedTxPayloadResponse {
    signerPayloadJSON: SignerPayloadJSONDto;
    signerPayloadRaw: SignerPayloadRawDto;
    signerPayloadHex: string;
    fee?: FeeResponse;
}
interface SignResponse {
    signerPayloadJSON: SignerPayloadJSONDto;
    /** Warning: Signature must be with SignatureType! */
    signature: string;
    fee?: FeeResponse;
}
interface SubmitResponse {
    hash: string;
    fee?: FeeResponse;
}
interface UniqueRoyaltyPartToEncodeDto {
    version?: number;
    royaltyType: 'DEFAULT' | 'PRIMARY_ONLY';
    decimals: number;
    /** bigint as string */
    value: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface UniqueTokenToCreateDto {
    image: {
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    };
    /** @example {"gender":"Male","traits":["Black Lipstick","Red Lipstick"]} */
    attributes?: Record<string, string | string[] | {
        _: string;
    } | {
        _: string;
    }[] | {
        _: number;
    } | {
        _: number;
    }[]>;
    /** @example {"0":0,"1":[0,1]} */
    encodedAttributes?: Record<string, number | number[] | {
        _: string;
    } | {
        _: string;
    }[] | {
        _: number;
    } | {
        _: number;
    }[]>;
    /** @example {"_":"Hello!","en":"Hello!","fr":"Bonjour!"} */
    name?: {
        _?: string;
    };
    audio?: {
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    };
    /** @example {"_":"Hello!","en":"Hello!","fr":"Bonjour!"} */
    description?: {
        _?: string;
    };
    imagePreview?: {
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    };
    spatialObject?: {
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    };
    video?: {
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    };
    file?: {
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    };
    royalties?: UniqueRoyaltyPartToEncodeDto[];
}
interface CreateTokenBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner?: string;
    data?: UniqueTokenToCreateDto;
    properties?: TokenProperty[];
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
}
interface TokenId {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
}
interface MutationQuery {
    /** @example Build */
    use?: 'Build' | 'BuildSequence' | 'Sign' | 'Submit' | 'Result' | 'GetFee';
    /** @example false */
    withFee?: boolean;
    verify?: boolean;
    callbackUrl?: string;
    nonce?: number;
}
interface BuildSequencePayloadsResponse {
    payloads: UnsignedTxPayloadResponse[];
    nextNonce: number;
}
interface FeeBodyResponse {
    fee: FeeResponse;
}
interface CollectionProperty {
    /** @example example */
    key: string;
    /** @example example */
    value: string;
}
interface EncodeTokenOptionsDto {
    URI?: string;
    overwriteProperties?: CollectionProperty[];
}
interface CreateTokenV2ArgsDto {
    /** @example unique */
    schemaName?: string;
    /** @example 2.0.0 */
    schemaVersion?: string;
    /** @example 1.0.0 */
    originalSchemaVersion?: string;
    name?: string;
    description?: string;
    image?: string;
    image_details?: ImageDetails;
    media?: Record<string, Media>;
    animation_url?: string;
    animation_details?: MediaDetails;
    youtube_url?: string;
    created_by?: string;
    external_url?: string;
    customizing?: Customizing;
    customizing_overrides?: CustomizingOverrides;
    background_color?: string;
    attributes?: Attribute[];
    royalties?: Royalty[];
    /** @example en */
    locale?: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner?: string;
    collectionId: number;
    encodeOptions?: EncodeTokenOptionsDto;
}
interface CreateTokenPayload {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner?: string;
    data?: UniqueTokenToCreateDto;
    properties?: TokenProperty[];
}
interface CreateMultipleTokensBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
    tokens: CreateTokenPayload[];
}
interface TokenV2ItemForMultipleDto {
    /** @example unique */
    schemaName?: string;
    /** @example 2.0.0 */
    schemaVersion?: string;
    /** @example 1.0.0 */
    originalSchemaVersion?: string;
    name?: string;
    description?: string;
    image?: string;
    image_details?: ImageDetails;
    media?: Record<string, Media>;
    animation_url?: string;
    animation_details?: MediaDetails;
    youtube_url?: string;
    created_by?: string;
    external_url?: string;
    customizing?: Customizing;
    customizing_overrides?: CustomizingOverrides;
    background_color?: string;
    attributes?: Attribute[];
    royalties?: Royalty[];
    /** @example en */
    locale?: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner?: string;
    encodeOptions?: EncodeTokenOptionsDto;
}
interface CreateMultipleTokensV2ArgumentsDto {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
    tokens: TokenV2ItemForMultipleDto[];
}
interface BurnTokenBody {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    from?: string;
}
interface BurnTokenParsed {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface BurnTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: BurnTokenParsed;
}
interface TransferTokenBody {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example unjKJQJrRd238pkUZZvzDQrfKuM39zBSnQ5zjAGAGcdRhaJTx
     */
    from?: string;
    /**
     * The ss-58 encoded address
     * @example unhk98EgHVJ3Efjz4912GfWkMoW2GXe3SuFrQ6u2bYeWToXrE
     */
    to: string;
}
interface TransferTokenParsed {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    from: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    to: string;
}
interface TransferTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: TransferTokenParsed;
}
interface NestTokenBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** Parent token object */
    parent: TokenId;
    /** Nested token object */
    nested: TokenId;
    value?: number;
}
interface NestTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: TokenId;
}
interface UnnestTokenBody {
    /**
     * The ss-58 encoded or Ethereum address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** Nested token object */
    nested: TokenId;
    /**
     * The ss-58 encoded or Ethereum address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    to?: string;
    value?: number;
}
interface UnnestTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: TokenId;
}
interface TokenChildrenResponse {
    children: TokenId[];
}
interface TokenParentResponse {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface TokenOwnerResponse {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
}
interface TopmostTokenOwnerResponse {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    topmostOwner: string;
}
interface IsBundleResponse {
    /** @example true */
    isBundle: boolean;
}
interface NestedToken {
    /** @example 1 */
    tokenId: number;
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
    /** @example [] */
    attributes: object;
    /** @example  */
    image: object;
    nestingChildTokens: NestedToken[];
    nestingParentToken?: TokenId;
    properties: TokenProperty[];
    decodingError: string;
}
interface GetBundleResponse {
    /** @example 1 */
    tokenId: number;
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
    /** @example [] */
    attributes: object;
    /** @example  */
    image: object;
    nestingChildTokens: NestedToken[];
    nestingParentToken?: TokenId;
    properties: TokenProperty[];
    decodingError: string;
}
interface TokenPropertyWithHexValue {
    /** @example example */
    key: string;
    /** @example example */
    value: string;
    /** @example 0x01 */
    valueHex: string;
}
interface TokenPropertiesResponse {
    properties: TokenPropertyWithHexValue[];
}
interface SetTokenPropertiesBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    properties: TokenProperty[];
}
interface TokenPropertySetEvent {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /** @example example */
    propertyKey: string;
}
interface SetTokenPropertiesParsed {
    properties: TokenPropertySetEvent[];
}
interface SetTokenPropertiesResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: SetTokenPropertiesParsed;
}
interface DeleteTokenPropertiesBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /** @example ["example"] */
    propertyKeys: string[];
}
interface TokenPropertyDeletedEvent {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /** @example example */
    propertyKey: string;
}
interface DeleteTokenPropertiesParsed {
    properties: TokenPropertyDeletedEvent[];
}
interface DeleteTokenPropertiesResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: DeleteTokenPropertiesParsed;
}
interface AccountTokensQuery {
    /** Hash of execution block */
    at?: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
}
interface AccountTokensResponse {
    tokens: TokenId[];
}
interface TokenExistsResponse {
    isExists: boolean;
}
interface ApproveTokenBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    spender: string;
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    isApprove: boolean;
}
interface ApproveTokenParsed {
    collectionId: number;
    tokenId: number;
}
interface ApproveTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: ApproveTokenParsed;
}
interface AllowanceArgumentsQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: string | number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    from: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    to: string;
}
interface AllowanceResultResponse {
    isAllowed: boolean;
}
interface TokenBalanceQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: string | number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface TokenBalanceResponse {
    amount: number;
}
interface CollectionByIdQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: string | number;
}
interface PotentialAttribute {
    /** @example Color */
    trait_type?: string;
    /** @example color */
    display_type?: string;
    values?: (string | number)[];
}
interface CollectionInfoV2 {
    /** @example unique */
    schemaName?: string;
    /** @example 2.0.0 */
    schemaVersion?: string;
    /** @example 1.0.0 */
    originalSchemaVersion?: string;
    /** @example My collection name */
    name?: string;
    /** @example My collection description */
    description?: string;
    /** @example MYC */
    tokenPrefix?: string;
    /** @example MYC */
    symbol?: string;
    cover_image?: ImageWithDetailsAndThumbnail;
    default_token_image?: ImageWithDetailsAndThumbnail;
    customizing?: Customizing;
    royalties?: Royalty[];
    potential_attributes?: PotentialAttribute[];
}
interface IV2RoyaltyDto {
    /**
     * The ss-58 encoded or Ethereum address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 5 */
    percent: number;
    isPrimaryOnly?: boolean;
}
interface CollectionWithInfoV2Dto {
    mode?: 'NFT' | 'Fungible' | 'ReFungible';
    /** @example Sample collection name */
    name: string;
    /** @example sample collection description */
    description: string;
    /** @example TEST */
    tokenPrefix: string;
    sponsorship?: CollectionSponsorship;
    limits?: CollectionLimitsDto;
    metaUpdatePermission?: 'ItemOwner' | 'Admin' | 'None';
    permissions?: CollectionPermissionsDto;
    readOnly?: boolean;
    /** @example 1 */
    collectionId: number;
    /** @example 0 */
    decimals: number;
    flags: CollectionFlags;
    info: CollectionInfoV2 | null;
    parsingError: string | null;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
    properties: PropertyWithHexValue[];
    royalties: IV2RoyaltyDto[];
    royaltiesParsingError: string | null;
    tokenPropertyPermissions: CollectionPropertyKeyPermission[];
}
interface UniqueCollectionSchemaToCreateDto {
    /** @example {"0":{"name":{"_":"gender"},"type":"string","enumValues":{"0":{"_":"Male"},"1":{"_":"Female"}}},"1":{"name":{"_":"traits"},"type":"string","isArray":true,"enumValues":{"0":{"_":"Black Lipstick"},"1":{"_":"Red Lipstick"}}}} */
    attributesSchema?: Record<string, AttributeSchemaDto>;
    /** @example 1.0.0 */
    attributesSchemaVersion?: string;
    coverPicture: {
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    };
    image: ImageDto;
    /** @example unique */
    schemaName: 'unique' | '_old_' | 'ERC721Metadata';
    /** @example 1.0.0 */
    schemaVersion: string;
    coverPicturePreview?: {
        urlInfix?: string;
        hash?: string | null;
    } | {
        url?: string;
        hash?: string | null;
    } | {
        ipfsCid?: string;
        hash?: string | null;
    };
    imagePreview?: ImagePreviewDto;
    audio?: AudioDto;
    spatialObject?: SpatialObjectDto;
    video?: VideoDto;
    file?: VideoDto;
    royalties?: UniqueRoyaltyPartToEncodeDto[];
}
interface PropertyPermission {
    mutable: boolean;
    collectionAdmin: boolean;
    tokenOwner: boolean;
}
interface PropertyKeyPermission {
    /** @example example */
    key: string;
    permission: PropertyPermission;
}
interface CreateCollectionBody {
    mode?: 'NFT' | 'Fungible' | 'ReFungible';
    /** @example Sample collection name */
    name: string;
    /** @example sample collection description */
    description: string;
    /** @example TEST */
    tokenPrefix: string;
    sponsorship?: CollectionSponsorship;
    limits?: CollectionLimitsDto;
    metaUpdatePermission?: 'ItemOwner' | 'Admin' | 'None';
    permissions?: CollectionPermissionsDto;
    readOnly?: boolean;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    schema?: UniqueCollectionSchemaToCreateDto;
    properties?: CollectionProperty[];
    tokenPropertyPermissions?: PropertyKeyPermission[];
}
interface CreateCollectionParsed {
    collectionId: number;
}
interface CreateCollectionResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: CreateCollectionParsed;
}
interface EncodeCollectionOptionsDto {
    defaultPermission?: PropertyPermission;
    overwriteProperties?: CollectionProperty[];
    overwriteTPPs?: PropertyKeyPermission[];
}
interface CreateCollectionV2ArgsDto {
    /** @example unique */
    schemaName?: string;
    /** @example 2.0.0 */
    schemaVersion?: string;
    /** @example 1.0.0 */
    originalSchemaVersion?: string;
    /** @example My collection name */
    name: string;
    /** @example My collection description */
    description: string;
    /** @example MYC */
    tokenPrefix?: string;
    /** @example MYC */
    symbol: string;
    cover_image?: ImageWithDetailsAndThumbnail;
    default_token_image?: ImageWithDetailsAndThumbnail;
    customizing?: Customizing;
    royalties?: Royalty[];
    potential_attributes?: PotentialAttribute[];
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    encodeOptions?: EncodeCollectionOptionsDto;
    mode?: 'NFT' | 'Fungible' | 'ReFungible';
    sponsorship?: CollectionSponsorship;
    limits?: CollectionLimitsDto;
    metaUpdatePermission?: 'ItemOwner' | 'Admin' | 'None';
    permissions?: CollectionPermissionsDto;
    readOnly?: boolean;
}
interface BaseQuery {
    /** Hash of execution block */
    at?: string;
}
interface GetStatsResponse {
    created: number;
    destroyed: number;
    alive: number;
}
interface CollectionIdQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: number;
}
interface EffectiveCollectionLimitsResponse {
    /** @example 1 */
    collectionId: number;
    /** The collection limits */
    limits: CollectionLimitsDto;
}
interface SetCollectionLimitsBody {
    /** The collection limits */
    limits: CollectionLimitsDto;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
}
interface SetCollectionLimitsParsed {
    /** @example 1 */
    collectionId: number;
    /** The collection limits */
    limits: CollectionLimitsDto;
}
interface SetCollectionLimitsResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: SetCollectionLimitsParsed;
}
interface DestroyCollectionBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
}
interface DestroyCollectionParsed {
    success: boolean;
    collectionId: number;
}
interface DestroyCollectionResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: DestroyCollectionParsed;
}
interface TransferCollectionBody {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example 5HpZHYXjV23eEdVzhvYD2D3H6g1kM3aRGYwrmuGe9zaod6od
     */
    to: string;
}
interface TransferCollectionParsed {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
}
interface TransferCollectionResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: TransferCollectionParsed;
}
interface CollectionPropertiesResponse {
    properties: CollectionProperty[];
}
interface GetCollectionTokensResponse {
    ids: number[];
}
interface SetCollectionPropertiesBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
    properties: CollectionProperty[];
}
interface CollectionPropertySetEvent {
    /** @example 1 */
    collectionId: number;
    /** @example example */
    propertyKey: string;
}
interface SetCollectionPropertiesParsed {
    properties: CollectionPropertySetEvent[];
}
interface SetCollectionPropertiesResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: SetCollectionPropertiesParsed;
}
interface DeleteCollectionPropertiesBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
    /** @example ["example"] */
    propertyKeys: string[];
}
interface CollectionPropertyDeletedEvent {
    /** @example 1 */
    collectionId: number;
    /** @example example */
    propertyKey: string;
}
interface DeleteCollectionPropertiesParsed {
    properties: CollectionPropertyDeletedEvent[];
}
interface DeleteCollectionPropertiesResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: DeleteCollectionPropertiesParsed;
}
interface PropertyPermissionsQuery {
    /** @example 1 */
    collectionId: number;
    /** @example ["example"] */
    propertyKeys?: string[];
    /** Hash of execution block */
    at?: string;
}
interface PropertyPermissionsResponse {
    propertyPermissions: PropertyKeyPermission[];
}
interface SetPropertyPermissionsBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
    propertyPermissions: PropertyKeyPermission[];
}
interface PropertyPermissionSetEvent {
    /** @example 1 */
    collectionId: number;
    /** @example example */
    propertyKey: string;
}
interface SetPropertyPermissionsParsed {
    propertyPermissions: PropertyPermissionSetEvent[];
}
interface SetPropertyPermissionsResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: SetPropertyPermissionsParsed;
}
interface SetCollectionPermissionsBody {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    permissions: CollectionPermissionsDto;
}
interface SetCollectionPermissionsParsed {
    collectionId: number;
}
interface SetCollectionPermissionsResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: SetCollectionPermissionsParsed;
}
interface SetTransfersEnabledBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
    /** @example true */
    isEnabled: boolean;
}
interface SetTransfersEnabledParsed {
    success: boolean;
}
interface SetTransfersEnabledResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: SetTransfersEnabledParsed;
}
interface NextSponsoredQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    tokenId: number;
}
interface NextSponsoredResponse {
    /** @example 0 */
    blockNumber: number;
}
interface LastTokenIdQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: number;
}
interface LastTokenIdResultDto {
    /** @example 1 */
    tokenId: number;
}
interface AllowListQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: number;
}
interface AllowListBodyResult {
    addresses: string[];
}
interface AddToAllowListBody {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGHXkYLYqxijLKKfd9Q2CB9shRVu8rPNBS53wvwGTutYg4zTg
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGHXkYLYqxijLKKfd9Q2CB9shRVu8rPNBS53wvwGTutYg4zTg
     */
    newAdminId: string;
}
interface AddToAllowListParsed {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface AddToAllowListResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: AddToAllowListParsed;
}
interface AllowedQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    account: string;
}
interface AllowedResponse {
    /** @example true */
    isAllowed: boolean;
}
interface AdminlistResponse {
    admins: string[];
}
interface AddCollectionAdminBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example 5HpZHYXjV23eEdVzhvYD2D3H6g1kM3aRGYwrmuGe9zaod6od
     */
    newAdmin: string;
}
interface AddCollectionAdminParsed {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    newAdmin: string;
}
interface AddCollectionAdminResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: AddCollectionAdminParsed;
}
interface RemoveFromAllowListBody {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example unjKJQJrRd238pkUZZvzDQrfKuM39zBSnQ5zjAGAGcdRhaJTx
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGHXkYLYqxijLKKfd9Q2CB9shRVu8rPNBS53wvwGTutYg4zTg
     */
    addressToDelete: string;
}
interface RemoveFromAllowListParsed {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface RemoveFromAllowListResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: RemoveFromAllowListParsed;
}
interface RemoveCollectionAdminBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example 5HpZHYXjV23eEdVzhvYD2D3H6g1kM3aRGYwrmuGe9zaod6od
     */
    admin: string;
}
interface RemoveCollectionAdminParsed {
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    admin: string;
}
interface RemoveCollectionAdminResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: RemoveCollectionAdminParsed;
}
interface SetSponsorshipBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
    newSponsor: string;
}
interface SetSponsorshipParsed {
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    sponsor: string;
}
interface SetSponsorshipResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: SetSponsorshipParsed;
}
interface ConfirmSponsorshipBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
}
interface ConfirmSponsorshipParsed {
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    sponsor: string;
}
interface ConfirmSponsorshipResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: ConfirmSponsorshipParsed;
}
interface RemoveSponsorshipBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
}
interface RemoveSponsorshipParsed {
    collectionId: number;
}
interface RemoveSponsorshipResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: RemoveSponsorshipParsed;
}
interface TotalSupplyResponse {
    /** @example 1 */
    totalSupply: number;
}
interface FungibleCollectionInfoDto {
    mode?: 'NFT' | 'Fungible' | 'ReFungible';
    /** @example Sample collection name */
    name: string;
    /** @example sample collection description */
    description: string;
    /** @example TEST */
    tokenPrefix: string;
    sponsorship?: CollectionSponsorship;
    limits?: CollectionLimitsDto;
    metaUpdatePermission?: 'ItemOwner' | 'Admin' | 'None';
    permissions?: CollectionPermissionsDto;
    readOnly?: boolean;
    decimals: number;
    id: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
}
interface BurnFungibleBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    from?: string;
    amount: number;
}
interface BurnFungibleParsed {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
    amount: number;
}
interface BurnFungibleResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: BurnFungibleParsed;
}
interface GetFungibleBalanceArgsRequest {
    /** Hash of execution block */
    at?: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
}
interface BalanceResponse {
    /** @example 92485000000000000 */
    raw: string;
    /** @example 0.092485000000000000 */
    amount: string;
    /** @example 92.4850 m */
    formatted: string;
    /** @example UNQ */
    unit: string;
    /** @example 18 */
    decimals: number;
}
interface CreateFungibleCollectionRequest {
    /** @example Fungible */
    mode?: 'NFT' | 'Fungible' | 'ReFungible';
    /** @example Sample collection name */
    name: string;
    /** @example sample collection description */
    description: string;
    /** @example TEST */
    tokenPrefix: string;
    sponsorship?: CollectionSponsorship;
    limits?: CollectionLimitsDto;
    metaUpdatePermission?: 'ItemOwner' | 'Admin' | 'None';
    permissions?: CollectionPermissionsDto;
    readOnly?: boolean;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    schema?: UniqueCollectionSchemaToCreateDto;
    properties?: CollectionProperty[];
    tokenPropertyPermissions?: PropertyKeyPermission[];
    /**
     * @min 0
     * @max 18
     * @example 10
     */
    decimals: number;
}
interface AddTokensArgsDto {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    recipient?: string;
    collectionId: number;
    amount: number;
}
interface AddTokensResultDto {
    recipient: string;
    collectionId: number;
    amount: number;
}
interface TransferTokensArgsDto {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example unjKJQJrRd238pkUZZvzDQrfKuM39zBSnQ5zjAGAGcdRhaJTx
     */
    from?: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    recipient: string;
    amount: number;
    collectionId: number;
}
interface TransferTokensResultDto {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    recipient: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    sender: string;
    amount: number;
    collectionId: number;
}
interface ApproveFungibleTokensArgs {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    spender: string;
    /** @example 1 */
    collectionId: number;
    /** @example 0.1 */
    amount: number;
}
interface ApproveFungibleTokensParsed {
    amount: number;
    collectionId: number;
}
interface ApproveFungibleTokensResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: ApproveFungibleTokensParsed;
}
interface AllowanceFungibleTokensArgumentsDto {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: string | number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    from: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    to: string;
}
interface GetTotalPiecesArgumentsDto {
    /** Hash of execution block */
    at?: string;
    collectionId: number;
}
interface GetTotalPiecesResultDto {
    collectionId: number;
    amount: number;
}
interface BurnRefungibleBody {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    from?: string;
    amount: number;
}
interface BurnRefungibleParsed {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    amount: number;
}
interface BurnRefungibleResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: BurnRefungibleParsed;
}
interface CreateRefungibleCollectionRequest {
    /** @example ReFungible */
    mode?: 'NFT' | 'Fungible' | 'ReFungible';
    /** @example Sample collection name */
    name: string;
    /** @example sample collection description */
    description: string;
    /** @example TEST */
    tokenPrefix: string;
    sponsorship?: CollectionSponsorship;
    limits?: CollectionLimitsDto;
    metaUpdatePermission?: 'ItemOwner' | 'Admin' | 'None';
    permissions?: CollectionPermissionsDto;
    readOnly?: boolean;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    schema?: UniqueCollectionSchemaToCreateDto;
    properties?: CollectionProperty[];
    tokenPropertyPermissions?: PropertyKeyPermission[];
}
interface CreateRefungibleTokenRequest {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner?: string;
    data?: UniqueTokenToCreateDto;
    properties?: TokenProperty[];
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
    amount: number;
}
interface CreatRefungibleTokenParsed {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    owner: string;
    /** @example 5 */
    amount: number;
}
interface CreatRefungibleTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: CreatRefungibleTokenParsed;
}
interface TransferRefungibleTokenRequest {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example unjKJQJrRd238pkUZZvzDQrfKuM39zBSnQ5zjAGAGcdRhaJTx
     */
    from?: string;
    /**
     * The ss-58 encoded address
     * @example unhk98EgHVJ3Efjz4912GfWkMoW2GXe3SuFrQ6u2bYeWToXrE
     */
    to: string;
    /** @example 5 */
    amount?: number;
}
interface TransferRefungibleTokenParsed {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    from: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    to: string;
    /** @example 5 */
    amount: number;
}
interface TransferRefungibleTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: TransferRefungibleTokenParsed;
}
interface ApproveRefungibleTokenRequest {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    spender: string;
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /** @example 5 */
    amount?: number;
}
interface ApproveRefungibleTokenParsed {
    collectionId: number;
    tokenId: number;
    /** @example 5 */
    amount: number;
}
interface ApproveRefungibleTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: ApproveRefungibleTokenParsed;
}
interface AllowanceRefungibleTokenResponse {
    /** @example 5 */
    amount: number;
}
interface RepartitionTokenRequest {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example 5 */
    amount: number;
}
interface RepartitionTokenParsed {
    /** @example true */
    success: boolean;
}
interface RepartitionTokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: RepartitionTokenParsed;
}
interface TotalPiecesResponse {
    /** @example 5 */
    amount: number;
    collectionId: number;
    tokenId: number;
}
interface AccountRefungibleTokenQuery {
    /** Hash of execution block */
    at?: string;
    /** @example 1 */
    collectionId: number;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface AccountRefungibleTokenResponse {
    /** @example 1 */
    collectionId: number;
    /** @example 1 */
    tokenId: number;
    amount: number;
}
interface AccountRefungibleTokensResponse {
    tokens: AccountRefungibleTokenResponse[];
}
interface CreateERC721CollectionBody {
    mode?: 'NFT' | 'Fungible' | 'ReFungible';
    /** @example Sample collection name */
    name: string;
    /** @example sample collection description */
    description: string;
    /** @example TEST */
    tokenPrefix: string;
    sponsorship?: CollectionSponsorship;
    limits?: CollectionLimitsDto;
    metaUpdatePermission?: 'ItemOwner' | 'Admin' | 'None';
    permissions?: CollectionPermissionsDto;
    readOnly?: boolean;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    baseURI?: string;
    properties?: CollectionProperty[];
    tokenPropertyPermissions?: PropertyKeyPermission[];
}
interface CreateERC721TokenResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: TokenId;
}
interface CreateERC721TokenBody {
    owner?: string;
    properties?: TokenProperty[];
    url?: string;
    suffix?: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    collectionId: number;
}
declare type AbiItemDto = object;
interface EvmSendArgumentsDto<T = any> {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * JSON ABI from your smart contract
     * @example [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"myNum","type":"uint256"},{"internalType":"string","name":"myStr","type":"string"}],"name":"TestError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"num","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"delta","type":"uint256"}],"name":"AddValue","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"num","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"delta","type":"uint256"}],"name":"ChangeValue","type":"event"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"addValue","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"boolValue","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"emptyArr","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"v","type":"uint256"}],"name":"errCustomError","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"errEmptyArrayPop","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"errRequire","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"errRequireWithIf","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"errRevert","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"int256","name":"v","type":"int256"}],"name":"errZeroDiv","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bool","name":"test","type":"bool"}],"name":"getTestValue","outputs":[{"internalType":"string","name":"value","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"list","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stringValue","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]
     */
    abi: AbiItemDto[];
    /**
     * Ethereum address of your smart contract
     * @example 0x6c7c7B12D818f279f43D93B77142BCc19D2d8CB5
     */
    contractAddress: string;
    /**
     * Name of function smart-contract
     * @example addValue
     */
    funcName: string;
    /**
     * An array of arguments you want to pass to the function call
     * @example [1]
     */
    args?: any[] | object;
    nonce?: number;
    /** The amount of money you want to transfer to the smart-contract */
    value?: number | string;
    /** Function gas limit */
    gasLimit?: number | string;
    maxFeePerGas?: number | string;
    maxPriorityFeePerGas?: number | string;
}
interface EvmEventDto {
    name: string;
    values: object;
}
interface UnknownEventDto {
    topics: string[];
    data: string;
}
interface EvmSendResultParsed {
    isExecutedFailed: boolean;
    parsedEvents: EvmEventDto[];
    unknownEvents: UnknownEventDto[];
}
interface EvmSendResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: EvmSendResultParsed;
}
interface EvmContractExistsArgumentsDto {
    /**
     * Ethereum address of your smart contract
     * @example 0x6c7c7B12D818f279f43D93B77142BCc19D2d8CB5
     */
    contractAddress: string;
    blockNumber?: string | number;
}
interface EvmContractExistsResponseDto {
    exists: boolean;
}
interface EvmCallArgumentsDto<T = any> {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * JSON ABI from your smart contract
     * @example [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"myNum","type":"uint256"},{"internalType":"string","name":"myStr","type":"string"}],"name":"TestError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"num","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"delta","type":"uint256"}],"name":"AddValue","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"num","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"delta","type":"uint256"}],"name":"ChangeValue","type":"event"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"addValue","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"boolValue","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"emptyArr","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"v","type":"uint256"}],"name":"errCustomError","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"errEmptyArrayPop","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"errRequire","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"errRequireWithIf","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"errRevert","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"int256","name":"v","type":"int256"}],"name":"errZeroDiv","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bool","name":"test","type":"bool"}],"name":"getTestValue","outputs":[{"internalType":"string","name":"value","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"list","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stringValue","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]
     */
    abi: AbiItemDto[];
    /**
     * Ethereum address of your smart contract
     * @example 0x6c7c7B12D818f279f43D93B77142BCc19D2d8CB5
     */
    contractAddress: string;
    /**
     * Name of function smart-contract
     * @example addValue
     */
    funcName: string;
    /**
     * An array of arguments you want to pass to the function call
     * @example [1]
     */
    args?: any[] | object;
    nonce?: number;
    /** The amount of money you want to transfer to the smart-contract */
    value?: number | string;
    /** Hash of execution block */
    at?: string;
}
declare type EvmCallResponseDto = object;
interface TxBuildBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /** @example balances */
    section: string;
    /** @example transfer */
    method: string;
    /** @example ["yGEYS1E6fu9YtECXbMFRf1faXRakk3XDLuD1wPzYb4oRWwRJK",100000000] */
    args: arrayNumberRecordStringAny[];
}
interface UnsignedTxPayloadBody {
    signerPayloadJSON: SignerPayloadJSONDto;
    signerPayloadRaw: SignerPayloadRawDto;
    signerPayloadHex: string;
}
interface SignTxResultResponse {
    signature: string;
    signatureType: 'sr25519' | 'ed25519' | 'ecdsa' | 'ethereum';
}
interface SubmitTxBody {
    signerPayloadJSON: SignerPayloadJSONDto;
    /** Warning: Signature must be with SignatureType! */
    signature: string;
}
interface VerificationResultResponse {
    isValid: boolean;
    errorMessage: string;
}
interface SubmitResultResponse {
    hash: string;
}
interface ExtrinsicResultRequest {
    hash: string;
}
interface ExtrinsicResultEvent {
    section: string;
    method: string;
    data: object;
    meta: object;
    index: string;
}
interface HeaderResult {
    hash: string;
    parentHash: string;
    number: string;
    stateRoot: string;
    extrinsicsRoot: string;
    digest: object;
}
interface BlockResult {
    hash: string;
    header: HeaderResult;
}
interface MethodNameDto {
    section: string;
    method: string;
}
interface ExtrinsicResultResponse<T> {
    isCompleted: boolean;
    hash: string;
    blockIndex: number;
    error: object;
    events: ExtrinsicResultEvent[];
    parsed?: T;
    fee?: FeeResponse;
    callbackUrl: string;
    createdAt: number;
    block: BlockResult;
    callMethod: MethodNameDto;
}
interface GetExtrinsicQuery {
    blockHashOrNumber: string | number;
    extrinsicHash: string;
}
interface GetExtrinsicResponse {
    section: string;
    method: string;
    events: object[];
    args: object[];
    nonce: number;
    signer: string;
}
interface GetBalanceQuery {
    address: string;
}
interface VestedResponse {
    start: number;
    period: number;
    periodCount: number;
    perPeriod: BalanceResponse;
}
interface AllBalancesResponse {
    availableBalance: BalanceResponse;
    lockedBalance: BalanceResponse;
    freeBalance: BalanceResponse;
    totalBalance: BalanceResponse;
    reservedBalance: BalanceResponse;
    stakedBalance?: BalanceResponse;
    unstakedBalance?: BalanceResponse;
    canstakeBalance?: BalanceResponse;
    vested: VestedResponse[];
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface BalanceTransferBody {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    /**
     * The ss-58 encoded address
     * @example unjKJQJrRd238pkUZZvzDQrfKuM39zBSnQ5zjAGAGcdRhaJTx
     */
    destination: string;
    /** @example 0.01 */
    amount: number;
}
interface BalanceTransferParsed {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    from: string;
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    to: string;
    amount: string;
}
interface BalanceTransferResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed: BalanceTransferParsed;
}
interface ChainPropertiesResponse {
    /** @example 255 */
    SS58Prefix: number;
    /** @example QTZ */
    token: string;
    /** @example 18 */
    decimals: number;
    /** @example wss://ws-quartz.unique.network */
    wsUrl: string;
    /** @example 0xe9fa5b65a927e85627d87572161f0d86ef65d1432152d59b7a679fb6c7fd3b39 */
    genesisHash: string;
}
interface GetNonceQuery {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface GetNonceResponse {
    nonce: number;
}
interface MethodNameBody {
    section: string;
    method: string;
}
interface BatchCallArgumentsBody {
    method: MethodNameBody;
    rawPayload: object;
}
interface BatchingArgumentsBody {
    address: string;
    calls: BatchCallArgumentsBody[];
}
interface BatchCallResultPayload {
    method: MethodNameBody;
    parsed: object;
}
interface BatchingResultParsed {
    callResults: BatchCallResultPayload[];
}
interface BatchingResultResponse {
    isError: boolean;
    fee?: FeeResponse;
    parsed?: BatchingResultParsed;
}
interface ApiGetterParams {
    /** @example consts */
    endpoint: string;
    /** @example common */
    module: string;
    /** @example collectionCreationPrice */
    method: string;
}
interface ApiRequestParams {
    /** @example query */
    endpoint: string;
    /** @example system */
    module: string;
    /** @example number */
    method: string;
}
interface ApiRequestBody {
    /** @example [] */
    args?: string[];
}
interface GetAccountDataQuery {
    /** Signature: ed25519, sr25519 implementation using Schnorr signatures. ECDSA signatures on the secp256k1 curve */
    pairType?: 'sr25519' | 'ed25519' | 'ecdsa' | 'ethereum';
    /**
     * A metadata argument that contains account information (that may be obtained from the json file of an account backup)
     * @example {}
     */
    meta?: object;
    /**
     * The mnemonic seed gives full access to your account
     * @example little crouch armed put judge bamboo avoid fine actor soccer rebuild cluster
     */
    mnemonic: string;
}
interface GenerateAccountDataBody {
    /** Signature: ed25519, sr25519 implementation using Schnorr signatures. ECDSA signatures on the secp256k1 curve */
    pairType?: 'sr25519' | 'ed25519' | 'ecdsa' | 'ethereum';
    /**
     * A metadata argument that contains account information (that may be obtained from the json file of an account backup)
     * @example {}
     */
    meta?: object;
}
interface NestingAddressDto {
    /**
     * collection and token id, encoded as ethereum address
     * @example 0xF8238ccFFF8ED887463Fd5e00000000100000001
     */
    address: string;
}
interface CollectionId {
    /** @example 1 */
    collectionId: number;
}
interface CollectionAddressDto {
    /**
     * collection id, encoded as ethereum address
     * @example 0xF8238ccFFF8ED887463Fd5e00000000100000001
     */
    address: string;
}
interface AddressDto {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
}
interface EthereumAddressDto {
    /**
     * The ss-58 encoded address
     * @example 0x0A91113393e01ebe11f932F89ccd2C3DD713aeBB
     */
    address: string;
}
interface AddressWithPrefixQuery {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address: string;
    ss58prefix?: number;
}
interface BigIntQuery {
    /**
     * number to transform
     * @example 7
     */
    human: string;
    /** connected chain decimals will be used if not specified */
    decimals?: number;
}
interface BigIntResult {
    /**
     * number to transform
     * @example 7
     */
    human: string;
    /** connected chain decimals will be used if not specified */
    decimals?: number;
    /**
     * transformed number
     * @example 7000000000000000000
     */
    raw: string;
    /**
     * as HEX
     * @example 0x07
     */
    hex: string;
}

interface EvmEvents {
    parsedEvents: EvmEvent[];
    unknownEvents: EvmUnknownEvent[];
}
interface EvmEvent {
    name: string;
    values: Record<string, any>;
}
interface EvmUnknownEvent {
    topics: string[];
    data: string;
}
declare type ContractCallArguments = Omit<EvmCallArgumentsDto, 'abi' | 'contractAddress'>;
declare type ContractSendArguments = Omit<EvmSendArgumentsDto, 'abi' | 'contractAddress'>;

interface ISection {
    path: string;
    baseUrl: string;
    client: IBaseClient;
}
interface SdkTxBuildBody extends Omit<TxBuildBody, 'address'> {
    /**
     * The ss-58 encoded address
     * @example yGCyN3eydMkze4EPtz59Tn7obwbUbYNZCz48dp8FRdemTaLwm
     */
    address?: string;
}
interface IExtrinsics extends ISection {
    build(args: SdkTxBuildBody): Promise<UnsignedTxPayloadBody>;
    getFee(args: SdkTxBuildBody | UnsignedTxPayloadBody | SubmitTxBody): Promise<FeeResponse>;
    sign(args: UnsignedTxPayloadBody, signer?: Account | Signer): Promise<SignTxResultResponse>;
    submit(args: SubmitTxBody): Promise<SubmitResultResponse>;
    submitWatch(args: SdkTxBuildBody, signer?: Account | Signer): Promise<SubmitResultResponse>;
    submitWaitResult(args: SdkTxBuildBody, signer?: Account | Signer): Promise<ExtrinsicResultResponse<any>>;
    waitResult({ hash }: {
        hash: string;
    }): Promise<ExtrinsicResultResponse<any>>;
    status(args: ExtrinsicResultRequest): Promise<ExtrinsicResultResponse<any>>;
    get(args: GetExtrinsicQuery): Promise<GetExtrinsicResponse>;
}
interface MutationOptions {
    signer?: Signer;
    nonce?: number;
    verify?: boolean;
}
interface IMutation<A extends WithOptionalAddress, R> {
    url: string;
    buildBatch(args: A[], options?: MutationOptions): Promise<BuildSequencePayloadsResponse>;
    build(args: A, options?: MutationOptions): Promise<UnsignedTxPayloadResponse>;
    getFee(args: A | UnsignedTxPayloadResponse | SubmitTxBody | Array<A | UnsignedTxPayloadResponse | SubmitTxBody>): Promise<FeeBodyResponse>;
    sign(args: A | UnsignedTxPayloadResponse, options?: MutationOptions): Promise<SubmitTxBody>;
    submit(args: A | UnsignedTxPayloadResponse | SubmitTxBody, options?: MutationOptions): Promise<SubmitResultResponse>;
    submitWatch(args: A | UnsignedTxPayloadResponse | SubmitTxBody, options?: MutationOptions): Promise<SubmitResultResponse>;
    submitWaitResult(args: A | UnsignedTxPayloadResponse | SubmitTxBody, options?: MutationOptions): Promise<ExtrinsicResultResponse<R>>;
    batchCall(args: A): BatchCallArgumentsBody;
}
declare type SubmitWaitResult<A, R> = (args: A | UnsignedTxPayloadResponse | SubmitTxBody, options?: MutationOptions) => Promise<ExtrinsicResultResponse<R>>;
declare type WithAddress = {
    address: string;
};
declare type WithOptionalAddress = {
    address?: string;
};
declare type NonRequiredAddress<A> = A extends WithAddress ? Omit<A, 'address'> & WithOptionalAddress : A;
declare type IMutationEx<A, R> = SubmitWaitResult<NonRequiredAddress<A>, R> & IMutation<NonRequiredAddress<A>, R>;
interface IBalance extends ISection {
    transfer: IMutationEx<BalanceTransferBody, BalanceTransferParsed>;
    get(args: GetBalanceQuery): Promise<AllBalancesResponse>;
}
interface INfts {
    common: INftsCommon;
    account: INftsAccount;
    collection: INftsCollection;
    item: INftsItem;
    preSign: INftsPreSign;
}
interface INftsCommon extends ISection {
    getPalletVersion(): Promise<NftsPalletVersionResult>;
    getNextCollectionId(): Promise<NftsNextCollectionResult>;
}
interface INftsPreSign extends ISection {
    mint: IMutationEx<NftsPreSignMintArguments, NftsPreSignMintResult>;
    setAttribute: IMutationEx<NftsPreSignSetAttributeArguments, NftsPreSignSetAttributeResult>;
}
interface INftsAccount extends ISection {
    getOwnershipAcceptance(args: NftsAccountArguments): Promise<NftsAccountOwnershipAcceptanceResult>;
    getCollections(args: NftsAccountArguments): Promise<NftsAccountCollectionsResult>;
}
interface INftsCollection extends ISection {
    create: IMutationEx<NftsCollectionCreateArguments, NftsCollectionGetResult>;
    destroy: IMutationEx<NftsCollectionDestroyArguments, NftsCollectionDestroyResult>;
    get(args: NftsCollectionGetArguments): Promise<NftsCollectionGetResult>;
    getItems(args: NftsCollectionGetArguments): Promise<NftsCollectionGetItemsResult>;
    isOwner(args: NftsCollectionIsOwnerArguments): Promise<NftsCollectionIsOwnerResult>;
    getConfig(args: NftsCollectionGetArguments): Promise<NftsCollectionConfigResult>;
    getRole(args: NftsCollectionGetRoleArguments): Promise<NftsCollectionGetRoleResponse>;
    setTeam: IMutationEx<NftsCollectionSetTeamArguments, NftsCollectionSetTeamResult>;
    setMaxSupply: IMutationEx<NftsCollectionSetMaxSupplyArguments, NftsCollectionSetMaxSupplyResult>;
    setAcceptOwnership: IMutationEx<NftsCollectionSetAcceptOwnershipArguments, NftsCollectionSetAcceptOwnershipResult>;
    transferOwnership: IMutationEx<NftsCollectionTransferOwnershipArguments, NftsCollectionTransferOwnershipResult>;
    setMetadata: IMutationEx<NftsCollectionSetMetadataArguments, NftsCollectionSetMetadataResult>;
    clearMetadata: IMutationEx<NftsCollectionClearMetadataArguments, NftsCollectionClearMetadataResult>;
    getMetadata(args: NftsCollectionGetArguments): Promise<NftsCollectionGetMetadataResult>;
    lock: IMutationEx<NftsCollectionLockArguments, NftsCollectionLockResult>;
    getAttribute(args: NftsCollectionGetAttributeArguments): Promise<NftsCollectionGetAttributeResult>;
    getAttributes(args: NftsCollectionGetAttributesArguments): Promise<NftsCollectionGetAttributesResult>;
    setAttribute: IMutationEx<NftsCollectionSetAttributeArguments, NftsCollectionSetAttributeResult>;
    clearAttribute: IMutationEx<NftsCollectionClearAttributeArguments, NftsCollectionClearAttributeResult>;
    getAttributesApprovals(args: NftsCollectionGetArguments): Promise<NftsCollectionAttributesApprovalsResult>;
}
interface INftsItem extends ISection {
    mint: IMutationEx<NftsItemMintArguments, NftsItemMintResult>;
    get(args: NftsItemGetArguments): Promise<NftsItemGetResult>;
    isOwner(args: NftsItemIsOwnerArguments): Promise<NftsItemIsOwnerResult>;
    setPrice: IMutationEx<NftsItemSetPriceArguments, NftsItemSetPriceResult>;
    buy: IMutationEx<NftsItemBuyArguments, NftsItemBuyResult>;
    removePrice: IMutationEx<NftsItemExtrinsicArguments, NftsItemRemovePriceResult>;
    getPrice(args: NftsItemGetArguments): Promise<NftsItemGetPriceResult>;
    setMetadata: IMutationEx<NftsItemSetMetadataArguments, NftsItemSetMetadataResult>;
    getMetadata(args: NftsItemGetArguments): Promise<NftsItemGetMetadataResult>;
    clearMetadata: IMutationEx<NftsItemExtrinsicArguments, NftsItemClearMetadataResult>;
    getConfig(args: NftsItemGetArguments): Promise<NftsItemGetConfigResult>;
    lockTransfer: IMutationEx<NftsItemExtrinsicArguments, NftsItemLockTransferResult>;
    unlockTransfer: IMutationEx<NftsItemExtrinsicArguments, NftsItemLockTransferResult>;
    transfer: IMutationEx<NftsItemTransferArguments, NftsItemTransferResult>;
    approveTransfer: IMutationEx<NftsItemApproveTransferArguments, NftsItemApproveTransferResult>;
    cancelApproval: IMutationEx<NftsItemCancelApprovalArguments, NftsItemCancelApprovalResult>;
    clearAllTransferApproval: IMutationEx<NftsItemExtrinsicArguments, NftsItemClearAllTransferApprovalResult>;
    burn: IMutationEx<NftsItemExtrinsicArguments, NftsItemBurnResult>;
    lockProperties: IMutationEx<NftsItemLockPropertiesArguments, NftsItemLockPropertiesResult>;
    setAttribute: IMutationEx<NftsItemSetAttributeArguments, NftsItemSetAttributeResult>;
    getAttribute(args: NftsItemGetAttributeArguments): Promise<NftsItemGetAttributeResult>;
    getAttributes(args: NftsItemGetAttributesArguments): Promise<NftsItemGetAttributesResult>;
    clearAttribute: IMutationEx<NftsItemClearAttributeArguments, NftsItemClearAttributeResult>;
    approveAttributes: IMutationEx<NftsItemApproveAttributesArguments, NftsItemApproveAttributesResult>;
    cancelAttributesApproval: IMutationEx<NftsItemCancelAttributesApprovalArguments, NftsItemCancelAttributesApprovalResult>;
    getAttributesApprovals(args: NftsItemGetArguments): Promise<NftsItemAttributesApprovalsResult>;
    createSwap: IMutationEx<NftsItemCreateSwapArguments, NftsItemCreateSwapResult>;
    cancelSwap: IMutationEx<NftsItemExtrinsicArguments, NftsItemCancelSwapResult>;
    claimSwap: IMutationEx<NftsItemClaimSwapArguments, NftsItemClaimSwapResult>;
    getPendingSwap(args: NftsItemGetArguments): Promise<NftsItemGetPendingSwapResult>;
    redeposit: IMutationEx<NftsItemRedepositArguments, NftsItemRedepositResult>;
    payTips: IMutationEx<NftsItemPayTipsArguments, NftsItemPayTipsResult>;
}
interface IFungible extends ISection {
    getCollection(args: CollectionIdQuery): Promise<FungibleCollectionInfoDto>;
    createCollection: IMutationEx<CreateFungibleCollectionRequest, CreateCollectionParsed>;
    getBalance(args: {
        collectionId: number;
        address: string;
    }): Promise<BalanceResponse>;
    addTokens: IMutationEx<AddTokensArgsDto, AddTokensResultDto>;
    transferTokens: IMutationEx<TransferTokensArgsDto, TransferTokensResultDto>;
    approveTokens: IMutationEx<ApproveFungibleTokensArgs, ApproveFungibleTokensParsed>;
    allowanceTokens(args: AllowanceFungibleTokensArgumentsDto): Promise<BalanceResponse>;
    totalPieces(args: GetTotalPiecesArgumentsDto): Promise<GetTotalPiecesResultDto>;
    transfer: IMutationEx<BalanceTransferBody, BalanceTransferParsed>;
    burn: IMutationEx<BurnFungibleBody, BurnFungibleParsed>;
}
interface IRefungible extends ISection {
    getCollection(args: CollectionIdQuery): Promise<CollectionInfoWithSchemaResponse>;
    getBalance(args: TokenBalanceQuery): Promise<TokenBalanceResponse>;
    createCollection: IMutationEx<CreateRefungibleCollectionRequest, CreateCollectionParsed>;
    createToken: IMutationEx<CreateRefungibleTokenRequest, CreatRefungibleTokenParsed>;
    transferToken: IMutationEx<TransferRefungibleTokenRequest, TransferRefungibleTokenParsed>;
    approveToken: IMutationEx<ApproveRefungibleTokenRequest, ApproveRefungibleTokenParsed>;
    allowanceToken(args: AllowanceArgumentsQuery): Promise<AllowanceRefungibleTokenResponse>;
    repartitionToken: IMutationEx<RepartitionTokenRequest, RepartitionTokenParsed>;
    totalPieces(args: TokenId): Promise<TotalPiecesResponse>;
    accountTokens(args: AccountRefungibleTokenQuery): Promise<AccountRefungibleTokensResponse>;
    burn: IMutationEx<BurnRefungibleBody, BurnRefungibleParsed>;
}
interface IIpfs extends ISection {
    uploadFile({ file }: IpfsUploadRequest): Promise<IpfsUploadResponse>;
    uploadFiles({ files, }: IpfsUploadMultipleRequest): Promise<IpfsUploadResponse>;
    addFiles({ cid, files }: IpfsAddMultipleRequest): Promise<IpfsUploadResponse>;
    uploadZip({ file }: IpfsUploadRequest): Promise<IpfsUploadResponse>;
}
interface ICollection extends ISection {
    /**
     * @deprecated Use create method
     */
    creation: IMutationEx<CreateCollectionBody, CreateCollectionParsed>;
    create: IMutationEx<CreateCollectionBody, CreateCollectionParsed>;
    createV2: IMutationEx<CreateCollectionV2ArgsDto, CreateCollectionParsed>;
    setLimits: IMutationEx<SetCollectionLimitsBody, SetCollectionLimitsParsed>;
    get(args: CollectionIdQuery): Promise<CollectionInfoWithSchemaResponse>;
    getV2(args: CollectionIdQuery): Promise<CollectionWithInfoV2Dto>;
    properties(args: CollectionIdQuery): Promise<CollectionPropertiesResponse>;
    getLimits(args: CollectionIdQuery): Promise<EffectiveCollectionLimitsResponse>;
    setProperties: IMutationEx<SetCollectionPropertiesBody, SetCollectionPropertiesParsed>;
    deleteProperties: IMutationEx<DeleteCollectionPropertiesBody, DeleteCollectionPropertiesParsed>;
    propertyPermissions(args: PropertyPermissionsQuery): Promise<PropertyPermissionsResponse>;
    setPropertyPermissions: IMutationEx<SetPropertyPermissionsBody, SetPropertyPermissionsParsed>;
    setPermissions: IMutationEx<SetCollectionPermissionsBody, SetCollectionPermissionsParsed>;
    destroy: IMutationEx<DestroyCollectionBody, DestroyCollectionParsed>;
    setTransfersEnabled: IMutationEx<SetTransfersEnabledBody, SetTransfersEnabledParsed>;
    transfer: IMutationEx<TransferCollectionBody, TransferCollectionParsed>;
    addAdmin: IMutationEx<AddCollectionAdminBody, AddCollectionAdminParsed>;
    removeAdmin: IMutationEx<RemoveCollectionAdminBody, RemoveCollectionAdminParsed>;
    admins(args: CollectionIdQuery): Promise<AdminlistResponse>;
    lastTokenId(args: LastTokenIdQuery): Promise<LastTokenIdResultDto>;
    allowList(args: AllowListQuery): Promise<AllowListBodyResult>;
    addToAllowList: IMutationEx<AddToAllowListBody, AddToAllowListResponse>;
    removeFromAllowList: IMutationEx<RemoveFromAllowListBody, RemoveFromAllowListResponse>;
    allowed(args: AllowedQuery): Promise<AllowedResponse>;
    setSponsorship: IMutationEx<SetSponsorshipBody, SetSponsorshipParsed>;
    confirmSponsorship: IMutationEx<ConfirmSponsorshipBody, ConfirmSponsorshipParsed>;
    removeSponsorship: IMutationEx<RemoveSponsorshipBody, RemoveSponsorshipParsed>;
    totalSupply(args: CollectionIdQuery): Promise<TotalSupplyResponse>;
    tokens(args: CollectionIdQuery): Promise<GetCollectionTokensResponse>;
    stats(): Promise<GetStatsResponse>;
    nextSponsored(args: NextSponsoredQuery): Promise<NextSponsoredResponse>;
}
interface IToken extends ISection {
    create: IMutationEx<CreateTokenBody, TokenId>;
    createV2: IMutationEx<CreateTokenV2ArgsDto, TokenId>;
    createMultiple: IMutationEx<CreateMultipleTokensBody, TokenId[]>;
    createMultipleV2: IMutationEx<CreateMultipleTokensV2ArgumentsDto, TokenId[]>;
    get(args: TokenIdQuery): Promise<TokenByIdResponse>;
    getV2(args: TokenIdQuery): Promise<TokenWithInfoV2Dto>;
    exists(args: TokenIdQuery): Promise<TokenExistsResponse>;
    properties(args: TokenIdQuery): Promise<TokenPropertiesResponse>;
    setProperties: IMutationEx<SetTokenPropertiesBody, SetTokenPropertiesParsed>;
    deleteProperties: IMutationEx<DeleteTokenPropertiesBody, DeleteTokenPropertiesParsed>;
    children(args: TokenIdQuery): Promise<TokenChildrenResponse>;
    parent(args: TokenIdQuery): Promise<TokenParentResponse>;
    owner(args: TokenIdQuery): Promise<TokenOwnerResponse>;
    topmostOwner(args: TokenIdQuery): Promise<TopmostTokenOwnerResponse>;
    isBundle(args: TokenIdQuery): Promise<IsBundleResponse>;
    getBundle(args: TokenIdQuery): Promise<GetBundleResponse>;
    nest: IMutationEx<NestTokenBody, TokenId>;
    unnest: IMutationEx<UnnestTokenBody, TokenId>;
    burn: IMutationEx<BurnTokenBody, BurnTokenParsed>;
    transfer: IMutationEx<TransferTokenBody, TransferTokenParsed>;
    approve: IMutationEx<ApproveTokenBody, ApproveTokenParsed>;
    allowance(args: AllowanceArgumentsQuery): Promise<AllowanceResultResponse>;
    accountTokens(args: AccountTokensQuery): Promise<AccountTokensResponse>;
    balance(args: TokenBalanceQuery): Promise<TokenBalanceResponse>;
}
interface IERC721 extends ISection {
    createCollection: IMutationEx<CreateERC721CollectionBody, CreateCollectionParsed>;
    createToken: IMutationEx<CreateERC721TokenBody, TokenId>;
}
interface Account {
    address?: string;
    signer: Signer;
}
interface Signer {
    address?: string;
    sign(unsignedTxPayload: UnsignedTxPayloadBody): Promise<SignTxResultResponse>;
}
interface Options {
    baseUrl: string;
    axiosConfig?: AxiosRequestConfig;
    signer?: Signer;
    account?: Account;
    /**
     * @deprecated Use statusTotalTimeoutInMs
     */
    maximumNumberOfStatusRequests?: number;
    /**
     * SDK will throw TimeoutError if the TX is not completed within this time
     */
    statusTotalTimeoutInMs?: number;
    /**
     * Interval between TX status requests
     */
    waitBetweenStatusRequestsInMs?: number;
}
interface IChain {
    properties(): Promise<ChainPropertiesResponse>;
}
interface ICommon {
    chainProperties(): Promise<ChainPropertiesResponse>;
    getNonce(args: GetNonceQuery): Promise<GetNonceResponse>;
    batch: IMutationEx<BatchingArgumentsBody, BatchingResultParsed>;
}
interface IBaseClient {
    instance: AxiosInstance;
    extrinsic: IExtrinsics;
    options: Options;
}
interface IClient extends IBaseClient {
    balance: IBalance;
    chain: IChain;
    common: ICommon;
    fungible: IFungible;
    refungible: IRefungible;
    collections: ICollection;
    erc721: IERC721;
    tokens: IToken;
    ipfs: IIpfs;
    stateQuery: IStateQueries;
    evm: IEvm;
}
interface IContract {
    client: IBaseClient;
    send: IMutationEx<ContractSendArguments, EvmSendResultParsed>;
    call(args: ContractCallArguments): Promise<EvmCallResponseDto>;
    get contractAddress(): string;
    get abi(): AbiItemDto[];
}
interface IEvm {
    client: IBaseClient;
    send: IMutationEx<EvmSendArguments, EvmSendResultParsed>;
    contractExists(args: EvmContractExistsArguments): Promise<EvmContractExistsResponse>;
    call<A>(args: EvmCallArguments<A>): Promise<EvmCallResponse>;
    contractConnect(contractAddress: string, abi: AbiItemDto[]): Promise<IContract>;
}
interface IStateQueries {
    get<T = any>(args: ApiGetterParams): Promise<T>;
    execute<T = any>(params: ApiRequestParams, body?: ApiRequestBody): Promise<T>;
}

declare enum Method {
    GET = "GET",
    POST = "POST",
    DELETE = "DELETE",
    PATCH = "PATCH",
    PUT = "PUT"
}

declare enum Rooms {
    SYSTEM = "system",
    BLOCKS = "blocks",
    EXTRINSICS = "extrinsics",
    COLLECTION = "collection",
    CONTRACT = "contract",
    EVENTS = "events",
    BALANCE = "balance",
    ACCOUNT_CURRENT_BALANCE = "account-current-balance"
}
declare enum SubscriptionEvents {
    SYSTEM = "system",
    BLOCKS = "blocks",
    EXTRINSICS = "extrinsics",
    EVENTS = "events",
    CONTRACT_LOGS = "contract-logs",
    COLLECTIONS = "collections",
    HAS_NEXT = "has-next",
    BALANCES = "balances",
    ACCOUNT_CURRENT_BALANCE = "account-current-balance",
    SUBSCRIBE_STATE = "subscribe-state"
}
interface Room {
    name: Rooms;
    data: {
        [key: string]: string;
    };
}
interface BlockFilter {
    fromBlock?: number;
}
interface ExtrinsicFilter extends BlockFilter {
    signer?: string | '*';
}
interface CollectionFilter extends ExtrinsicFilter {
    collectionId?: number | '*';
}
interface BalancesFilter extends ExtrinsicFilter {
    address?: string | '*';
}
interface AccountCurrentBalanceFilter {
    address?: string | '*';
}
interface ContractFilter extends ExtrinsicFilter {
    address?: string | '*';
}
interface EventsFilter extends ExtrinsicFilter {
    section?: string | '*';
    method?: string | '*';
}
declare enum BalanceMethods {
    WITHDRAW = "Withdraw",
    TRANSFER = "Transfer",
    DEPOSIT = "Deposit",
    DUST_LOST = "DustLost",
    ENDOWED = "Endowed",
    LOCKED = "Locked",
    UNLOCKED = "Unlocked",
    RESERVED = "Reserved"
}
interface BalancesParsedData {
    method: BalanceMethods;
    from?: string;
    to?: string;
    amount: string;
}

interface ExtrinsicEvent extends MethodNameDto {
    data: any;
    meta: any;
    index: string;
}
interface Block {
    id: number;
    parentHash: string;
    hash: string;
    timestamp: Date;
    extrinsics?: Extrinsic[];
    events?: Event[];
}
interface Extrinsic {
    hash: string;
    index: number;
    method: string;
    section: string;
    signer: string;
    args: any;
    block?: Block;
    events?: Event[];
}
interface Event {
    id?: string;
    method: string;
    section: string;
    index: string;
    dataHex: string;
    dataHuman: any;
    dataJson: any;
    extrinsicHash?: string;
    extrinsic?: Extrinsic;
    block?: Block;
}
interface EventDataParsed {
    collectionId?: number;
    tokenId?: number;
    amount?: string;
    address?: string;
    addressTo?: string;
    event: Event;
}
interface ContractLog {
    address: string;
    topics: Array<any>;
    data: string;
}
interface BlockData {
    block: Block;
}
interface ExtrinsicData {
    extrinsic: Extrinsic;
    parsed: EventDataParsed;
}
interface EventData {
    event: Event;
    extrinsic: Extrinsic;
}
interface CollectionData {
    event: Event;
    extrinsic: Extrinsic;
    parsed: EventDataParsed;
}
interface ContractLogData {
    event: Event;
    extrinsic: Extrinsic;
    log: ContractLog;
}
interface BalancesData {
    event: Event;
    extrinsic: Extrinsic;
    parsed: BalancesParsedData;
}
interface AccountCurrentBalanceData {
    extrinsic: Extrinsic;
    balance: AllBalancesResponse;
}
interface HasNextData {
    nextId: number;
}
interface SubscribeStateData {
    fromBlock: number;
    toBlock: number;
    headBlock: number;
    switchToHead: boolean;
}
declare type SubscriptionConnectOptions = Partial<ManagerOptions & SocketOptions & {
    uri: string;
}>;

declare class SocketClient {
    readonly socket: Socket;
    constructor(socket: Socket);
    on(event: SubscriptionEvents.SYSTEM, listener: (room: Room, data: any) => void): any;
    on(event: SubscriptionEvents.BLOCKS, listener: (room: Room, data: BlockData) => void): any;
    on(event: SubscriptionEvents.EXTRINSICS, listener: (room: Room, data: ExtrinsicData) => void): any;
    on(event: SubscriptionEvents.EVENTS, listener: (room: Room, data: EventData) => void): any;
    on(event: SubscriptionEvents.COLLECTIONS, listener: (room: Room, data: CollectionData) => void): any;
    on(event: SubscriptionEvents.CONTRACT_LOGS, listener: (room: Room, data: ContractLogData) => void): any;
    on(event: SubscriptionEvents.BALANCES, listener: (room: Room, data: BalancesData) => void): any;
    on(event: SubscriptionEvents.ACCOUNT_CURRENT_BALANCE, listener: (room: Room, data: AccountCurrentBalanceData) => void): any;
    on(event: SubscriptionEvents.SUBSCRIBE_STATE, listener: (room: Room, data: SubscribeStateData) => void): any;
    on(event: SubscriptionEvents.HAS_NEXT, listener: (room: Room, data: HasNextData) => void): any;
    subscribeBlocks(filter?: BlockFilter): this;
    unsubscribeBlocks(filter?: BlockFilter): this;
    subscribeExtrinsics(filter?: ExtrinsicFilter): this;
    unsubscribeExtrinsics(filter?: ExtrinsicFilter): this;
    subscribeEvents(filter?: EventsFilter): this;
    unsubscribeEvents(filter?: EventsFilter): this;
    subscribeCollection(filter?: CollectionFilter): this;
    unsubscribeCollection(filter?: CollectionFilter): this;
    subscribeContract(filter?: ContractFilter): this;
    unsubscribeContract(filter?: ContractFilter): this;
    subscribeBalances(filter?: BalancesFilter): this;
    unsubscribeBalances(filter?: BalancesFilter): this;
    subscribeAccountCurrentBalance(filter?: AccountCurrentBalanceFilter): this;
    unsubscribeAccountCurrentBalance(filter?: AccountCurrentBalanceFilter): this;
}

declare class Subscription {
    readonly options: Options;
    readonly namespace = "/v1";
    constructor({ options }: {
        options: Options;
    });
    getDefaultSocketOptions(): SubscriptionConnectOptions;
    connect(options?: SubscriptionConnectOptions): SocketClient;
}

export { AbiItemDto, Account, AccountCurrentBalanceData, AccountCurrentBalanceFilter, AccountRefungibleTokenQuery, AccountRefungibleTokenResponse, AccountRefungibleTokensResponse, AccountTokensQuery, AccountTokensResponse, AddCollectionAdminBody, AddCollectionAdminParsed, AddCollectionAdminResponse, AddToAllowListBody, AddToAllowListParsed, AddToAllowListResponse, AddTokensArgsDto, AddTokensResultDto, AddressDto, AddressWithPrefixQuery, AdminlistResponse, AllBalancesResponse, AllowListBodyResult, AllowListQuery, AllowanceArgumentsQuery, AllowanceFungibleTokensArgumentsDto, AllowanceRefungibleTokenResponse, AllowanceResultResponse, AllowedQuery, AllowedResponse, ApiGetterParams, ApiRequestBody, ApiRequestParams, ApproveFungibleTokensArgs, ApproveFungibleTokensParsed, ApproveFungibleTokensResponse, ApproveRefungibleTokenParsed, ApproveRefungibleTokenRequest, ApproveRefungibleTokenResponse, ApproveTokenBody, ApproveTokenParsed, ApproveTokenResponse, Attribute, AttributeSchemaDto, AudioDto, BalanceMethods, BalanceResponse, BalanceTransferBody, BalanceTransferParsed, BalanceTransferResponse, BalancesData, BalancesFilter, BalancesParsedData, BaseQuery, BatchCallArgumentsBody, BatchCallResultPayload, BatchingArgumentsBody, BatchingResultParsed, BatchingResultResponse, BigIntQuery, BigIntResult, Block, BlockData, BlockFilter, BlockResult, BuildSequencePayloadsResponse, BurnFungibleBody, BurnFungibleParsed, BurnFungibleResponse, BurnRefungibleBody, BurnRefungibleParsed, BurnRefungibleResponse, BurnTokenBody, BurnTokenParsed, BurnTokenResponse, ChainPropertiesResponse, CollectionAddressDto, CollectionByIdQuery, CollectionData, CollectionFilter, CollectionFlags, CollectionId, CollectionIdQuery, CollectionInfoV2, CollectionInfoWithSchemaResponse, CollectionLimitsDto, CollectionNestingPermissionsDto, CollectionPermissionsDto, CollectionPropertiesResponse, CollectionProperty, CollectionPropertyDeletedEvent, CollectionPropertyKeyPermission, CollectionPropertyPermission, CollectionPropertySetEvent, CollectionSponsorship, CollectionWithInfoV2Dto, ConfirmSponsorshipBody, ConfirmSponsorshipParsed, ConfirmSponsorshipResponse, ContractCallArguments, ContractFilter, ContractLog, ContractLogData, ContractSendArguments, Coordinates, CreatRefungibleTokenParsed, CreatRefungibleTokenResponse, CreateCollectionBody, CreateCollectionParsed, CreateCollectionResponse, CreateCollectionV2ArgsDto, CreateERC721CollectionBody, CreateERC721TokenBody, CreateERC721TokenResponse, CreateFungibleCollectionRequest, CreateMultipleTokensBody, CreateMultipleTokensV2ArgumentsDto, CreateRefungibleCollectionRequest, CreateRefungibleTokenRequest, CreateTokenBody, CreateTokenPayload, CreateTokenV2ArgsDto, Customizing, CustomizingFileInfo, CustomizingImageOverlaySpecs, CustomizingOverrides, CustomizingSlot, DecodedAttributeDto, DeleteCollectionPropertiesBody, DeleteCollectionPropertiesParsed, DeleteCollectionPropertiesResponse, DeleteTokenPropertiesBody, DeleteTokenPropertiesParsed, DeleteTokenPropertiesResponse, DestroyCollectionBody, DestroyCollectionParsed, DestroyCollectionResponse, EffectiveCollectionLimitsResponse, EncodeCollectionOptionsDto, EncodeTokenOptionsDto, EthereumAddress, EthereumAddressDto, Event, EventData, EventDataParsed, EventsFilter, EvmCallArgumentsDto, EvmCallResponseDto, EvmContractExistsArgumentsDto, EvmContractExistsResponseDto, EvmEvent, EvmEventDto, EvmEvents, EvmSendArgumentsDto, EvmSendResponse, EvmSendResultParsed, EvmUnknownEvent, Extrinsic, ExtrinsicData, ExtrinsicEvent, ExtrinsicFilter, ExtrinsicResultEvent, ExtrinsicResultRequest, ExtrinsicResultResponse, FeeBodyResponse, FeeResponse, FileLike, FungibleCollectionInfoDto, GenerateAccountDataBody, GetAccountDataQuery, GetBalanceQuery, GetBundleResponse, GetCollectionTokensResponse, GetExtrinsicQuery, GetExtrinsicResponse, GetFungibleBalanceArgsRequest, GetNonceQuery, GetNonceResponse, GetStatsResponse, GetTotalPiecesArgumentsDto, GetTotalPiecesResultDto, HasNextData, HeaderResult, IBalance, IBaseClient, IChain, IClient, ICollection, ICommon, IContract, IERC721, IEvm, IExtrinsics, IFungible, IIpfs, IMutation, IMutationEx, INfts, INftsAccount, INftsCollection, INftsCommon, INftsItem, INftsPreSign, IRefungible, ISection, IStateQueries, IToken, IV2RoyaltyDto, ImageDetails, ImageDto, ImagePreviewDto, ImageWithDetails, ImageWithDetailsAndThumbnail, IpfsAddMultipleRequest, IpfsUploadMultipleRequest, IpfsUploadRequest, IpfsUploadResponse, IsBundleResponse, LastTokenIdQuery, LastTokenIdResultDto, Media, MediaDetails, Method, MethodNameBody, MethodNameDto, MutationOptions, MutationQuery, MutatorReaction, NestTokenBody, NestTokenResponse, NestedToken, NestingAddressDto, NestingParentId, NextSponsoredQuery, NextSponsoredResponse, OldPropertiesDto, Options, PotentialAttribute, PropertyKeyPermission, PropertyPermission, PropertyPermissionSetEvent, PropertyPermissionsQuery, PropertyPermissionsResponse, PropertyWithHexValue, RemoveCollectionAdminBody, RemoveCollectionAdminParsed, RemoveCollectionAdminResponse, RemoveFromAllowListBody, RemoveFromAllowListParsed, RemoveFromAllowListResponse, RemoveSponsorshipBody, RemoveSponsorshipParsed, RemoveSponsorshipResponse, RepartitionTokenParsed, RepartitionTokenRequest, RepartitionTokenResponse, Room, Rooms, Royalty, Scale, SdkTxBuildBody, SetCollectionLimitsBody, SetCollectionLimitsParsed, SetCollectionLimitsResponse, SetCollectionPermissionsBody, SetCollectionPermissionsParsed, SetCollectionPermissionsResponse, SetCollectionPropertiesBody, SetCollectionPropertiesParsed, SetCollectionPropertiesResponse, SetPropertyPermissionsBody, SetPropertyPermissionsParsed, SetPropertyPermissionsResponse, SetSponsorshipBody, SetSponsorshipParsed, SetSponsorshipResponse, SetTokenPropertiesBody, SetTokenPropertiesParsed, SetTokenPropertiesResponse, SetTransfersEnabledBody, SetTransfersEnabledParsed, SetTransfersEnabledResponse, SignResponse, SignTxResultResponse, Signer, SignerPayloadJSONDto, SignerPayloadRawDto, SpatialObjectDto, SubmitResponse, SubmitResultResponse, SubmitTxBody, SubmitWaitResult, SubscribeStateData, Subscription as SubscriptionClient, SubscriptionConnectOptions, SubscriptionEvents, SubstrateAddress, TokenBalanceQuery, TokenBalanceResponse, TokenByIdResponse, TokenChildrenResponse, TokenExistsResponse, TokenId, TokenIdQuery, TokenOwnerResponse, TokenParentResponse, TokenPropertiesResponse, TokenProperty, TokenPropertyDeletedEvent, TokenPropertySetEvent, TokenPropertyWithHexValue, TokenV2ItemForMultipleDto, TokenWithInfoV2Dto, TopmostTokenOwnerResponse, TotalPiecesResponse, TotalSupplyResponse, TransferCollectionBody, TransferCollectionParsed, TransferCollectionResponse, TransferRefungibleTokenParsed, TransferRefungibleTokenRequest, TransferRefungibleTokenResponse, TransferTokenBody, TransferTokenParsed, TransferTokenResponse, TransferTokensArgsDto, TransferTokensResultDto, TxBuildBody, UniqueCollectionSchemaDecodedDto, UniqueCollectionSchemaToCreateDto, UniqueRoyaltyPartDto, UniqueRoyaltyPartToEncodeDto, UniqueTokenToCreateDto, UnknownEventDto, UnnestTokenBody, UnnestTokenResponse, UnsignedTxPayloadBody, UnsignedTxPayloadResponse, VerificationResultResponse, VestedResponse, VideoDto, WithAddress, WithOptionalAddress, arrayNumberRecordStringAny, Subscription as default };
