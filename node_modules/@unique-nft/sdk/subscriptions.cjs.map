{"version":3,"sources":["../../../packages/sdk/src/subscriptions.ts","../../../packages/sdk/src/sections/subscriptions/subscription.ts","../../../packages/common/types/subscriptions.ts","../../../packages/sdk/src/sections/subscriptions/socket-client.ts","../../../packages/sdk/src/types/enums.ts"],"sourcesContent":["import { Subscription as SubscriptionClient } from './sections/subscriptions/subscription';\n\nexport { Subscription as SubscriptionClient } from './sections/subscriptions/subscription';\n\nexport * from './types';\n\nexport default SubscriptionClient;\n","import { io } from 'socket.io-client';\nimport { Options, SubscriptionConnectOptions } from '../../types';\nimport { SocketClient } from './socket-client';\n\nexport class Subscription {\n  readonly options: Options;\n\n  readonly namespace = '/v1';\n\n  constructor({ options }: { options: Options }) {\n    this.options = options;\n  }\n\n  getDefaultSocketOptions(): SubscriptionConnectOptions {\n    const url = new URL(this.options.baseUrl);\n\n    const uri = `${url.origin}${this.namespace}`;\n    const path = url.pathname.replace('/v1', '/socket.io');\n\n    return {\n      uri,\n      path,\n      reconnection: true,\n      autoConnect: true,\n      transports: ['websocket'],\n    };\n  }\n\n  public connect(options?: SubscriptionConnectOptions): SocketClient {\n    const { uri, ...restOptions } = {\n      ...options,\n      ...this.getDefaultSocketOptions(),\n    };\n\n    const socket = io(uri, restOptions);\n\n    return new SocketClient(socket);\n  }\n}\n","export enum Rooms {\n  SYSTEM = 'system',\n  BLOCKS = 'blocks',\n  EXTRINSICS = 'extrinsics',\n  COLLECTION = 'collection',\n  CONTRACT = 'contract',\n  EVENTS = 'events',\n  BALANCE = 'balance',\n  ACCOUNT_CURRENT_BALANCE = 'account-current-balance',\n}\n\nexport enum SubscriptionEvents {\n  SYSTEM = 'system',\n  BLOCKS = 'blocks',\n  EXTRINSICS = 'extrinsics',\n  EVENTS = 'events',\n  CONTRACT_LOGS = 'contract-logs',\n  COLLECTIONS = 'collections',\n  HAS_NEXT = 'has-next',\n  BALANCES = 'balances',\n  ACCOUNT_CURRENT_BALANCE = 'account-current-balance',\n  SUBSCRIBE_STATE = 'subscribe-state',\n}\n\nexport interface Room {\n  name: Rooms;\n  data: {\n    [key: string]: string;\n  };\n}\n\nexport interface BlockFilter {\n  fromBlock?: number;\n}\n\nexport interface ExtrinsicFilter extends BlockFilter {\n  signer?: string | '*';\n}\n\nexport interface CollectionFilter extends ExtrinsicFilter {\n  collectionId?: number | '*';\n}\n\nexport interface BalancesFilter extends ExtrinsicFilter {\n  address?: string | '*';\n}\n\nexport interface AccountCurrentBalanceFilter {\n  address?: string | '*';\n}\n\nexport interface ContractFilter extends ExtrinsicFilter {\n  address?: string | '*';\n}\n\nexport interface EventsFilter extends ExtrinsicFilter {\n  section?: string | '*';\n  method?: string | '*';\n}\n\nexport interface ContractLog {\n  address: string;\n  topics: Array<any>;\n  data: string;\n}\n\nexport enum BalanceMethods {\n  WITHDRAW = 'Withdraw',\n  TRANSFER = 'Transfer',\n  DEPOSIT = 'Deposit',\n\n  DUST_LOST = 'DustLost',\n  ENDOWED = 'Endowed',\n  LOCKED = 'Locked',\n  UNLOCKED = 'Unlocked',\n  RESERVED = 'Reserved',\n}\n\nexport interface BalancesParsedData {\n  method: BalanceMethods;\n  from?: string;\n  to?: string;\n  amount: string;\n}\n","import type { Socket } from 'socket.io-client';\nimport {\n  BalancesFilter,\n  BlockFilter,\n  CollectionFilter,\n  ContractFilter,\n  SubscriptionEvents,\n  EventsFilter,\n  ExtrinsicFilter,\n  Room,\n  AccountCurrentBalanceFilter,\n} from '@unique-nft/common/types/subscriptions';\nimport {\n  AccountCurrentBalanceData,\n  BalancesData,\n  BlockData,\n  CollectionData,\n  ContractLogData,\n  EventData,\n  ExtrinsicData,\n  HasNextData,\n  SubscribeStateData,\n} from '../../types';\n\nexport { SubscriptionEvents } from '@unique-nft/common/types/subscriptions';\n\nexport class SocketClient {\n  constructor(public readonly socket: Socket) {}\n\n  on(\n    event: SubscriptionEvents.SYSTEM,\n    listener: (room: Room, data: any) => void,\n  );\n  on(\n    event: SubscriptionEvents.BLOCKS,\n    listener: (room: Room, data: BlockData) => void,\n  );\n  on(\n    event: SubscriptionEvents.EXTRINSICS,\n    listener: (room: Room, data: ExtrinsicData) => void,\n  );\n  on(\n    event: SubscriptionEvents.EVENTS,\n    listener: (room: Room, data: EventData) => void,\n  );\n  on(\n    event: SubscriptionEvents.COLLECTIONS,\n    listener: (room: Room, data: CollectionData) => void,\n  );\n  on(\n    event: SubscriptionEvents.CONTRACT_LOGS,\n    listener: (room: Room, data: ContractLogData) => void,\n  );\n  on(\n    event: SubscriptionEvents.BALANCES,\n    listener: (room: Room, data: BalancesData) => void,\n  );\n  on(\n    event: SubscriptionEvents.ACCOUNT_CURRENT_BALANCE,\n    listener: (room: Room, data: AccountCurrentBalanceData) => void,\n  );\n  on(\n    event: SubscriptionEvents.SUBSCRIBE_STATE,\n    listener: (room: Room, data: SubscribeStateData) => void,\n  );\n  on(\n    event: SubscriptionEvents.HAS_NEXT,\n    listener: (room: Room, data: HasNextData) => void,\n  );\n  on(event: string, listener) {\n    this.socket.on(event, listener);\n  }\n\n  subscribeBlocks(filter?: BlockFilter) {\n    this.socket.emit('subscribe:blocks', filter);\n    return this;\n  }\n\n  unsubscribeBlocks(filter?: BlockFilter) {\n    this.socket.emit('unsubscribe:blocks', filter);\n    return this;\n  }\n\n  subscribeExtrinsics(filter?: ExtrinsicFilter) {\n    this.socket.emit('subscribe:extrinsics', filter);\n    return this;\n  }\n\n  unsubscribeExtrinsics(filter?: ExtrinsicFilter) {\n    this.socket.emit('unsubscribe:extrinsics', filter);\n    return this;\n  }\n\n  subscribeEvents(filter?: EventsFilter) {\n    this.socket.emit('subscribe:events', filter);\n    return this;\n  }\n\n  unsubscribeEvents(filter?: EventsFilter) {\n    this.socket.emit('unsubscribe:events', filter);\n    return this;\n  }\n\n  subscribeCollection(filter?: CollectionFilter) {\n    this.socket.emit('subscribe:collections', filter);\n    return this;\n  }\n\n  unsubscribeCollection(filter?: CollectionFilter) {\n    this.socket.emit('unsubscribe:collections', filter);\n    return this;\n  }\n\n  subscribeContract(filter?: ContractFilter) {\n    this.socket.emit('subscribe:contracts', filter);\n    return this;\n  }\n\n  unsubscribeContract(filter?: ContractFilter) {\n    this.socket.emit('unsubscribe:contracts', filter);\n    return this;\n  }\n\n  subscribeBalances(filter?: BalancesFilter) {\n    this.socket.emit('subscribe:balances', filter);\n    return this;\n  }\n\n  unsubscribeBalances(filter?: BalancesFilter) {\n    this.socket.emit('unsubscribe:balances', filter);\n    return this;\n  }\n\n  subscribeAccountCurrentBalance(filter?: AccountCurrentBalanceFilter) {\n    this.socket.emit('subscribe:account:current:balance', filter);\n    return this;\n  }\n\n  unsubscribeAccountCurrentBalance(filter?: AccountCurrentBalanceFilter) {\n    this.socket.emit('unsubscribe:account:current:balance', filter);\n    return this;\n  }\n}\n","export enum Method {\n  GET = 'GET',\n  POST = 'POST',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  PUT = 'PUT',\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;ACAA,oBAAmB;;;;UCAPA,QAAAA;;;;;;;;;GAAAA,UAAAA,QAAAA,CAAAA,EAAAA;;UAWAC,qBAAAA;;;;;;;;;;;GAAAA,uBAAAA,qBAAAA,CAAAA,EAAAA;;UAuDAC,iBAAAA;;;;;;;;;GAAAA,mBAAAA,iBAAAA,CAAAA,EAAAA;;;ACxCL,IAAMC,eAAN,MAAMA;EACXC,YAA4BC,QAAgB;;SAAhBA,SAAAA;EAAiB;EA0C7CC,GAAGC,OAAeC,UAAU;AAC1B,SAAKH,OAAOC,GAAGC,OAAOC,QAAAA;EACxB;EAEAC,gBAAgBC,QAAsB;AACpC,SAAKL,OAAOM,KAAK,oBAAoBD,MAAAA;AACrC,WAAO;EACT;EAEAE,kBAAkBF,QAAsB;AACtC,SAAKL,OAAOM,KAAK,sBAAsBD,MAAAA;AACvC,WAAO;EACT;EAEAG,oBAAoBH,QAA0B;AAC5C,SAAKL,OAAOM,KAAK,wBAAwBD,MAAAA;AACzC,WAAO;EACT;EAEAI,sBAAsBJ,QAA0B;AAC9C,SAAKL,OAAOM,KAAK,0BAA0BD,MAAAA;AAC3C,WAAO;EACT;EAEAK,gBAAgBL,QAAuB;AACrC,SAAKL,OAAOM,KAAK,oBAAoBD,MAAAA;AACrC,WAAO;EACT;EAEAM,kBAAkBN,QAAuB;AACvC,SAAKL,OAAOM,KAAK,sBAAsBD,MAAAA;AACvC,WAAO;EACT;EAEAO,oBAAoBP,QAA2B;AAC7C,SAAKL,OAAOM,KAAK,yBAAyBD,MAAAA;AAC1C,WAAO;EACT;EAEAQ,sBAAsBR,QAA2B;AAC/C,SAAKL,OAAOM,KAAK,2BAA2BD,MAAAA;AAC5C,WAAO;EACT;EAEAS,kBAAkBT,QAAyB;AACzC,SAAKL,OAAOM,KAAK,uBAAuBD,MAAAA;AACxC,WAAO;EACT;EAEAU,oBAAoBV,QAAyB;AAC3C,SAAKL,OAAOM,KAAK,yBAAyBD,MAAAA;AAC1C,WAAO;EACT;EAEAW,kBAAkBX,QAAyB;AACzC,SAAKL,OAAOM,KAAK,sBAAsBD,MAAAA;AACvC,WAAO;EACT;EAEAY,oBAAoBZ,QAAyB;AAC3C,SAAKL,OAAOM,KAAK,wBAAwBD,MAAAA;AACzC,WAAO;EACT;EAEAa,+BAA+Bb,QAAsC;AACnE,SAAKL,OAAOM,KAAK,qCAAqCD,MAAAA;AACtD,WAAO;EACT;EAEAc,iCAAiCd,QAAsC;AACrE,SAAKL,OAAOM,KAAK,uCAAuCD,MAAAA;AACxD,WAAO;EACT;AACF;AApHaP;;;AFtBN,IAAMsB,eAAN,MAAMA;EAKXC,YAAY,EAAEC,QAAO,GAA0B;AAJtCA;AAEAC,qCAAY;AAGnB,SAAKD,UAAUA;EACjB;EAEAE,0BAAsD;AACpD,UAAMC,MAAM,IAAIC,IAAI,KAAKJ,QAAQK,OAAO;AAExC,UAAMC,MAAM,GAAGH,IAAII,SAAS,KAAKN;AACjC,UAAMO,OAAOL,IAAIM,SAASC,QAAQ,OAAO,YAAA;AAEzC,WAAO;MACLJ;MACAE;MACAG,cAAc;MACdC,aAAa;MACbC,YAAY;QAAC;;IACf;EACF;EAEOC,QAAQd,SAAoD;AACjE,UAAM,EAAEM,KAAK,GAAGS,YAAAA,IAAgB;MAC9B,GAAGf;MACH,GAAG,KAAKE,wBAAuB;IACjC;AAEA,UAAMc,aAASC,kBAAGX,KAAKS,WAAAA;AAEvB,WAAO,IAAIG,aAAaF,MAAAA;EAC1B;AACF;AAlCalB;;;;UGJDqB,SAAAA;;;;;;GAAAA,WAAAA,SAAAA,CAAAA,EAAAA;;;AJMZ,IAAA,wBAAeC;","names":["Rooms","SubscriptionEvents","BalanceMethods","SocketClient","constructor","socket","on","event","listener","subscribeBlocks","filter","emit","unsubscribeBlocks","subscribeExtrinsics","unsubscribeExtrinsics","subscribeEvents","unsubscribeEvents","subscribeCollection","unsubscribeCollection","subscribeContract","unsubscribeContract","subscribeBalances","unsubscribeBalances","subscribeAccountCurrentBalance","unsubscribeAccountCurrentBalance","Subscription","constructor","options","namespace","getDefaultSocketOptions","url","URL","baseUrl","uri","origin","path","pathname","replace","reconnection","autoConnect","transports","connect","restOptions","socket","io","SocketClient","Method","SubscriptionClient"]}