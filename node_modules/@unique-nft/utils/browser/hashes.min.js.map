{"version":3,"sources":["../../node_modules/index.ts","../../src/Hashes/index.ts","../../src/Hashes/xxhash.ts"],"sourcesContent":["export const HexString = {\n  fromArray: (bytes: number[] | Uint8Array) => {\n    if (!(bytes instanceof Uint8Array) && !Array.isArray(bytes)) {\n      throw new Error(`HexString.fromArray: passed bytes obj is not an Array or Uint8Array: ${typeof bytes}, ${bytes}`)\n    }\n    const arr = bytes instanceof Uint8Array ? Array.from(bytes) : bytes\n    return '0x' + arr.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n  },\n  fromU8a: (bytes: number[] | Uint8Array) => HexString.fromArray(bytes),\n  toArray(hexString: string): number[] {\n    if (typeof hexString !== 'string') {\n      throw new Error(`HexString.toArray: passed string is not a string: ${typeof hexString}`)\n    }\n\n    const str: string = hexString.startsWith('0x') ? hexString.slice(2) : hexString\n    const pairs: RegExpMatchArray = str.match(/.{1,2}/g) || []\n    return pairs.map((byte) => parseInt(byte, 16))\n  },\n  toU8a: (hexString: string): Uint8Array => Uint8Array.from(HexString.toArray(hexString)),\n}\n\n\nexport const Utf8 = {\n  stringToU8a(str: string): Uint8Array {\n    const u8a = new Uint8Array(Utf8.lengthInBytes(str))\n\n    let offset = 0\n    const start = offset\n    let c1: number = 0 // character 1\n    let c2: number = 0 // character 2\n\n    let i = 0\n\n    while (i < str.length) {\n      c1 = str.charCodeAt(i)\n      if (c1 < 128) {\n        u8a[offset++] = c1\n      } else if (c1 < 2048) {\n        u8a[offset++] = c1 >> 6 | 192\n        u8a[offset++] = c1 & 63 | 128\n      } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = str.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n        c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF)\n        ++i\n        u8a[offset++] = c1 >> 18 | 240\n        u8a[offset++] = c1 >> 12 & 63 | 128\n        u8a[offset++] = c1 >> 6 & 63 | 128\n        u8a[offset++] = c1 & 63 | 128\n      } else {\n        u8a[offset++] = c1 >> 12 | 224\n        u8a[offset++] = c1 >> 6 & 63 | 128\n        u8a[offset++] = c1 & 63 | 128\n      }\n\n      i += 1\n    }\n    const diff = offset - start\n\n    return u8a\n  },\n  stringToNumberArray(str: string): number[] {\n    return Array.from(Utf8.stringToU8a(str))\n  },\n  u8aToString(u8a: Uint8Array): string {\n    let start = 0\n    let end = u8a.length\n\n    if (end - start < 1) {\n      return \"\"\n    }\n\n    let str = \"\"\n\n    let i = start\n\n    while (i < end) {\n      const t = u8a[i++]\n      if (t <= 0x7F) {\n        str += String.fromCharCode(t);\n      } else if (t >= 0xC0 && t < 0xE0) {\n        str += String.fromCharCode((t & 0x1F) << 6 | u8a[i++] & 0x3F)\n      } else if (t >= 0xE0 && t < 0xF0) {\n        str += String.fromCharCode((t & 0xF) << 12 | (u8a[i++] & 0x3F) << 6 | u8a[i++] & 0x3F)\n      } else if (t >= 0xF0) {\n        const t2 = ((t & 7) << 18 | (u8a[i++] & 0x3F) << 12 | (u8a[i++] & 0x3F) << 6 | u8a[i++] & 0x3F) - 0x10000\n        str += String.fromCharCode(0xD800 + (t2 >> 10))\n        str += String.fromCharCode(0xDC00 + (t2 & 0x3FF))\n      }\n    }\n\n    return str\n  },\n  numberArrayToString(arr: number[] | Uint8Array): string {\n    return Utf8.u8aToString(Uint8Array.from(arr))\n  },\n  stringToHexString(str: string): string {\n    return HexString.fromU8a(Utf8.stringToU8a(str))\n  },\n  hexStringToString(hexString: string): string {\n    return Utf8.u8aToString(HexString.toU8a(hexString))\n  },\n  lengthInBytes(str: string): number {\n    let len = 0\n    let c = 0\n\n    let i = 0\n\n    while (i < str.length) {\n      c = str.charCodeAt(i) as number\n      if (c < 128) {\n        len += 1\n      } else if (c < 2048) {\n        len += 2\n      } else if ((c & 0xFC00) === 0xD800 && ((str.charCodeAt(i + 1) as number) & 0xFC00) === 0xDC00) {\n        ++i\n        len += 4\n      } else {\n        len += 3\n      }\n\n      i += 1\n    }\n    return len\n  },\n}\n\n\nexport const Utf16 = {\n  stringToU16a(str: string): Uint16Array {\n    const u16arr = new Uint16Array(Utf16.lengthInBytes(str))\n\n    let i = 0\n\n    while (i < str.length) {\n      let cp = str.codePointAt(i) as number\n\n      if (cp <= 0xFFFF) {\n        u16arr[i++] = cp\n      } else {\n        cp -= 0x10000\n        u16arr[i++] = (cp >> 10) + 0xD800\n        u16arr[i++] = (cp % 0x400) + 0xDC00\n      }\n    }\n    return u16arr\n  },\n  stringToNumberArray(str: string): number[] {\n    return Array.from(Utf16.stringToU16a(str))\n  },\n  numberArrayToString(arr: number[] | Uint16Array) {\n    let i = 0\n    const len = arr.length\n    let s = ''\n\n    while (i < len - 1) {\n      const c1 = arr[i]\n      const c2 = arr[i + 1]\n\n      if (c1 >= 0xD800 && c1 <= 0xDFFF) {\n        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\n          s += String.fromCodePoint((c1 - 0xD800) * 0x400 + c2 - 0xDC00 + 0x10000)\n          i += 2\n        } else {\n          throw new Error(`invalid UTF16 sequence: first u16 is ${c1}, second u16 is ${c2}`)\n        }\n      } else {\n        s += String.fromCodePoint(c1)\n        i += 1\n      }\n    }\n\n    if (i < len) {\n      s += String.fromCodePoint(arr[len - 1])\n    }\n\n    return s\n  },\n  u16aToString(arr: number[] | Uint16Array): string {\n    return Utf16.numberArrayToString(arr)\n  },\n  lengthInBytes(str: string): number {\n    let i = 0\n\n    while (i < str.length) {\n      i += (str.codePointAt(i) as number <= 0xFFFF) ? 1 : 2\n    }\n\n    return i\n  },\n}\n\nexport const UtfHelpers = {\n  HexString,\n  Utf8,\n  Utf16,\n}\n","import * as Xxhash from './xxhash'\n\nexport const encodeSubstrateStorageKey = Xxhash.encodeSubstrateStorageKey\n\nexport {Xxhash}\n","// Adapted from https://github.com/pierrec/js-xxhash/blob/0504e76f3d31a21ae8528a7f590c7289c9e431d2/lib/xxhash64.js\n//\n// xxHash64 implementation in pure Javascript\n// Copyright (C) 2016, Pierre Curto\n// MIT license\n//\n// Changes made:\n//   - converted to TypeScript\n//   - uses native JS BigInt (no external dependencies)\n//   - support only for Uint8Array inputs\n//   - no constructor function, straight fill & digest\n//   - update code removed, only called once, no streams\n//   - inline single-use functions\n\n// Original implementation from\n// https://github.com/polkadot-js/common/blob/master/packages/util-crypto/src/xxhash/asU8a.ts\n\n\nimport {HexString, Utf8} from 'utf-helpers'\n\nexport function u8aConcat (u8as: readonly Uint8Array[], length = 0): Uint8Array {\n  const count = u8as.length;\n  let offset = 0;\n\n  if (!length) {\n    for (let i = 0; i < count; i++) {\n      length += u8as[i].length;\n    }\n  }\n\n  const result = new Uint8Array(length);\n\n  for (let i = 0; i < count; i++) {\n    result.set(u8as[i], offset);\n    offset += u8as[i].length;\n  }\n\n  return result;\n}\n\n\ninterface State {\n  seed: bigint\n  u8a: Uint8Array\n  u8asize: number\n  v1: bigint\n  v2: bigint\n  v3: bigint\n  v4: bigint\n}\n\nconst P64_1 = BigInt('11400714785074694791')\nconst P64_2 = BigInt('14029467366897019727')\nconst P64_3 = BigInt('1609587929392839161')\nconst P64_4 = BigInt('9650029242287828579')\nconst P64_5 = BigInt('2870177450012600261')\n\n// mask for a u64, all bits set\nconst U64 = BigInt('0xffffffffffffffff')\n\n// various constants\n/*const _0n = BigInt(0)\nconst _1n = BigInt(1)\nconst _7n = BigInt(7)\nconst _11n = BigInt(11)\nconst _12n = BigInt(12)\nconst _16n = BigInt(16)\nconst _18n = BigInt(18)\nconst _23n = BigInt(23)\nconst _27n = BigInt(27)\nconst _29n = BigInt(29)\nconst _31n = BigInt(31)\nconst _32n = BigInt(32)\nconst _33n = BigInt(33)\nconst _64n = BigInt(64)\nconst _256n = BigInt(256)*/\n\nconst _0n = 0n\nconst _1n = 1n\nconst _7n = 7n\nconst _11n = 11n\nconst _12n = 12n\nconst _16n = 16n\nconst _18n = 18n\nconst _23n = 23n\nconst _27n = 27n\nconst _29n = 29n\nconst _31n = 31n\nconst _32n = 32n\nconst _33n = 33n\nconst _64n = 64n\nconst _256n = 256n\n\nfunction rotl (a: bigint, b: bigint): bigint {\n  const c = a & U64\n\n  return ((c << b) | (c >> (_64n - b))) & U64\n}\n\nfunction fromU8a (u8a: Uint8Array, p: number, count: 2 | 4): bigint {\n  const bigints = new Array<bigint>(count)\n  let offset = 0\n\n  for (let i = 0; i < count; i++, offset += 2) {\n    bigints[i] = BigInt(u8a[p + offset] | (u8a[p + 1 + offset] << 8))\n  }\n\n  let result = _0n\n\n  for (let i = count - 1; i >= 0; i--) {\n    result = (result << _16n) + bigints[i]\n  }\n\n  return result\n}\n\nfunction init (seed: bigint, input: Uint8Array): State {\n  const state = {\n    seed,\n    u8a: new Uint8Array(32),\n    u8asize: 0,\n    v1: seed + P64_1 + P64_2,\n    v2: seed + P64_2,\n    v3: seed,\n    v4: seed - P64_1\n  }\n\n  if (input.length < 32) {\n    state.u8a.set(input)\n    state.u8asize = input.length\n\n    return state\n  }\n\n  const limit = input.length - 32\n  let p = 0\n\n  if (limit >= 0) {\n    const adjustV = (v: bigint) =>\n      P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n)\n\n    do {\n      state.v1 = adjustV(state.v1)\n      p += 8\n      state.v2 = adjustV(state.v2)\n      p += 8\n      state.v3 = adjustV(state.v3)\n      p += 8\n      state.v4 = adjustV(state.v4)\n      p += 8\n    } while (p <= limit)\n  }\n\n  if (p < input.length) {\n    state.u8a.set(input.subarray(p, input.length))\n    state.u8asize = input.length - p\n  }\n\n  return state\n}\n\nexport function xxhash64 (input: Uint8Array, initSeed: bigint | number): Uint8Array {\n  const { seed, u8a, u8asize, v1, v2, v3, v4 } = init(BigInt(initSeed), input)\n  let p = 0\n  let h64 = U64 & (BigInt(input.length) + (\n    input.length >= 32\n      ? (((((((((rotl(v1, _1n) + rotl(v2, _7n) + rotl(v3, _12n) + rotl(v4, _18n)) ^ (P64_1 * rotl(v1 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v2 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v3 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v4 * P64_2, _31n))) * P64_1 + P64_4)\n      : (seed + P64_5)\n  ))\n\n  while (p <= (u8asize - 8)) {\n    h64 = U64 & (P64_4 + P64_1 * rotl(h64 ^ (P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n)), _27n))\n    p += 8\n  }\n\n  if ((p + 4) <= u8asize) {\n    h64 = U64 & (P64_3 + P64_2 * rotl(h64 ^ (P64_1 * fromU8a(u8a, p, 2)), _23n))\n    p += 4\n  }\n\n  while (p < u8asize) {\n    h64 = U64 & (P64_1 * rotl(h64 ^ (P64_5 * BigInt(u8a[p++])), _11n))\n  }\n\n  h64 = U64 & (P64_2 * (h64 ^ (h64 >> _33n)))\n  h64 = U64 & (P64_3 * (h64 ^ (h64 >> _29n)))\n  h64 = U64 & (h64 ^ (h64 >> _32n))\n\n  const result = new Uint8Array(8)\n\n  for (let i = 7; i >= 0; i--) {\n    result[i] = Number(h64 % _256n)\n\n    h64 = h64 / _256n\n  }\n\n  return result\n}\n\n\n/**\n * @name xxhashAsU8a\n * @summary Creates a xxhash64 u8a from the input.\n * @description\n * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * xxhashAsU8a('abc') // => 0x44bc2cf5ad770999\n * ```\n */\nexport function xxhashOfU8a (data: Uint8Array, bitLength: 64 | 128 | 192 | 256 | 320 | 384 | 448 | 512 = 64): Uint8Array {\n  // check that data is a Uint8Array\n  const rounds = Math.ceil(bitLength / 64)\n\n  const result = new Uint8Array(rounds * 8)\n\n  for (let seed = 0; seed < rounds; seed++) {\n    result.set(xxhash64(data, seed).reverse(), seed * 8)\n  }\n\n  return result\n}\n\n/**\n * @name xxhashAsHex\n * @description Creates a xxhash64 hex from the input.\n */\nexport const xxhashOfU8aAsHex = (data: Uint8Array, bitLength: 64 | 128 | 192 | 256 | 320 | 384 | 448 | 512 = 64): string =>\n  HexString.fromU8a(xxhashOfU8a(data, bitLength))\n\nexport const encodeSubstrateStorageKey = (entries: string[]): `0x${string}` => {\n  const hashes = entries.map((entry) => xxhashOfU8a(Utf8.stringToU8a(entry), 128))\n  return HexString.fromU8a(u8aConcat(hashes)) as `0x${string}`\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,UAAA,sBAAA,CAAA;AAAA,MAAAA,UAAA,qBAAA;QAAA,WAAA,MAAAC;QAAA,OAAA,MAAA;QAAA,MAAA,MAAAC;QAAA,YAAA,MAAA;MAAA,CAAA;AAAA,aAAA,UAAAC,cAAA,mBAAA;AAAO,UAAMF,aAAY;QACvB,WAAW,CAAC,UAAiC;AAC3C,cAAI,EAAE,iBAAiB,eAAe,CAAC,MAAM,QAAQ,KAAK,GAAG;AAC3D,kBAAM,IAAI,MAAM,wEAAwE,OAAO,KAAA,KAAU,KAAA,EAAO;UAClH;AACA,gBAAM,MAAM,iBAAiB,aAAa,MAAM,KAAK,KAAK,IAAI;AAC9D,iBAAO,OAAO,IAAI,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,GAAG,EAAE;QACtF;QACA,SAAS,CAAC,UAAiCA,WAAU,UAAU,KAAK;QACpE,QAAQ,WAA6B;AACnC,cAAI,OAAO,cAAc,UAAU;AACjC,kBAAM,IAAI,MAAM,qDAAqD,OAAO,SAAA,EAAW;UACzF;AAEA,gBAAM,MAAc,UAAU,WAAW,IAAI,IAAI,UAAU,MAAM,CAAC,IAAI;AACtE,gBAAM,QAA0B,IAAI,MAAM,SAAS,KAAK,CAAC;AACzD,iBAAO,MAAM,IAAI,CAAC,SAAS,SAAS,MAAM,EAAE,CAAC;QAC/C;QACA,OAAO,CAAC,cAAkC,WAAW,KAAKA,WAAU,QAAQ,SAAS,CAAC;MACxF;AAGO,UAAMC,QAAO;QAClB,YAAY,KAAyB;AACnC,gBAAM,MAAM,IAAI,WAAWA,MAAK,cAAc,GAAG,CAAC;AAElD,cAAI,SAAS;AACb,gBAAM,QAAQ;AACd,cAAI,KAAa;AACjB,cAAI,KAAa;AAEjB,cAAI,IAAI;AAER,iBAAO,IAAI,IAAI,QAAQ;AACrB,iBAAK,IAAI,WAAW,CAAC;AACrB,gBAAI,KAAK,KAAK;AACZ,kBAAI,QAAA,IAAY;YAClB,WAAW,KAAK,MAAM;AACpB,kBAAI,QAAA,IAAY,MAAM,IAAI;AAC1B,kBAAI,QAAA,IAAY,KAAK,KAAK;YAC5B,YAAY,KAAK,WAAY,WAAY,KAAK,IAAI,WAAW,IAAI,CAAC,KAAK,WAAY,OAAQ;AACzF,mBAAK,UAAY,KAAK,SAAW,OAAO,KAAK;AAC7C,gBAAE;AACF,kBAAI,QAAA,IAAY,MAAM,KAAK;AAC3B,kBAAI,QAAA,IAAY,MAAM,KAAK,KAAK;AAChC,kBAAI,QAAA,IAAY,MAAM,IAAI,KAAK;AAC/B,kBAAI,QAAA,IAAY,KAAK,KAAK;YAC5B,OAAO;AACL,kBAAI,QAAA,IAAY,MAAM,KAAK;AAC3B,kBAAI,QAAA,IAAY,MAAM,IAAI,KAAK;AAC/B,kBAAI,QAAA,IAAY,KAAK,KAAK;YAC5B;AAEA,iBAAK;UACP;AACA,gBAAM,OAAO,SAAS;AAEtB,iBAAO;QACT;QACA,oBAAoB,KAAuB;AACzC,iBAAO,MAAM,KAAKA,MAAK,YAAY,GAAG,CAAC;QACzC;QACA,YAAY,KAAyB;AACnC,cAAI,QAAQ;AACZ,cAAI,MAAM,IAAI;AAEd,cAAI,MAAM,QAAQ,GAAG;AACnB,mBAAO;UACT;AAEA,cAAI,MAAM;AAEV,cAAI,IAAI;AAER,iBAAO,IAAI,KAAK;AACd,kBAAM,IAAI,IAAI,GAAA;AACd,gBAAI,KAAK,KAAM;AACb,qBAAO,OAAO,aAAa,CAAC;YAC9B,WAAW,KAAK,OAAQ,IAAI,KAAM;AAChC,qBAAO,OAAO,cAAc,IAAI,OAAS,IAAI,IAAI,GAAA,IAAO,EAAI;YAC9D,WAAW,KAAK,OAAQ,IAAI,KAAM;AAChC,qBAAO,OAAO,cAAc,IAAI,OAAQ,MAAM,IAAI,GAAA,IAAO,OAAS,IAAI,IAAI,GAAA,IAAO,EAAI;YACvF,WAAW,KAAK,KAAM;AACpB,oBAAM,OAAO,IAAI,MAAM,MAAM,IAAI,GAAA,IAAO,OAAS,MAAM,IAAI,GAAA,IAAO,OAAS,IAAI,IAAI,GAAA,IAAO,MAAQ;AAClG,qBAAO,OAAO,aAAa,SAAU,MAAM,GAAG;AAC9C,qBAAO,OAAO,aAAa,SAAU,KAAK,KAAM;YAClD;UACF;AAEA,iBAAO;QACT;QACA,oBAAoB,KAAoC;AACtD,iBAAOA,MAAK,YAAY,WAAW,KAAK,GAAG,CAAC;QAC9C;QACA,kBAAkB,KAAqB;AACrC,iBAAOD,WAAU,QAAQC,MAAK,YAAY,GAAG,CAAC;QAChD;QACA,kBAAkB,WAA2B;AAC3C,iBAAOA,MAAK,YAAYD,WAAU,MAAM,SAAS,CAAC;QACpD;QACA,cAAc,KAAqB;AACjC,cAAI,MAAM;AACV,cAAI,IAAI;AAER,cAAI,IAAI;AAER,iBAAO,IAAI,IAAI,QAAQ;AACrB,gBAAI,IAAI,WAAW,CAAC;AACpB,gBAAI,IAAI,KAAK;AACX,qBAAO;YACT,WAAW,IAAI,MAAM;AACnB,qBAAO;YACT,YAAY,IAAI,WAAY,UAAY,IAAI,WAAW,IAAI,CAAC,IAAe,WAAY,OAAQ;AAC7F,gBAAE;AACF,qBAAO;YACT,OAAO;AACL,qBAAO;YACT;AAEA,iBAAK;UACP;AACA,iBAAO;QACT;MACF;AAGO,UAAM,QAAQ;QACnB,aAAa,KAA0B;AACrC,gBAAM,SAAS,IAAI,YAAY,MAAM,cAAc,GAAG,CAAC;AAEvD,cAAI,IAAI;AAER,iBAAO,IAAI,IAAI,QAAQ;AACrB,gBAAI,KAAK,IAAI,YAAY,CAAC;AAE1B,gBAAI,MAAM,OAAQ;AAChB,qBAAO,GAAA,IAAO;YAChB,OAAO;AACL,oBAAM;AACN,qBAAO,GAAA,KAAQ,MAAM,MAAM;AAC3B,qBAAO,GAAA,IAAQ,KAAK,OAAS;YAC/B;UACF;AACA,iBAAO;QACT;QACA,oBAAoB,KAAuB;AACzC,iBAAO,MAAM,KAAK,MAAM,aAAa,GAAG,CAAC;QAC3C;QACA,oBAAoB,KAA6B;AAC/C,cAAI,IAAI;AACR,gBAAM,MAAM,IAAI;AAChB,cAAI,IAAI;AAER,iBAAO,IAAI,MAAM,GAAG;AAClB,kBAAM,KAAK,IAAI,CAAA;AACf,kBAAM,KAAK,IAAI,IAAI,CAAA;AAEnB,gBAAI,MAAM,SAAU,MAAM,OAAQ;AAChC,kBAAI,MAAM,SAAU,MAAM,OAAQ;AAChC,qBAAK,OAAO,eAAe,KAAK,SAAU,OAAQ,KAAK,QAAS,KAAO;AACvE,qBAAK;cACP,OAAO;AACL,sBAAM,IAAI,MAAM,wCAAwC,EAAA,mBAAqB,EAAA,EAAI;cACnF;YACF,OAAO;AACL,mBAAK,OAAO,cAAc,EAAE;AAC5B,mBAAK;YACP;UACF;AAEA,cAAI,IAAI,KAAK;AACX,iBAAK,OAAO,cAAc,IAAI,MAAM,CAAA,CAAE;UACxC;AAEA,iBAAO;QACT;QACA,aAAa,KAAqC;AAChD,iBAAO,MAAM,oBAAoB,GAAG;QACtC;QACA,cAAc,KAAqB;AACjC,cAAI,IAAI;AAER,iBAAO,IAAI,IAAI,QAAQ;AACrB,iBAAM,IAAI,YAAY,CAAC,KAAe,QAAU,IAAI;UACtD;AAEA,iBAAO;QACT;MACF;AAEO,UAAM,aAAa;QACxB,WAAAA;QACA,MAAAC;QACA;MACF;;;;;AClMA;AAAA;AAAA;AAAA,qCAAAE;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,2BAA8B;AAEvB,WAAS,UAAW,MAA6B,SAAS,GAAe;AAC9E,UAAM,QAAQ,KAAK;AACnB,QAAI,SAAS;AAEb,QAAI,CAAC,QAAQ;AACX,eAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,kBAAU,KAAK,CAAC,EAAE;AAAA,MACpB;AAAA,IACF;AAEA,UAAM,SAAS,IAAI,WAAW,MAAM;AAEpC,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,aAAO,IAAI,KAAK,CAAC,GAAG,MAAM;AAC1B,gBAAU,KAAK,CAAC,EAAE;AAAA,IACpB;AAEA,WAAO;AAAA,EACT;AAaA,MAAM,QAAQ,OAAO,sBAAsB;AAC3C,MAAM,QAAQ,OAAO,sBAAsB;AAC3C,MAAM,QAAQ,OAAO,qBAAqB;AAC1C,MAAM,QAAQ,OAAO,qBAAqB;AAC1C,MAAM,QAAQ,OAAO,qBAAqB;AAG1C,MAAM,MAAM,OAAO,oBAAoB;AAmBvC,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,QAAQ;AAEd,WAAS,KAAM,GAAW,GAAmB;AAC3C,UAAM,IAAI,IAAI;AAEd,YAAS,KAAK,IAAM,KAAM,OAAO,KAAO;AAAA,EAC1C;AAEA,WAAS,QAAS,KAAiB,GAAW,OAAsB;AAClE,UAAM,UAAU,IAAI,MAAc,KAAK;AACvC,QAAI,SAAS;AAEb,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK,UAAU,GAAG;AAC3C,cAAQ,CAAC,IAAI,OAAO,IAAI,IAAI,MAAM,IAAK,IAAI,IAAI,IAAI,MAAM,KAAK,CAAE;AAAA,IAClE;AAEA,QAAI,SAAS;AAEb,aAAS,IAAI,QAAQ,GAAG,KAAK,GAAG,KAAK;AACnC,gBAAU,UAAU,QAAQ,QAAQ,CAAC;AAAA,IACvC;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,KAAM,MAAc,OAA0B;AACrD,UAAM,QAAQ;AAAA,MACZ;AAAA,MACA,KAAK,IAAI,WAAW,EAAE;AAAA,MACtB,SAAS;AAAA,MACT,IAAI,OAAO,QAAQ;AAAA,MACnB,IAAI,OAAO;AAAA,MACX,IAAI;AAAA,MACJ,IAAI,OAAO;AAAA,IACb;AAEA,QAAI,MAAM,SAAS,IAAI;AACrB,YAAM,IAAI,IAAI,KAAK;AACnB,YAAM,UAAU,MAAM;AAEtB,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,MAAM,SAAS;AAC7B,QAAI,IAAI;AAER,QAAI,SAAS,GAAG;AACd,YAAM,UAAU,CAAC,MACf,QAAQ,KAAK,IAAI,QAAQ,QAAQ,OAAO,GAAG,CAAC,GAAG,IAAI;AAErD,SAAG;AACD,cAAM,KAAK,QAAQ,MAAM,EAAE;AAC3B,aAAK;AACL,cAAM,KAAK,QAAQ,MAAM,EAAE;AAC3B,aAAK;AACL,cAAM,KAAK,QAAQ,MAAM,EAAE;AAC3B,aAAK;AACL,cAAM,KAAK,QAAQ,MAAM,EAAE;AAC3B,aAAK;AAAA,MACP,SAAS,KAAK;AAAA,IAChB;AAEA,QAAI,IAAI,MAAM,QAAQ;AACpB,YAAM,IAAI,IAAI,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC;AAC7C,YAAM,UAAU,MAAM,SAAS;AAAA,IACjC;AAEA,WAAO;AAAA,EACT;AAEO,WAAS,SAAU,OAAmB,UAAuC;AAClF,UAAM,EAAE,MAAM,KAAK,SAAS,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,GAAG,KAAK;AAC3E,QAAI,IAAI;AACR,QAAI,MAAM,MAAO,OAAO,MAAM,MAAM,KAClC,MAAM,UAAU,SACH,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAM,QAAQ,KAAK,KAAK,OAAO,IAAI,KAAM,QAAQ,QAAU,QAAQ,KAAK,KAAK,OAAO,IAAI,KAAM,QAAQ,QAAU,QAAQ,KAAK,KAAK,OAAO,IAAI,KAAM,QAAQ,QAAU,QAAQ,KAAK,KAAK,OAAO,IAAI,KAAM,QAAQ,QACtR,OAAO;AAGd,WAAO,KAAM,UAAU,GAAI;AACzB,YAAM,MAAO,QAAQ,QAAQ,KAAK,MAAO,QAAQ,KAAK,QAAQ,QAAQ,KAAK,GAAG,CAAC,GAAG,IAAI,GAAI,IAAI;AAC9F,WAAK;AAAA,IACP;AAEA,QAAK,IAAI,KAAM,SAAS;AACtB,YAAM,MAAO,QAAQ,QAAQ,KAAK,MAAO,QAAQ,QAAQ,KAAK,GAAG,CAAC,GAAI,IAAI;AAC1E,WAAK;AAAA,IACP;AAEA,WAAO,IAAI,SAAS;AAClB,YAAM,MAAO,QAAQ,KAAK,MAAO,QAAQ,OAAO,IAAI,GAAG,CAAC,GAAI,IAAI;AAAA,IAClE;AAEA,UAAM,MAAO,SAAS,MAAO,OAAO;AACpC,UAAM,MAAO,SAAS,MAAO,OAAO;AACpC,UAAM,OAAO,MAAO,OAAO;AAE3B,UAAM,SAAS,IAAI,WAAW,CAAC;AAE/B,aAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AAC3B,aAAO,CAAC,IAAI,OAAO,MAAM,KAAK;AAE9B,YAAM,MAAM;AAAA,IACd;AAEA,WAAO;AAAA,EACT;AAeO,WAAS,YAAa,MAAkB,YAA0D,IAAgB;AAEvH,UAAM,SAAS,KAAK,KAAK,YAAY,EAAE;AAEvC,UAAM,SAAS,IAAI,WAAW,SAAS,CAAC;AAExC,aAAS,OAAO,GAAG,OAAO,QAAQ,QAAQ;AACxC,aAAO,IAAI,SAAS,MAAM,IAAI,EAAE,QAAQ,GAAG,OAAO,CAAC;AAAA,IACrD;AAEA,WAAO;AAAA,EACT;AAMO,MAAM,mBAAmB,CAAC,MAAkB,YAA0D,OAC3G,6BAAU,QAAQ,YAAY,MAAM,SAAS,CAAC;AAEzC,MAAM,4BAA4B,CAAC,YAAqC;AAC7E,UAAM,SAAS,QAAQ,IAAI,CAAC,UAAU,YAAY,wBAAK,YAAY,KAAK,GAAG,GAAG,CAAC;AAC/E,WAAO,6BAAU,QAAQ,UAAU,MAAM,CAAC;AAAA,EAC5C;;;ADzOO,MAAMC,6BAAmC;","names":["__export","HexString","Utf8","__toCommonJS","encodeSubstrateStorageKey","encodeSubstrateStorageKey"]}