import { KeyringPair, KeyringPair$Meta, KeyringPair$Json } from '@polkadot/keyring/types';
import { KeyringOptions } from '@polkadot/ui-keyring/types';
import { KeyringAccountBase, UnsignedTxPayload, SignResult, Provider, Account } from '@unique-nft/accounts/types';
import { KeypairType } from '@polkadot/util-crypto/types';

interface KeyringLocalOptions extends KeyringOptions {
    passwordCallback?: PasswordCallback;
}
declare type PasswordCallback = (keyring: KeyringPair) => Promise<string>;

declare class KeyringLocalAccount extends KeyringAccountBase {
    private readonly passwordCallback?;
    constructor(keyringPair: KeyringPair, passwordCallback?: PasswordCallback | undefined);
    sign(unsignedTxPayload: UnsignedTxPayload): Promise<SignResult>;
}

declare class KeyringLocalProvider extends Provider<KeyringPair> {
    private readonly options;
    private static initializedOptions;
    private static initializer;
    private static initialize;
    constructor(options?: KeyringLocalOptions);
    init(): Promise<void>;
    addUri(suri: string, password?: string, meta?: KeyringPair$Meta, type?: KeypairType): Account<KeyringPair>;
    private buildAccount;
    getAccounts(): Promise<Account<KeyringPair>[]>;
    forgetAccount(account: Account<KeyringPair> | string): void;
    addPair(pair: KeyringPair, password: string): Account<KeyringPair>;
    getPair(address: string | Uint8Array): Account<KeyringPair>;
    createFromUri(suri: string, meta?: KeyringPair$Meta, type?: KeypairType): Account<KeyringPair>;
    addExternal(address: string | Uint8Array, meta?: KeyringPair$Meta): Account<KeyringPair>;
    createFromJson(json: KeyringPair$Json, meta?: KeyringPair$Meta): Account<KeyringPair>;
}

export { KeyringLocalAccount, KeyringLocalOptions, KeyringLocalProvider, PasswordCallback };
