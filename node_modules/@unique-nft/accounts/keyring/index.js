import { KeyringAccountBase, Provider } from '@unique-nft/accounts/types';
import { Keyring } from '@polkadot/keyring';
import { cryptoWaitReady } from '@polkadot/util-crypto';

class KeyringAccount extends KeyringAccountBase {
  constructor(keyringPair) {
    super(keyringPair);
  }
}

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class KeyringProvider extends Provider {
  constructor(options = {}) {
    super();
    this.options = options;
    __publicField(this, "keyring");
    this.keyring = new Keyring(options);
  }
  static async fromUri(uri, type = "sr25519") {
    const options = typeof type === "string" ? { type } : type;
    const provider = new KeyringProvider(options);
    await provider.init();
    return provider.addUri(uri);
  }
  static async fromMnemonic(mnemonic, type = "sr25519") {
    return KeyringProvider.fromUri(mnemonic, type);
  }
  // eslint-disable-next-line class-methods-use-this
  async init() {
    await cryptoWaitReady();
  }
  async getAccounts() {
    return this.keyring.pairs.map((p) => new KeyringAccount(p));
  }
  emitAccountsChanged() {
    this.emit(
      "accountsChanged",
      this.keyring.pairs.map((p) => new KeyringAccount(p))
    );
  }
  addSeed(seed) {
    const keyringPair = this.keyring.addFromMnemonic(seed);
    this.emitAccountsChanged();
    return new KeyringAccount(keyringPair);
  }
  addUri(uri) {
    const keyringPair = this.keyring.addFromUri(uri);
    this.emitAccountsChanged();
    return new KeyringAccount(keyringPair);
  }
  addKeyfile(keyfile, password) {
    const keyringPair = this.keyring.addFromJson(keyfile);
    if (password)
      keyringPair.unlock(password);
    const account = new KeyringAccount(keyringPair);
    this.emitAccountsChanged();
    return account;
  }
  forgetAccount(account) {
    if (typeof account === "string") {
      this.keyring.removePair(account);
    } else {
      this.keyring.removePair(account.address);
    }
  }
}

export { KeyringAccount, KeyringProvider };
