import { Account, getAddressFromSubstrate, Provider } from '@unique-nft/accounts/types';
import { web3Enable, isWeb3Injected, web3AccountsSubscribe, web3Accounts, web3FromSource } from '@polkadot/extension-dapp';

class PolkadotAccount extends Account {
  constructor(injectedAccount, injector) {
    super(injectedAccount, injectedAccount.address);
    this.injectedAccount = injectedAccount;
    this.injector = injector;
  }
  formatAddress(prefix) {
    return getAddressFromSubstrate(this.injectedAccount.address, prefix);
  }
  async sign(unsignedTxPayload) {
    var _a, _b;
    const signPayload = (_b = (_a = this.injector) == null ? void 0 : _a.signer) == null ? void 0 : _b.signPayload;
    if (!signPayload) {
      throw new Error(
        "Failed to sign message; signPayload() method is missing"
      );
    }
    const { signature } = await signPayload(
      unsignedTxPayload.signerPayloadJSON
    );
    return {
      signature,
      signatureType: this.injectedAccount.type
    };
  }
}

async function createAccount(injectedAccount) {
  const injector = await web3FromSource(injectedAccount.meta.source);
  return new PolkadotAccount(injectedAccount, injector);
}
class PolkadotProvider extends Provider {
  constructor(options = {}) {
    super();
    this.options = options;
  }
  // eslint-disable-next-line class-methods-use-this
  async init() {
    const extensions = await web3Enable("@unique-nft/accounts");
    if (!extensions.length) {
      return Promise.resolve();
    }
    if (!isWeb3Injected) {
      return Promise.resolve();
    }
    await web3AccountsSubscribe(async (injectedAccounts) => {
      const accounts = await Promise.all(injectedAccounts.map(createAccount));
      this.emit("accountsChanged", accounts);
    });
    return Promise.resolve();
  }
  async getAccounts() {
    const injectedAccounts = await web3Accounts(this.options);
    return Promise.all(injectedAccounts.map(createAccount));
  }
  // eslint-disable-next-line class-methods-use-this
  forgetAccount(account) {
    throw new Error("Can't forget an account from polkadot provider");
  }
}

export { PolkadotAccount, PolkadotProvider };
