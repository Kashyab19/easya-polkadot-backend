'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var types = require('@unique-nft/accounts/types');
var extensionDapp = require('@polkadot/extension-dapp');

class PolkadotAccount extends types.Account {
  constructor(injectedAccount, injector) {
    super(injectedAccount, injectedAccount.address);
    this.injectedAccount = injectedAccount;
    this.injector = injector;
  }
  formatAddress(prefix) {
    return types.getAddressFromSubstrate(this.injectedAccount.address, prefix);
  }
  async sign(unsignedTxPayload) {
    var _a, _b;
    const signPayload = (_b = (_a = this.injector) == null ? void 0 : _a.signer) == null ? void 0 : _b.signPayload;
    if (!signPayload) {
      throw new Error(
        "Failed to sign message; signPayload() method is missing"
      );
    }
    const { signature } = await signPayload(
      unsignedTxPayload.signerPayloadJSON
    );
    return {
      signature,
      signatureType: this.injectedAccount.type
    };
  }
}

async function createAccount(injectedAccount) {
  const injector = await extensionDapp.web3FromSource(injectedAccount.meta.source);
  return new PolkadotAccount(injectedAccount, injector);
}
class PolkadotProvider extends types.Provider {
  constructor(options = {}) {
    super();
    this.options = options;
  }
  // eslint-disable-next-line class-methods-use-this
  async init() {
    const extensions = await extensionDapp.web3Enable("@unique-nft/accounts");
    if (!extensions.length) {
      return Promise.resolve();
    }
    if (!extensionDapp.isWeb3Injected) {
      return Promise.resolve();
    }
    await extensionDapp.web3AccountsSubscribe(async (injectedAccounts) => {
      const accounts = await Promise.all(injectedAccounts.map(createAccount));
      this.emit("accountsChanged", accounts);
    });
    return Promise.resolve();
  }
  async getAccounts() {
    const injectedAccounts = await extensionDapp.web3Accounts(this.options);
    return Promise.all(injectedAccounts.map(createAccount));
  }
  // eslint-disable-next-line class-methods-use-this
  forgetAccount(account) {
    throw new Error("Can't forget an account from polkadot provider");
  }
}

exports.PolkadotAccount = PolkadotAccount;
exports.PolkadotProvider = PolkadotProvider;
