declare const HexString: {
    fromArray: (bytes: number[] | Uint8Array) => string;
    fromU8a: (bytes: number[] | Uint8Array) => string;
    toArray(hexString: string): number[];
    toU8a: (hexString: string) => Uint8Array;
};
declare const Utf8: {
    stringToU8a(str: string): Uint8Array;
    stringToNumberArray(str: string): number[];
    u8aToString(u8a: Uint8Array): string;
    numberArrayToString(arr: number[] | Uint8Array): string;
    stringToHexString(str: string): string;
    hexStringToString(hexString: string): string;
    lengthInBytes(str: string): number;
};
declare const Utf16: {
    stringToU16a(str: string): Uint16Array;
    stringToNumberArray(str: string): number[];
    numberArrayToString(arr: number[] | Uint16Array): string;
    u16aToString(arr: number[] | Uint16Array): string;
    lengthInBytes(str: string): number;
};
declare const UtfHelpers: {
    HexString: {
        fromArray: (bytes: number[] | Uint8Array) => string;
        fromU8a: (bytes: number[] | Uint8Array) => string;
        toArray(hexString: string): number[];
        toU8a: (hexString: string) => Uint8Array;
    };
    Utf8: {
        stringToU8a(str: string): Uint8Array;
        stringToNumberArray(str: string): number[];
        u8aToString(u8a: Uint8Array): string;
        numberArrayToString(arr: number[] | Uint8Array): string;
        stringToHexString(str: string): string;
        hexStringToString(hexString: string): string;
        lengthInBytes(str: string): number;
    };
    Utf16: {
        stringToU16a(str: string): Uint16Array;
        stringToNumberArray(str: string): number[];
        numberArrayToString(arr: number[] | Uint16Array): string;
        u16aToString(arr: number[] | Uint16Array): string;
        lengthInBytes(str: string): number;
    };
};

export { HexString, Utf16, Utf8, UtfHelpers };
